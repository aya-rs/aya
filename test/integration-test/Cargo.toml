[package]
name = "integration-test"
version = "0.1.0"
edition = "2021"
publish = false

[dependencies]
anyhow = "1"
assert_matches = "1.5.0"
aya = { path = "../../aya" }
aya-log = { path = "../../aya-log" }
aya-obj = { path = "../../aya-obj" }
libc = { version = "0.2.105" }
log = "0.4"
object = { version = "0.31", default-features = false, features = [
    "elf",
    "read_core",
    "std",
] }
rbpf = "0.2.0"
tokio = { version = "1.24", default-features = false, features = [
    "macros",
    "time",
] }

[build-dependencies]
cargo_metadata = { version = "0.15.4", default-features = false }
# TODO(https://github.com/rust-lang/cargo/issues/12375): this should be an artifact dependency, but
# it's not possible to tell cargo to use `-Z build-std` to build it. We cargo-in-cargo in the build
# script to build this, but we want to teach cargo about the dependecy so that cache invalidation
# works properly.
#
# Note also that https://github.com/rust-lang/cargo/issues/10593 occurs when `target = ...` is added
# to an artifact dependency; it seems possible to work around that by setting `resolver = "1"` in
# Cargo.toml in the workspace root.
#
# Finally note that *any* usage of `artifact = ...` in *any* Cargo.toml in the workspace breaks
# workflows with stable cargo; stable cargo outright refuses to load manifests that use unstable
# features.
integration-ebpf = { path = "../integration-ebpf" }
xtask = { path = "../../xtask" }
