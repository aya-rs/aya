pub mod aya
pub use aya::Btf
pub use aya::BtfError
pub use aya::Endianness
pub use aya::PinningType
pub use aya::bpf_map_def
pub mod aya::maps
pub mod aya::maps::array
pub struct aya::maps::array::Array<T, V: aya::Pod>
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::array::Array<T, V>
pub fn aya::maps::array::Array<T, V>::get(&self, index: &u32, flags: u64) -> core::result::Result<V, aya::maps::MapError>
pub fn aya::maps::array::Array<T, V>::iter(&self) -> impl core::iter::traits::iterator::Iterator<Item = core::result::Result<V, aya::maps::MapError>> + '_
pub fn aya::maps::array::Array<T, V>::len(&self) -> u32
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::array::Array<T, V>
pub fn aya::maps::array::Array<T, V>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>, V: aya::Pod> aya::maps::array::Array<T, V>
pub fn aya::maps::array::Array<T, V>::set(&mut self, index: u32, value: impl core::borrow::Borrow<V>, flags: u64) -> core::result::Result<(), aya::maps::MapError>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::array::Array<&'a aya::maps::MapData, V>
pub type aya::maps::array::Array<&'a aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::array::Array<&'a aya::maps::MapData, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::array::Array<&'a mut aya::maps::MapData, V>
pub type aya::maps::array::Array<&'a mut aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::array::Array<&'a mut aya::maps::MapData, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::IterableMap<u32, V> for aya::maps::array::Array<T, V>
pub fn aya::maps::array::Array<T, V>::get(&self, index: &u32) -> core::result::Result<V, aya::maps::MapError>
pub fn aya::maps::array::Array<T, V>::map(&self) -> &aya::maps::MapData
impl<V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::array::Array<aya::maps::MapData, V>
pub type aya::maps::array::Array<aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::array::Array<aya::maps::MapData, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T, V> core::marker::Freeze for aya::maps::array::Array<T, V> where T: core::marker::Freeze
impl<T, V> core::marker::Send for aya::maps::array::Array<T, V> where T: core::marker::Send, V: core::marker::Send
impl<T, V> core::marker::Sync for aya::maps::array::Array<T, V> where T: core::marker::Sync, V: core::marker::Sync
impl<T, V> core::marker::Unpin for aya::maps::array::Array<T, V> where T: core::marker::Unpin, V: core::marker::Unpin
impl<T, V> core::panic::unwind_safe::RefUnwindSafe for aya::maps::array::Array<T, V> where T: core::panic::unwind_safe::RefUnwindSafe, V: core::panic::unwind_safe::RefUnwindSafe
impl<T, V> core::panic::unwind_safe::UnwindSafe for aya::maps::array::Array<T, V> where T: core::panic::unwind_safe::UnwindSafe, V: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::array::Array<T, V> where U: core::convert::From<T>
pub fn aya::maps::array::Array<T, V>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::array::Array<T, V> where U: core::convert::Into<T>
pub type aya::maps::array::Array<T, V>::Error = core::convert::Infallible
pub fn aya::maps::array::Array<T, V>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::array::Array<T, V> where U: core::convert::TryFrom<T>
pub type aya::maps::array::Array<T, V>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::array::Array<T, V>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::array::Array<T, V> where T: 'static + ?core::marker::Sized
pub fn aya::maps::array::Array<T, V>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::array::Array<T, V> where T: ?core::marker::Sized
pub fn aya::maps::array::Array<T, V>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::array::Array<T, V> where T: ?core::marker::Sized
pub fn aya::maps::array::Array<T, V>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::array::Array<T, V>
pub fn aya::maps::array::Array<T, V>::from(t: T) -> T
pub struct aya::maps::array::PerCpuArray<T, V: aya::Pod>
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::PerCpuArray<T, V>
pub fn aya::maps::PerCpuArray<T, V>::get(&self, index: &u32, flags: u64) -> core::result::Result<aya::maps::PerCpuValues<V>, aya::maps::MapError>
pub fn aya::maps::PerCpuArray<T, V>::iter(&self) -> impl core::iter::traits::iterator::Iterator<Item = core::result::Result<aya::maps::PerCpuValues<V>, aya::maps::MapError>> + '_
pub fn aya::maps::PerCpuArray<T, V>::len(&self) -> u32
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::PerCpuArray<T, V>
pub fn aya::maps::PerCpuArray<T, V>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>, V: aya::Pod> aya::maps::PerCpuArray<T, V>
pub fn aya::maps::PerCpuArray<T, V>::set(&mut self, index: u32, values: aya::maps::PerCpuValues<V>, flags: u64) -> core::result::Result<(), aya::maps::MapError>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::PerCpuArray<&'a aya::maps::MapData, V>
pub type aya::maps::PerCpuArray<&'a aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::PerCpuArray<&'a aya::maps::MapData, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::PerCpuArray<&'a mut aya::maps::MapData, V>
pub type aya::maps::PerCpuArray<&'a mut aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::PerCpuArray<&'a mut aya::maps::MapData, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::IterableMap<u32, aya::maps::PerCpuValues<V>> for aya::maps::PerCpuArray<T, V>
pub fn aya::maps::PerCpuArray<T, V>::get(&self, index: &u32) -> core::result::Result<aya::maps::PerCpuValues<V>, aya::maps::MapError>
pub fn aya::maps::PerCpuArray<T, V>::map(&self) -> &aya::maps::MapData
impl<V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::PerCpuArray<aya::maps::MapData, V>
pub type aya::maps::PerCpuArray<aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::PerCpuArray<aya::maps::MapData, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T, V> core::marker::Freeze for aya::maps::PerCpuArray<T, V> where T: core::marker::Freeze
impl<T, V> core::marker::Send for aya::maps::PerCpuArray<T, V> where T: core::marker::Send, V: core::marker::Send
impl<T, V> core::marker::Sync for aya::maps::PerCpuArray<T, V> where T: core::marker::Sync, V: core::marker::Sync
impl<T, V> core::marker::Unpin for aya::maps::PerCpuArray<T, V> where T: core::marker::Unpin, V: core::marker::Unpin
impl<T, V> core::panic::unwind_safe::RefUnwindSafe for aya::maps::PerCpuArray<T, V> where T: core::panic::unwind_safe::RefUnwindSafe, V: core::panic::unwind_safe::RefUnwindSafe
impl<T, V> core::panic::unwind_safe::UnwindSafe for aya::maps::PerCpuArray<T, V> where T: core::panic::unwind_safe::UnwindSafe, V: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::PerCpuArray<T, V> where U: core::convert::From<T>
pub fn aya::maps::PerCpuArray<T, V>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::PerCpuArray<T, V> where U: core::convert::Into<T>
pub type aya::maps::PerCpuArray<T, V>::Error = core::convert::Infallible
pub fn aya::maps::PerCpuArray<T, V>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::PerCpuArray<T, V> where U: core::convert::TryFrom<T>
pub type aya::maps::PerCpuArray<T, V>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::PerCpuArray<T, V>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::PerCpuArray<T, V> where T: 'static + ?core::marker::Sized
pub fn aya::maps::PerCpuArray<T, V>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::PerCpuArray<T, V> where T: ?core::marker::Sized
pub fn aya::maps::PerCpuArray<T, V>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::PerCpuArray<T, V> where T: ?core::marker::Sized
pub fn aya::maps::PerCpuArray<T, V>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::PerCpuArray<T, V>
pub fn aya::maps::PerCpuArray<T, V>::from(t: T) -> T
pub struct aya::maps::array::ProgramArray<T>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::ProgramArray<T>
pub fn aya::maps::ProgramArray<T>::indices(&self) -> aya::maps::MapKeys<'_, u32>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::ProgramArray<T>
pub fn aya::maps::ProgramArray<T>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>> aya::maps::ProgramArray<T>
pub fn aya::maps::ProgramArray<T>::clear_index(&mut self, index: &u32) -> core::result::Result<(), aya::maps::MapError>
pub fn aya::maps::ProgramArray<T>::set(&mut self, index: u32, program: &aya::programs::ProgramFd, flags: u64) -> core::result::Result<(), aya::maps::MapError>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::ProgramArray<aya::maps::MapData>
pub type aya::maps::ProgramArray<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::ProgramArray<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::ProgramArray<&'a aya::maps::MapData>
pub type aya::maps::ProgramArray<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::ProgramArray<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::ProgramArray<&'a mut aya::maps::MapData>
pub type aya::maps::ProgramArray<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::ProgramArray<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T> core::marker::Freeze for aya::maps::ProgramArray<T> where T: core::marker::Freeze
impl<T> core::marker::Send for aya::maps::ProgramArray<T> where T: core::marker::Send
impl<T> core::marker::Sync for aya::maps::ProgramArray<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for aya::maps::ProgramArray<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for aya::maps::ProgramArray<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for aya::maps::ProgramArray<T> where T: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::ProgramArray<T> where U: core::convert::From<T>
pub fn aya::maps::ProgramArray<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::ProgramArray<T> where U: core::convert::Into<T>
pub type aya::maps::ProgramArray<T>::Error = core::convert::Infallible
pub fn aya::maps::ProgramArray<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::ProgramArray<T> where U: core::convert::TryFrom<T>
pub type aya::maps::ProgramArray<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::ProgramArray<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::ProgramArray<T> where T: 'static + ?core::marker::Sized
pub fn aya::maps::ProgramArray<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::ProgramArray<T> where T: ?core::marker::Sized
pub fn aya::maps::ProgramArray<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::ProgramArray<T> where T: ?core::marker::Sized
pub fn aya::maps::ProgramArray<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::ProgramArray<T>
pub fn aya::maps::ProgramArray<T>::from(t: T) -> T
pub mod aya::maps::bloom_filter
pub struct aya::maps::bloom_filter::BloomFilter<T, V: aya::Pod>
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::bloom_filter::BloomFilter<T, V>
pub fn aya::maps::bloom_filter::BloomFilter<T, V>::contains(&self, value: &V, flags: u64) -> core::result::Result<(), aya::maps::MapError>
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::bloom_filter::BloomFilter<T, V>
pub fn aya::maps::bloom_filter::BloomFilter<T, V>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>, V: aya::Pod> aya::maps::bloom_filter::BloomFilter<T, V>
pub fn aya::maps::bloom_filter::BloomFilter<T, V>::insert(&mut self, value: impl core::borrow::Borrow<V>, flags: u64) -> core::result::Result<(), aya::maps::MapError>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::bloom_filter::BloomFilter<&'a aya::maps::MapData, V>
pub type aya::maps::bloom_filter::BloomFilter<&'a aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::bloom_filter::BloomFilter<&'a aya::maps::MapData, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::bloom_filter::BloomFilter<&'a mut aya::maps::MapData, V>
pub type aya::maps::bloom_filter::BloomFilter<&'a mut aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::bloom_filter::BloomFilter<&'a mut aya::maps::MapData, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T: core::fmt::Debug, V: core::fmt::Debug + aya::Pod> core::fmt::Debug for aya::maps::bloom_filter::BloomFilter<T, V>
pub fn aya::maps::bloom_filter::BloomFilter<T, V>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::bloom_filter::BloomFilter<aya::maps::MapData, V>
pub type aya::maps::bloom_filter::BloomFilter<aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::bloom_filter::BloomFilter<aya::maps::MapData, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T, V> core::marker::Freeze for aya::maps::bloom_filter::BloomFilter<T, V> where T: core::marker::Freeze
impl<T, V> core::marker::Send for aya::maps::bloom_filter::BloomFilter<T, V> where T: core::marker::Send, V: core::marker::Send
impl<T, V> core::marker::Sync for aya::maps::bloom_filter::BloomFilter<T, V> where T: core::marker::Sync, V: core::marker::Sync
impl<T, V> core::marker::Unpin for aya::maps::bloom_filter::BloomFilter<T, V> where T: core::marker::Unpin, V: core::marker::Unpin
impl<T, V> core::panic::unwind_safe::RefUnwindSafe for aya::maps::bloom_filter::BloomFilter<T, V> where T: core::panic::unwind_safe::RefUnwindSafe, V: core::panic::unwind_safe::RefUnwindSafe
impl<T, V> core::panic::unwind_safe::UnwindSafe for aya::maps::bloom_filter::BloomFilter<T, V> where T: core::panic::unwind_safe::UnwindSafe, V: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::bloom_filter::BloomFilter<T, V> where U: core::convert::From<T>
pub fn aya::maps::bloom_filter::BloomFilter<T, V>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::bloom_filter::BloomFilter<T, V> where U: core::convert::Into<T>
pub type aya::maps::bloom_filter::BloomFilter<T, V>::Error = core::convert::Infallible
pub fn aya::maps::bloom_filter::BloomFilter<T, V>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::bloom_filter::BloomFilter<T, V> where U: core::convert::TryFrom<T>
pub type aya::maps::bloom_filter::BloomFilter<T, V>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::bloom_filter::BloomFilter<T, V>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::bloom_filter::BloomFilter<T, V> where T: 'static + ?core::marker::Sized
pub fn aya::maps::bloom_filter::BloomFilter<T, V>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::bloom_filter::BloomFilter<T, V> where T: ?core::marker::Sized
pub fn aya::maps::bloom_filter::BloomFilter<T, V>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::bloom_filter::BloomFilter<T, V> where T: ?core::marker::Sized
pub fn aya::maps::bloom_filter::BloomFilter<T, V>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::bloom_filter::BloomFilter<T, V>
pub fn aya::maps::bloom_filter::BloomFilter<T, V>::from(t: T) -> T
pub mod aya::maps::hash_map
pub struct aya::maps::hash_map::HashMap<T, K, V>
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::hash_map::HashMap<T, K, V>
pub fn aya::maps::hash_map::HashMap<T, K, V>::get(&self, key: &K, flags: u64) -> core::result::Result<V, aya::maps::MapError>
pub fn aya::maps::hash_map::HashMap<T, K, V>::iter(&self) -> aya::maps::MapIter<'_, K, V, Self>
pub fn aya::maps::hash_map::HashMap<T, K, V>::keys(&self) -> aya::maps::MapKeys<'_, K>
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::hash_map::HashMap<T, K, V>
pub fn aya::maps::hash_map::HashMap<T, K, V>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::hash_map::HashMap<T, K, V>
pub fn aya::maps::hash_map::HashMap<T, K, V>::insert(&mut self, key: impl core::borrow::Borrow<K>, value: impl core::borrow::Borrow<V>, flags: u64) -> core::result::Result<(), aya::maps::MapError>
pub fn aya::maps::hash_map::HashMap<T, K, V>::remove(&mut self, key: &K) -> core::result::Result<(), aya::maps::MapError>
impl<'a, K: aya::Pod, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::hash_map::HashMap<&'a aya::maps::MapData, K, V>
pub type aya::maps::hash_map::HashMap<&'a aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::hash_map::HashMap<&'a aya::maps::MapData, K, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, K: aya::Pod, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::hash_map::HashMap<&'a mut aya::maps::MapData, K, V>
pub type aya::maps::hash_map::HashMap<&'a mut aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::hash_map::HashMap<&'a mut aya::maps::MapData, K, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<K: aya::Pod, V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::hash_map::HashMap<aya::maps::MapData, K, V>
pub type aya::maps::hash_map::HashMap<aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::hash_map::HashMap<aya::maps::MapData, K, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::IterableMap<K, V> for aya::maps::hash_map::HashMap<T, K, V>
pub fn aya::maps::hash_map::HashMap<T, K, V>::get(&self, key: &K) -> core::result::Result<V, aya::maps::MapError>
pub fn aya::maps::hash_map::HashMap<T, K, V>::map(&self) -> &aya::maps::MapData
impl<T: core::fmt::Debug, K: core::fmt::Debug, V: core::fmt::Debug> core::fmt::Debug for aya::maps::hash_map::HashMap<T, K, V>
pub fn aya::maps::hash_map::HashMap<T, K, V>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T, K, V> core::marker::Freeze for aya::maps::hash_map::HashMap<T, K, V> where T: core::marker::Freeze
impl<T, K, V> core::marker::Send for aya::maps::hash_map::HashMap<T, K, V> where T: core::marker::Send, K: core::marker::Send, V: core::marker::Send
impl<T, K, V> core::marker::Sync for aya::maps::hash_map::HashMap<T, K, V> where T: core::marker::Sync, K: core::marker::Sync, V: core::marker::Sync
impl<T, K, V> core::marker::Unpin for aya::maps::hash_map::HashMap<T, K, V> where T: core::marker::Unpin, K: core::marker::Unpin, V: core::marker::Unpin
impl<T, K, V> core::panic::unwind_safe::RefUnwindSafe for aya::maps::hash_map::HashMap<T, K, V> where T: core::panic::unwind_safe::RefUnwindSafe, K: core::panic::unwind_safe::RefUnwindSafe, V: core::panic::unwind_safe::RefUnwindSafe
impl<T, K, V> core::panic::unwind_safe::UnwindSafe for aya::maps::hash_map::HashMap<T, K, V> where T: core::panic::unwind_safe::UnwindSafe, K: core::panic::unwind_safe::UnwindSafe, V: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::hash_map::HashMap<T, K, V> where U: core::convert::From<T>
pub fn aya::maps::hash_map::HashMap<T, K, V>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::hash_map::HashMap<T, K, V> where U: core::convert::Into<T>
pub type aya::maps::hash_map::HashMap<T, K, V>::Error = core::convert::Infallible
pub fn aya::maps::hash_map::HashMap<T, K, V>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::hash_map::HashMap<T, K, V> where U: core::convert::TryFrom<T>
pub type aya::maps::hash_map::HashMap<T, K, V>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::hash_map::HashMap<T, K, V>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::hash_map::HashMap<T, K, V> where T: 'static + ?core::marker::Sized
pub fn aya::maps::hash_map::HashMap<T, K, V>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::hash_map::HashMap<T, K, V> where T: ?core::marker::Sized
pub fn aya::maps::hash_map::HashMap<T, K, V>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::hash_map::HashMap<T, K, V> where T: ?core::marker::Sized
pub fn aya::maps::hash_map::HashMap<T, K, V>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::hash_map::HashMap<T, K, V>
pub fn aya::maps::hash_map::HashMap<T, K, V>::from(t: T) -> T
pub struct aya::maps::hash_map::PerCpuHashMap<T, K: aya::Pod, V: aya::Pod>
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::hash_map::PerCpuHashMap<T, K, V>
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::get(&self, key: &K, flags: u64) -> core::result::Result<aya::maps::PerCpuValues<V>, aya::maps::MapError>
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::iter(&self) -> aya::maps::MapIter<'_, K, aya::maps::PerCpuValues<V>, Self>
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::keys(&self) -> aya::maps::MapKeys<'_, K>
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::hash_map::PerCpuHashMap<T, K, V>
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::hash_map::PerCpuHashMap<T, K, V>
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::insert(&mut self, key: impl core::borrow::Borrow<K>, values: aya::maps::PerCpuValues<V>, flags: u64) -> core::result::Result<(), aya::maps::MapError>
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::remove(&mut self, key: &K) -> core::result::Result<(), aya::maps::MapError>
impl<'a, K: aya::Pod, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::hash_map::PerCpuHashMap<&'a aya::maps::MapData, K, V>
pub type aya::maps::hash_map::PerCpuHashMap<&'a aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::hash_map::PerCpuHashMap<&'a aya::maps::MapData, K, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, K: aya::Pod, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::hash_map::PerCpuHashMap<&'a mut aya::maps::MapData, K, V>
pub type aya::maps::hash_map::PerCpuHashMap<&'a mut aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::hash_map::PerCpuHashMap<&'a mut aya::maps::MapData, K, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<K: aya::Pod, V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::hash_map::PerCpuHashMap<aya::maps::MapData, K, V>
pub type aya::maps::hash_map::PerCpuHashMap<aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::hash_map::PerCpuHashMap<aya::maps::MapData, K, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::IterableMap<K, aya::maps::PerCpuValues<V>> for aya::maps::hash_map::PerCpuHashMap<T, K, V>
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::get(&self, key: &K) -> core::result::Result<aya::maps::PerCpuValues<V>, aya::maps::MapError>
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::map(&self) -> &aya::maps::MapData
impl<T, K, V> core::marker::Freeze for aya::maps::hash_map::PerCpuHashMap<T, K, V> where T: core::marker::Freeze
impl<T, K, V> core::marker::Send for aya::maps::hash_map::PerCpuHashMap<T, K, V> where T: core::marker::Send, K: core::marker::Send, V: core::marker::Send
impl<T, K, V> core::marker::Sync for aya::maps::hash_map::PerCpuHashMap<T, K, V> where T: core::marker::Sync, K: core::marker::Sync, V: core::marker::Sync
impl<T, K, V> core::marker::Unpin for aya::maps::hash_map::PerCpuHashMap<T, K, V> where T: core::marker::Unpin, K: core::marker::Unpin, V: core::marker::Unpin
impl<T, K, V> core::panic::unwind_safe::RefUnwindSafe for aya::maps::hash_map::PerCpuHashMap<T, K, V> where T: core::panic::unwind_safe::RefUnwindSafe, K: core::panic::unwind_safe::RefUnwindSafe, V: core::panic::unwind_safe::RefUnwindSafe
impl<T, K, V> core::panic::unwind_safe::UnwindSafe for aya::maps::hash_map::PerCpuHashMap<T, K, V> where T: core::panic::unwind_safe::UnwindSafe, K: core::panic::unwind_safe::UnwindSafe, V: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::hash_map::PerCpuHashMap<T, K, V> where U: core::convert::From<T>
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::hash_map::PerCpuHashMap<T, K, V> where U: core::convert::Into<T>
pub type aya::maps::hash_map::PerCpuHashMap<T, K, V>::Error = core::convert::Infallible
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::hash_map::PerCpuHashMap<T, K, V> where U: core::convert::TryFrom<T>
pub type aya::maps::hash_map::PerCpuHashMap<T, K, V>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::hash_map::PerCpuHashMap<T, K, V> where T: 'static + ?core::marker::Sized
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::hash_map::PerCpuHashMap<T, K, V> where T: ?core::marker::Sized
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::hash_map::PerCpuHashMap<T, K, V> where T: ?core::marker::Sized
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::hash_map::PerCpuHashMap<T, K, V>
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::from(t: T) -> T
pub mod aya::maps::lpm_trie
#[repr(packed)] pub struct aya::maps::lpm_trie::Key<K: aya::Pod>
impl<K: aya::Pod> aya::maps::lpm_trie::Key<K>
pub fn aya::maps::lpm_trie::Key<K>::data(&self) -> K
pub fn aya::maps::lpm_trie::Key<K>::new(prefix_len: u32, data: K) -> Self
pub fn aya::maps::lpm_trie::Key<K>::prefix_len(&self) -> u32
impl<K: aya::Pod> aya::Pod for aya::maps::lpm_trie::Key<K>
impl<K: aya::Pod> core::clone::Clone for aya::maps::lpm_trie::Key<K>
pub fn aya::maps::lpm_trie::Key<K>::clone(&self) -> Self
impl<K: aya::Pod> core::marker::Copy for aya::maps::lpm_trie::Key<K>
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::IterableMap<aya::maps::lpm_trie::Key<K>, V> for aya::maps::lpm_trie::LpmTrie<T, K, V>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::get(&self, key: &aya::maps::lpm_trie::Key<K>) -> core::result::Result<V, aya::maps::MapError>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::map(&self) -> &aya::maps::MapData
impl<K> core::marker::Freeze for aya::maps::lpm_trie::Key<K> where K: core::marker::Freeze
impl<K> core::marker::Send for aya::maps::lpm_trie::Key<K> where K: core::marker::Send
impl<K> core::marker::Sync for aya::maps::lpm_trie::Key<K> where K: core::marker::Sync
impl<K> core::marker::Unpin for aya::maps::lpm_trie::Key<K> where K: core::marker::Unpin
impl<K> core::panic::unwind_safe::RefUnwindSafe for aya::maps::lpm_trie::Key<K> where K: core::panic::unwind_safe::RefUnwindSafe
impl<K> core::panic::unwind_safe::UnwindSafe for aya::maps::lpm_trie::Key<K> where K: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::lpm_trie::Key<K> where U: core::convert::From<T>
pub fn aya::maps::lpm_trie::Key<K>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::lpm_trie::Key<K> where U: core::convert::Into<T>
pub type aya::maps::lpm_trie::Key<K>::Error = core::convert::Infallible
pub fn aya::maps::lpm_trie::Key<K>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::lpm_trie::Key<K> where U: core::convert::TryFrom<T>
pub type aya::maps::lpm_trie::Key<K>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::lpm_trie::Key<K>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for aya::maps::lpm_trie::Key<K> where T: core::clone::Clone
pub type aya::maps::lpm_trie::Key<K>::Owned = T
pub fn aya::maps::lpm_trie::Key<K>::clone_into(&self, target: &mut T)
pub fn aya::maps::lpm_trie::Key<K>::to_owned(&self) -> T
impl<T> core::any::Any for aya::maps::lpm_trie::Key<K> where T: 'static + ?core::marker::Sized
pub fn aya::maps::lpm_trie::Key<K>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::lpm_trie::Key<K> where T: ?core::marker::Sized
pub fn aya::maps::lpm_trie::Key<K>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::lpm_trie::Key<K> where T: ?core::marker::Sized
pub fn aya::maps::lpm_trie::Key<K>::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for aya::maps::lpm_trie::Key<K> where T: core::clone::Clone
pub unsafe fn aya::maps::lpm_trie::Key<K>::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for aya::maps::lpm_trie::Key<K>
pub fn aya::maps::lpm_trie::Key<K>::from(t: T) -> T
pub struct aya::maps::lpm_trie::LpmTrie<T, K, V>
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::lpm_trie::LpmTrie<T, K, V>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::get(&self, key: &aya::maps::lpm_trie::Key<K>, flags: u64) -> core::result::Result<V, aya::maps::MapError>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::iter(&self) -> aya::maps::MapIter<'_, aya::maps::lpm_trie::Key<K>, V, Self>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::keys(&self) -> aya::maps::MapKeys<'_, aya::maps::lpm_trie::Key<K>>
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::lpm_trie::LpmTrie<T, K, V>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::lpm_trie::LpmTrie<T, K, V>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::insert(&mut self, key: &aya::maps::lpm_trie::Key<K>, value: impl core::borrow::Borrow<V>, flags: u64) -> core::result::Result<(), aya::maps::MapError>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::remove(&mut self, key: &aya::maps::lpm_trie::Key<K>) -> core::result::Result<(), aya::maps::MapError>
impl<'a, K: aya::Pod, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::lpm_trie::LpmTrie<&'a aya::maps::MapData, K, V>
pub type aya::maps::lpm_trie::LpmTrie<&'a aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::lpm_trie::LpmTrie<&'a aya::maps::MapData, K, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, K: aya::Pod, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::lpm_trie::LpmTrie<&'a mut aya::maps::MapData, K, V>
pub type aya::maps::lpm_trie::LpmTrie<&'a mut aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::lpm_trie::LpmTrie<&'a mut aya::maps::MapData, K, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<K: aya::Pod, V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::lpm_trie::LpmTrie<aya::maps::MapData, K, V>
pub type aya::maps::lpm_trie::LpmTrie<aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::lpm_trie::LpmTrie<aya::maps::MapData, K, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::IterableMap<aya::maps::lpm_trie::Key<K>, V> for aya::maps::lpm_trie::LpmTrie<T, K, V>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::get(&self, key: &aya::maps::lpm_trie::Key<K>) -> core::result::Result<V, aya::maps::MapError>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::map(&self) -> &aya::maps::MapData
impl<T: core::fmt::Debug, K: core::fmt::Debug, V: core::fmt::Debug> core::fmt::Debug for aya::maps::lpm_trie::LpmTrie<T, K, V>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T, K, V> core::marker::Freeze for aya::maps::lpm_trie::LpmTrie<T, K, V> where T: core::marker::Freeze
impl<T, K, V> core::marker::Send for aya::maps::lpm_trie::LpmTrie<T, K, V> where T: core::marker::Send, K: core::marker::Send, V: core::marker::Send
impl<T, K, V> core::marker::Sync for aya::maps::lpm_trie::LpmTrie<T, K, V> where T: core::marker::Sync, K: core::marker::Sync, V: core::marker::Sync
impl<T, K, V> core::marker::Unpin for aya::maps::lpm_trie::LpmTrie<T, K, V> where T: core::marker::Unpin, K: core::marker::Unpin, V: core::marker::Unpin
impl<T, K, V> core::panic::unwind_safe::RefUnwindSafe for aya::maps::lpm_trie::LpmTrie<T, K, V> where T: core::panic::unwind_safe::RefUnwindSafe, K: core::panic::unwind_safe::RefUnwindSafe, V: core::panic::unwind_safe::RefUnwindSafe
impl<T, K, V> core::panic::unwind_safe::UnwindSafe for aya::maps::lpm_trie::LpmTrie<T, K, V> where T: core::panic::unwind_safe::UnwindSafe, K: core::panic::unwind_safe::UnwindSafe, V: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::lpm_trie::LpmTrie<T, K, V> where U: core::convert::From<T>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::lpm_trie::LpmTrie<T, K, V> where U: core::convert::Into<T>
pub type aya::maps::lpm_trie::LpmTrie<T, K, V>::Error = core::convert::Infallible
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::lpm_trie::LpmTrie<T, K, V> where U: core::convert::TryFrom<T>
pub type aya::maps::lpm_trie::LpmTrie<T, K, V>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::lpm_trie::LpmTrie<T, K, V> where T: 'static + ?core::marker::Sized
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::lpm_trie::LpmTrie<T, K, V> where T: ?core::marker::Sized
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::lpm_trie::LpmTrie<T, K, V> where T: ?core::marker::Sized
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::lpm_trie::LpmTrie<T, K, V>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::from(t: T) -> T
pub mod aya::maps::perf
pub enum aya::maps::perf::PerfBufferError
pub aya::maps::perf::PerfBufferError::IOError(std::io::error::Error)
pub aya::maps::perf::PerfBufferError::InvalidPageCount
pub aya::maps::perf::PerfBufferError::InvalidPageCount::page_count: usize
pub aya::maps::perf::PerfBufferError::MMapError
pub aya::maps::perf::PerfBufferError::MMapError::io_error: std::io::error::Error
pub aya::maps::perf::PerfBufferError::MoreSpaceNeeded
pub aya::maps::perf::PerfBufferError::MoreSpaceNeeded::size: usize
pub aya::maps::perf::PerfBufferError::NoBuffers
pub aya::maps::perf::PerfBufferError::OpenError
pub aya::maps::perf::PerfBufferError::OpenError::io_error: std::io::error::Error
pub aya::maps::perf::PerfBufferError::PerfEventEnableError
pub aya::maps::perf::PerfBufferError::PerfEventEnableError::io_error: std::io::error::Error
impl core::convert::From<std::io::error::Error> for aya::maps::perf::PerfBufferError
pub fn aya::maps::perf::PerfBufferError::from(source: std::io::error::Error) -> Self
impl core::error::Error for aya::maps::perf::PerfBufferError
pub fn aya::maps::perf::PerfBufferError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Debug for aya::maps::perf::PerfBufferError
pub fn aya::maps::perf::PerfBufferError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for aya::maps::perf::PerfBufferError
pub fn aya::maps::perf::PerfBufferError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::maps::perf::PerfBufferError
impl core::marker::Send for aya::maps::perf::PerfBufferError
impl core::marker::Sync for aya::maps::perf::PerfBufferError
impl core::marker::Unpin for aya::maps::perf::PerfBufferError
impl !core::panic::unwind_safe::RefUnwindSafe for aya::maps::perf::PerfBufferError
impl !core::panic::unwind_safe::UnwindSafe for aya::maps::perf::PerfBufferError
impl<T, U> core::convert::Into<U> for aya::maps::perf::PerfBufferError where U: core::convert::From<T>
pub fn aya::maps::perf::PerfBufferError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::perf::PerfBufferError where U: core::convert::Into<T>
pub type aya::maps::perf::PerfBufferError::Error = core::convert::Infallible
pub fn aya::maps::perf::PerfBufferError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::perf::PerfBufferError where U: core::convert::TryFrom<T>
pub type aya::maps::perf::PerfBufferError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::perf::PerfBufferError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for aya::maps::perf::PerfBufferError where T: core::fmt::Display + ?core::marker::Sized
pub fn aya::maps::perf::PerfBufferError::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for aya::maps::perf::PerfBufferError where T: 'static + ?core::marker::Sized
pub fn aya::maps::perf::PerfBufferError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::perf::PerfBufferError where T: ?core::marker::Sized
pub fn aya::maps::perf::PerfBufferError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::perf::PerfBufferError where T: ?core::marker::Sized
pub fn aya::maps::perf::PerfBufferError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::perf::PerfBufferError
pub fn aya::maps::perf::PerfBufferError::from(t: T) -> T
pub struct aya::maps::perf::AsyncPerfEventArray<T>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>> aya::maps::perf::AsyncPerfEventArray<T>
pub fn aya::maps::perf::AsyncPerfEventArray<T>::open(&mut self, index: u32, page_count: core::option::Option<usize>) -> core::result::Result<aya::maps::perf::AsyncPerfEventArrayBuffer<T>, aya::maps::perf::PerfBufferError>
pub fn aya::maps::perf::AsyncPerfEventArray<T>::pin<P: core::convert::AsRef<std::path::Path>>(&self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::perf::AsyncPerfEventArray<aya::maps::MapData>
pub type aya::maps::perf::AsyncPerfEventArray<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::perf::AsyncPerfEventArray<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::perf::AsyncPerfEventArray<&'a aya::maps::MapData>
pub type aya::maps::perf::AsyncPerfEventArray<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::perf::AsyncPerfEventArray<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::perf::AsyncPerfEventArray<&'a mut aya::maps::MapData>
pub type aya::maps::perf::AsyncPerfEventArray<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::perf::AsyncPerfEventArray<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T> core::marker::Freeze for aya::maps::perf::AsyncPerfEventArray<T>
impl<T> core::marker::Send for aya::maps::perf::AsyncPerfEventArray<T> where T: core::marker::Sync + core::marker::Send
impl<T> core::marker::Sync for aya::maps::perf::AsyncPerfEventArray<T> where T: core::marker::Sync + core::marker::Send
impl<T> core::marker::Unpin for aya::maps::perf::AsyncPerfEventArray<T>
impl<T> core::panic::unwind_safe::RefUnwindSafe for aya::maps::perf::AsyncPerfEventArray<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for aya::maps::perf::AsyncPerfEventArray<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::perf::AsyncPerfEventArray<T> where U: core::convert::From<T>
pub fn aya::maps::perf::AsyncPerfEventArray<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::perf::AsyncPerfEventArray<T> where U: core::convert::Into<T>
pub type aya::maps::perf::AsyncPerfEventArray<T>::Error = core::convert::Infallible
pub fn aya::maps::perf::AsyncPerfEventArray<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::perf::AsyncPerfEventArray<T> where U: core::convert::TryFrom<T>
pub type aya::maps::perf::AsyncPerfEventArray<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::perf::AsyncPerfEventArray<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::perf::AsyncPerfEventArray<T> where T: 'static + ?core::marker::Sized
pub fn aya::maps::perf::AsyncPerfEventArray<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::perf::AsyncPerfEventArray<T> where T: ?core::marker::Sized
pub fn aya::maps::perf::AsyncPerfEventArray<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::perf::AsyncPerfEventArray<T> where T: ?core::marker::Sized
pub fn aya::maps::perf::AsyncPerfEventArray<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::perf::AsyncPerfEventArray<T>
pub fn aya::maps::perf::AsyncPerfEventArray<T>::from(t: T) -> T
pub struct aya::maps::perf::AsyncPerfEventArrayBuffer<T: core::borrow::BorrowMut<aya::maps::MapData>>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>> aya::maps::perf::AsyncPerfEventArrayBuffer<T>
pub async fn aya::maps::perf::AsyncPerfEventArrayBuffer<T>::read_events(&mut self, buffers: &mut [bytes::bytes_mut::BytesMut]) -> core::result::Result<aya::maps::perf::Events, aya::maps::perf::PerfBufferError>
impl<T> !core::marker::Freeze for aya::maps::perf::AsyncPerfEventArrayBuffer<T>
impl<T> core::marker::Send for aya::maps::perf::AsyncPerfEventArrayBuffer<T> where T: core::marker::Sync + core::marker::Send
impl<T> core::marker::Sync for aya::maps::perf::AsyncPerfEventArrayBuffer<T> where T: core::marker::Sync + core::marker::Send
impl<T> core::marker::Unpin for aya::maps::perf::AsyncPerfEventArrayBuffer<T>
impl<T> !core::panic::unwind_safe::RefUnwindSafe for aya::maps::perf::AsyncPerfEventArrayBuffer<T>
impl<T> !core::panic::unwind_safe::UnwindSafe for aya::maps::perf::AsyncPerfEventArrayBuffer<T>
impl<T, U> core::convert::Into<U> for aya::maps::perf::AsyncPerfEventArrayBuffer<T> where U: core::convert::From<T>
pub fn aya::maps::perf::AsyncPerfEventArrayBuffer<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::perf::AsyncPerfEventArrayBuffer<T> where U: core::convert::Into<T>
pub type aya::maps::perf::AsyncPerfEventArrayBuffer<T>::Error = core::convert::Infallible
pub fn aya::maps::perf::AsyncPerfEventArrayBuffer<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::perf::AsyncPerfEventArrayBuffer<T> where U: core::convert::TryFrom<T>
pub type aya::maps::perf::AsyncPerfEventArrayBuffer<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::perf::AsyncPerfEventArrayBuffer<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::perf::AsyncPerfEventArrayBuffer<T> where T: 'static + ?core::marker::Sized
pub fn aya::maps::perf::AsyncPerfEventArrayBuffer<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::perf::AsyncPerfEventArrayBuffer<T> where T: ?core::marker::Sized
pub fn aya::maps::perf::AsyncPerfEventArrayBuffer<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::perf::AsyncPerfEventArrayBuffer<T> where T: ?core::marker::Sized
pub fn aya::maps::perf::AsyncPerfEventArrayBuffer<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::perf::AsyncPerfEventArrayBuffer<T>
pub fn aya::maps::perf::AsyncPerfEventArrayBuffer<T>::from(t: T) -> T
pub struct aya::maps::perf::Events
pub aya::maps::perf::Events::lost: usize
pub aya::maps::perf::Events::read: usize
impl core::cmp::Eq for aya::maps::perf::Events
impl core::cmp::PartialEq for aya::maps::perf::Events
pub fn aya::maps::perf::Events::eq(&self, other: &aya::maps::perf::Events) -> bool
impl core::fmt::Debug for aya::maps::perf::Events
pub fn aya::maps::perf::Events::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralPartialEq for aya::maps::perf::Events
impl core::marker::Freeze for aya::maps::perf::Events
impl core::marker::Send for aya::maps::perf::Events
impl core::marker::Sync for aya::maps::perf::Events
impl core::marker::Unpin for aya::maps::perf::Events
impl core::panic::unwind_safe::RefUnwindSafe for aya::maps::perf::Events
impl core::panic::unwind_safe::UnwindSafe for aya::maps::perf::Events
impl<Q, K> equivalent::Equivalent<K> for aya::maps::perf::Events where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::maps::perf::Events::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::maps::perf::Events where U: core::convert::From<T>
pub fn aya::maps::perf::Events::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::perf::Events where U: core::convert::Into<T>
pub type aya::maps::perf::Events::Error = core::convert::Infallible
pub fn aya::maps::perf::Events::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::perf::Events where U: core::convert::TryFrom<T>
pub type aya::maps::perf::Events::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::perf::Events::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::perf::Events where T: 'static + ?core::marker::Sized
pub fn aya::maps::perf::Events::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::perf::Events where T: ?core::marker::Sized
pub fn aya::maps::perf::Events::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::perf::Events where T: ?core::marker::Sized
pub fn aya::maps::perf::Events::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::perf::Events
pub fn aya::maps::perf::Events::from(t: T) -> T
pub struct aya::maps::perf::PerfEventArray<T>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::perf::PerfEventArray<T>
pub fn aya::maps::perf::PerfEventArray<T>::pin<P: core::convert::AsRef<std::path::Path>>(&self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>> aya::maps::perf::PerfEventArray<T>
pub fn aya::maps::perf::PerfEventArray<T>::open(&mut self, index: u32, page_count: core::option::Option<usize>) -> core::result::Result<aya::maps::perf::PerfEventArrayBuffer<T>, aya::maps::perf::PerfBufferError>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::perf::PerfEventArray<aya::maps::MapData>
pub type aya::maps::perf::PerfEventArray<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::perf::PerfEventArray<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::perf::PerfEventArray<&'a aya::maps::MapData>
pub type aya::maps::perf::PerfEventArray<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::perf::PerfEventArray<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::perf::PerfEventArray<&'a mut aya::maps::MapData>
pub type aya::maps::perf::PerfEventArray<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::perf::PerfEventArray<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T> core::marker::Freeze for aya::maps::perf::PerfEventArray<T>
impl<T> core::marker::Send for aya::maps::perf::PerfEventArray<T> where T: core::marker::Sync + core::marker::Send
impl<T> core::marker::Sync for aya::maps::perf::PerfEventArray<T> where T: core::marker::Sync + core::marker::Send
impl<T> core::marker::Unpin for aya::maps::perf::PerfEventArray<T>
impl<T> core::panic::unwind_safe::RefUnwindSafe for aya::maps::perf::PerfEventArray<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for aya::maps::perf::PerfEventArray<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::perf::PerfEventArray<T> where U: core::convert::From<T>
pub fn aya::maps::perf::PerfEventArray<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::perf::PerfEventArray<T> where U: core::convert::Into<T>
pub type aya::maps::perf::PerfEventArray<T>::Error = core::convert::Infallible
pub fn aya::maps::perf::PerfEventArray<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::perf::PerfEventArray<T> where U: core::convert::TryFrom<T>
pub type aya::maps::perf::PerfEventArray<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::perf::PerfEventArray<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::perf::PerfEventArray<T> where T: 'static + ?core::marker::Sized
pub fn aya::maps::perf::PerfEventArray<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::perf::PerfEventArray<T> where T: ?core::marker::Sized
pub fn aya::maps::perf::PerfEventArray<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::perf::PerfEventArray<T> where T: ?core::marker::Sized
pub fn aya::maps::perf::PerfEventArray<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::perf::PerfEventArray<T>
pub fn aya::maps::perf::PerfEventArray<T>::from(t: T) -> T
pub struct aya::maps::perf::PerfEventArrayBuffer<T>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>> aya::maps::perf::PerfEventArrayBuffer<T>
pub fn aya::maps::perf::PerfEventArrayBuffer<T>::read_events(&mut self, out_bufs: &mut [bytes::bytes_mut::BytesMut]) -> core::result::Result<aya::maps::perf::Events, aya::maps::perf::PerfBufferError>
pub fn aya::maps::perf::PerfEventArrayBuffer<T>::readable(&self) -> bool
impl<T: core::borrow::BorrowMut<aya::maps::MapData>> std::os::fd::owned::AsFd for aya::maps::perf::PerfEventArrayBuffer<T>
pub fn aya::maps::perf::PerfEventArrayBuffer<T>::as_fd(&self) -> std::os::fd::owned::BorrowedFd<'_>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>> std::os::fd::raw::AsRawFd for aya::maps::perf::PerfEventArrayBuffer<T>
pub fn aya::maps::perf::PerfEventArrayBuffer<T>::as_raw_fd(&self) -> std::os::fd::raw::RawFd
impl<T> !core::marker::Freeze for aya::maps::perf::PerfEventArrayBuffer<T>
impl<T> core::marker::Send for aya::maps::perf::PerfEventArrayBuffer<T> where T: core::marker::Sync + core::marker::Send
impl<T> core::marker::Sync for aya::maps::perf::PerfEventArrayBuffer<T> where T: core::marker::Sync + core::marker::Send
impl<T> core::marker::Unpin for aya::maps::perf::PerfEventArrayBuffer<T>
impl<T> core::panic::unwind_safe::RefUnwindSafe for aya::maps::perf::PerfEventArrayBuffer<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for aya::maps::perf::PerfEventArrayBuffer<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::perf::PerfEventArrayBuffer<T> where U: core::convert::From<T>
pub fn aya::maps::perf::PerfEventArrayBuffer<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::perf::PerfEventArrayBuffer<T> where U: core::convert::Into<T>
pub type aya::maps::perf::PerfEventArrayBuffer<T>::Error = core::convert::Infallible
pub fn aya::maps::perf::PerfEventArrayBuffer<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::perf::PerfEventArrayBuffer<T> where U: core::convert::TryFrom<T>
pub type aya::maps::perf::PerfEventArrayBuffer<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::perf::PerfEventArrayBuffer<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::perf::PerfEventArrayBuffer<T> where T: 'static + ?core::marker::Sized
pub fn aya::maps::perf::PerfEventArrayBuffer<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::perf::PerfEventArrayBuffer<T> where T: ?core::marker::Sized
pub fn aya::maps::perf::PerfEventArrayBuffer<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::perf::PerfEventArrayBuffer<T> where T: ?core::marker::Sized
pub fn aya::maps::perf::PerfEventArrayBuffer<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::perf::PerfEventArrayBuffer<T>
pub fn aya::maps::perf::PerfEventArrayBuffer<T>::from(t: T) -> T
pub mod aya::maps::queue
pub struct aya::maps::queue::Queue<T, V: aya::Pod>
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::queue::Queue<T, V>
pub fn aya::maps::queue::Queue<T, V>::capacity(&self) -> u32
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::queue::Queue<T, V>
pub fn aya::maps::queue::Queue<T, V>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>, V: aya::Pod> aya::maps::queue::Queue<T, V>
pub fn aya::maps::queue::Queue<T, V>::pop(&mut self, flags: u64) -> core::result::Result<V, aya::maps::MapError>
pub fn aya::maps::queue::Queue<T, V>::push(&mut self, value: impl core::borrow::Borrow<V>, flags: u64) -> core::result::Result<(), aya::maps::MapError>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::queue::Queue<&'a aya::maps::MapData, V>
pub type aya::maps::queue::Queue<&'a aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::queue::Queue<&'a aya::maps::MapData, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::queue::Queue<&'a mut aya::maps::MapData, V>
pub type aya::maps::queue::Queue<&'a mut aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::queue::Queue<&'a mut aya::maps::MapData, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::queue::Queue<aya::maps::MapData, V>
pub type aya::maps::queue::Queue<aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::queue::Queue<aya::maps::MapData, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T, V> core::marker::Freeze for aya::maps::queue::Queue<T, V> where T: core::marker::Freeze
impl<T, V> core::marker::Send for aya::maps::queue::Queue<T, V> where T: core::marker::Send, V: core::marker::Send
impl<T, V> core::marker::Sync for aya::maps::queue::Queue<T, V> where T: core::marker::Sync, V: core::marker::Sync
impl<T, V> core::marker::Unpin for aya::maps::queue::Queue<T, V> where T: core::marker::Unpin, V: core::marker::Unpin
impl<T, V> core::panic::unwind_safe::RefUnwindSafe for aya::maps::queue::Queue<T, V> where T: core::panic::unwind_safe::RefUnwindSafe, V: core::panic::unwind_safe::RefUnwindSafe
impl<T, V> core::panic::unwind_safe::UnwindSafe for aya::maps::queue::Queue<T, V> where T: core::panic::unwind_safe::UnwindSafe, V: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::queue::Queue<T, V> where U: core::convert::From<T>
pub fn aya::maps::queue::Queue<T, V>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::queue::Queue<T, V> where U: core::convert::Into<T>
pub type aya::maps::queue::Queue<T, V>::Error = core::convert::Infallible
pub fn aya::maps::queue::Queue<T, V>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::queue::Queue<T, V> where U: core::convert::TryFrom<T>
pub type aya::maps::queue::Queue<T, V>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::queue::Queue<T, V>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::queue::Queue<T, V> where T: 'static + ?core::marker::Sized
pub fn aya::maps::queue::Queue<T, V>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::queue::Queue<T, V> where T: ?core::marker::Sized
pub fn aya::maps::queue::Queue<T, V>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::queue::Queue<T, V> where T: ?core::marker::Sized
pub fn aya::maps::queue::Queue<T, V>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::queue::Queue<T, V>
pub fn aya::maps::queue::Queue<T, V>::from(t: T) -> T
pub mod aya::maps::ring_buf
pub struct aya::maps::ring_buf::RingBuf<T>
impl<T> aya::maps::ring_buf::RingBuf<T>
pub fn aya::maps::ring_buf::RingBuf<T>::next(&mut self) -> core::option::Option<aya::maps::ring_buf::RingBufItem<'_>>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::ring_buf::RingBuf<aya::maps::MapData>
pub type aya::maps::ring_buf::RingBuf<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::ring_buf::RingBuf<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::ring_buf::RingBuf<&'a aya::maps::MapData>
pub type aya::maps::ring_buf::RingBuf<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::ring_buf::RingBuf<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::ring_buf::RingBuf<&'a mut aya::maps::MapData>
pub type aya::maps::ring_buf::RingBuf<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::ring_buf::RingBuf<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T: core::borrow::Borrow<aya::maps::MapData>> std::os::fd::raw::AsRawFd for aya::maps::ring_buf::RingBuf<T>
pub fn aya::maps::ring_buf::RingBuf<T>::as_raw_fd(&self) -> std::os::fd::raw::RawFd
impl<T> core::marker::Freeze for aya::maps::ring_buf::RingBuf<T> where T: core::marker::Freeze
impl<T> core::marker::Send for aya::maps::ring_buf::RingBuf<T> where T: core::marker::Send
impl<T> core::marker::Sync for aya::maps::ring_buf::RingBuf<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for aya::maps::ring_buf::RingBuf<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for aya::maps::ring_buf::RingBuf<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for aya::maps::ring_buf::RingBuf<T> where T: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::ring_buf::RingBuf<T> where U: core::convert::From<T>
pub fn aya::maps::ring_buf::RingBuf<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::ring_buf::RingBuf<T> where U: core::convert::Into<T>
pub type aya::maps::ring_buf::RingBuf<T>::Error = core::convert::Infallible
pub fn aya::maps::ring_buf::RingBuf<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::ring_buf::RingBuf<T> where U: core::convert::TryFrom<T>
pub type aya::maps::ring_buf::RingBuf<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::ring_buf::RingBuf<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::ring_buf::RingBuf<T> where T: 'static + ?core::marker::Sized
pub fn aya::maps::ring_buf::RingBuf<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::ring_buf::RingBuf<T> where T: ?core::marker::Sized
pub fn aya::maps::ring_buf::RingBuf<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::ring_buf::RingBuf<T> where T: ?core::marker::Sized
pub fn aya::maps::ring_buf::RingBuf<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::ring_buf::RingBuf<T>
pub fn aya::maps::ring_buf::RingBuf<T>::from(t: T) -> T
pub struct aya::maps::ring_buf::RingBufItem<'a>
impl core::fmt::Debug for aya::maps::ring_buf::RingBufItem<'_>
pub fn aya::maps::ring_buf::RingBufItem<'_>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::deref::Deref for aya::maps::ring_buf::RingBufItem<'_>
pub type aya::maps::ring_buf::RingBufItem<'_>::Target = [u8]
pub fn aya::maps::ring_buf::RingBufItem<'_>::deref(&self) -> &Self::Target
impl core::ops::drop::Drop for aya::maps::ring_buf::RingBufItem<'_>
pub fn aya::maps::ring_buf::RingBufItem<'_>::drop(&mut self)
impl<'a> core::marker::Freeze for aya::maps::ring_buf::RingBufItem<'a>
impl<'a> core::marker::Send for aya::maps::ring_buf::RingBufItem<'a>
impl<'a> core::marker::Sync for aya::maps::ring_buf::RingBufItem<'a>
impl<'a> core::marker::Unpin for aya::maps::ring_buf::RingBufItem<'a>
impl<'a> core::panic::unwind_safe::RefUnwindSafe for aya::maps::ring_buf::RingBufItem<'a>
impl<'a> !core::panic::unwind_safe::UnwindSafe for aya::maps::ring_buf::RingBufItem<'a>
impl<P, T> core::ops::deref::Receiver for aya::maps::ring_buf::RingBufItem<'a> where P: core::ops::deref::Deref<Target = T> + ?core::marker::Sized, T: ?core::marker::Sized
pub type aya::maps::ring_buf::RingBufItem<'a>::Target = T
impl<T, U> core::convert::Into<U> for aya::maps::ring_buf::RingBufItem<'a> where U: core::convert::From<T>
pub fn aya::maps::ring_buf::RingBufItem<'a>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::ring_buf::RingBufItem<'a> where U: core::convert::Into<T>
pub type aya::maps::ring_buf::RingBufItem<'a>::Error = core::convert::Infallible
pub fn aya::maps::ring_buf::RingBufItem<'a>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::ring_buf::RingBufItem<'a> where U: core::convert::TryFrom<T>
pub type aya::maps::ring_buf::RingBufItem<'a>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::ring_buf::RingBufItem<'a>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::ring_buf::RingBufItem<'a> where T: 'static + ?core::marker::Sized
pub fn aya::maps::ring_buf::RingBufItem<'a>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::ring_buf::RingBufItem<'a> where T: ?core::marker::Sized
pub fn aya::maps::ring_buf::RingBufItem<'a>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::ring_buf::RingBufItem<'a> where T: ?core::marker::Sized
pub fn aya::maps::ring_buf::RingBufItem<'a>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::ring_buf::RingBufItem<'a>
pub fn aya::maps::ring_buf::RingBufItem<'a>::from(t: T) -> T
pub mod aya::maps::sock
pub struct aya::maps::sock::SockHash<T, K>
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod> aya::maps::SockHash<T, K>
pub fn aya::maps::SockHash<T, K>::fd(&self) -> &aya::maps::sock::SockMapFd
pub fn aya::maps::SockHash<T, K>::get(&self, key: &K, flags: u64) -> core::result::Result<std::os::fd::raw::RawFd, aya::maps::MapError>
pub fn aya::maps::SockHash<T, K>::iter(&self) -> aya::maps::MapIter<'_, K, std::os::fd::raw::RawFd, Self>
pub fn aya::maps::SockHash<T, K>::keys(&self) -> aya::maps::MapKeys<'_, K>
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::SockHash<T, V>
pub fn aya::maps::SockHash<T, V>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>, K: aya::Pod> aya::maps::SockHash<T, K>
pub fn aya::maps::SockHash<T, K>::insert<I: std::os::fd::raw::AsRawFd>(&mut self, key: impl core::borrow::Borrow<K>, value: I, flags: u64) -> core::result::Result<(), aya::maps::MapError>
pub fn aya::maps::SockHash<T, K>::remove(&mut self, key: &K) -> core::result::Result<(), aya::maps::MapError>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::SockHash<&'a aya::maps::MapData, V>
pub type aya::maps::SockHash<&'a aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::SockHash<&'a aya::maps::MapData, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::SockHash<&'a mut aya::maps::MapData, V>
pub type aya::maps::SockHash<&'a mut aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::SockHash<&'a mut aya::maps::MapData, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod> aya::maps::IterableMap<K, i32> for aya::maps::SockHash<T, K>
pub fn aya::maps::SockHash<T, K>::get(&self, key: &K) -> core::result::Result<std::os::fd::raw::RawFd, aya::maps::MapError>
pub fn aya::maps::SockHash<T, K>::map(&self) -> &aya::maps::MapData
impl<V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::SockHash<aya::maps::MapData, V>
pub type aya::maps::SockHash<aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::SockHash<aya::maps::MapData, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T, K> core::marker::Freeze for aya::maps::SockHash<T, K> where T: core::marker::Freeze
impl<T, K> core::marker::Send for aya::maps::SockHash<T, K> where T: core::marker::Send, K: core::marker::Send
impl<T, K> core::marker::Sync for aya::maps::SockHash<T, K> where T: core::marker::Sync, K: core::marker::Sync
impl<T, K> core::marker::Unpin for aya::maps::SockHash<T, K> where T: core::marker::Unpin, K: core::marker::Unpin
impl<T, K> core::panic::unwind_safe::RefUnwindSafe for aya::maps::SockHash<T, K> where T: core::panic::unwind_safe::RefUnwindSafe, K: core::panic::unwind_safe::RefUnwindSafe
impl<T, K> core::panic::unwind_safe::UnwindSafe for aya::maps::SockHash<T, K> where T: core::panic::unwind_safe::UnwindSafe, K: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::SockHash<T, K> where U: core::convert::From<T>
pub fn aya::maps::SockHash<T, K>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::SockHash<T, K> where U: core::convert::Into<T>
pub type aya::maps::SockHash<T, K>::Error = core::convert::Infallible
pub fn aya::maps::SockHash<T, K>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::SockHash<T, K> where U: core::convert::TryFrom<T>
pub type aya::maps::SockHash<T, K>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::SockHash<T, K>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::SockHash<T, K> where T: 'static + ?core::marker::Sized
pub fn aya::maps::SockHash<T, K>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::SockHash<T, K> where T: ?core::marker::Sized
pub fn aya::maps::SockHash<T, K>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::SockHash<T, K> where T: ?core::marker::Sized
pub fn aya::maps::SockHash<T, K>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::SockHash<T, K>
pub fn aya::maps::SockHash<T, K>::from(t: T) -> T
pub struct aya::maps::sock::SockMap<T>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::SockMap<T>
pub fn aya::maps::SockMap<T>::fd(&self) -> &aya::maps::sock::SockMapFd
pub fn aya::maps::SockMap<T>::indices(&self) -> aya::maps::MapKeys<'_, u32>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::SockMap<T>
pub fn aya::maps::SockMap<T>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>> aya::maps::SockMap<T>
pub fn aya::maps::SockMap<T>::clear_index(&mut self, index: &u32) -> core::result::Result<(), aya::maps::MapError>
pub fn aya::maps::SockMap<T>::set<I: std::os::fd::raw::AsRawFd>(&mut self, index: u32, socket: &I, flags: u64) -> core::result::Result<(), aya::maps::MapError>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::SockMap<aya::maps::MapData>
pub type aya::maps::SockMap<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::SockMap<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::SockMap<&'a aya::maps::MapData>
pub type aya::maps::SockMap<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::SockMap<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::SockMap<&'a mut aya::maps::MapData>
pub type aya::maps::SockMap<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::SockMap<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T> core::marker::Freeze for aya::maps::SockMap<T> where T: core::marker::Freeze
impl<T> core::marker::Send for aya::maps::SockMap<T> where T: core::marker::Send
impl<T> core::marker::Sync for aya::maps::SockMap<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for aya::maps::SockMap<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for aya::maps::SockMap<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for aya::maps::SockMap<T> where T: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::SockMap<T> where U: core::convert::From<T>
pub fn aya::maps::SockMap<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::SockMap<T> where U: core::convert::Into<T>
pub type aya::maps::SockMap<T>::Error = core::convert::Infallible
pub fn aya::maps::SockMap<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::SockMap<T> where U: core::convert::TryFrom<T>
pub type aya::maps::SockMap<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::SockMap<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::SockMap<T> where T: 'static + ?core::marker::Sized
pub fn aya::maps::SockMap<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::SockMap<T> where T: ?core::marker::Sized
pub fn aya::maps::SockMap<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::SockMap<T> where T: ?core::marker::Sized
pub fn aya::maps::SockMap<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::SockMap<T>
pub fn aya::maps::SockMap<T>::from(t: T) -> T
#[repr(transparent)] pub struct aya::maps::sock::SockMapFd(_)
impl aya::maps::sock::SockMapFd
pub fn aya::maps::sock::SockMapFd::try_clone(&self) -> std::io::error::Result<Self>
impl std::os::fd::owned::AsFd for aya::maps::sock::SockMapFd
pub fn aya::maps::sock::SockMapFd::as_fd(&self) -> std::os::fd::owned::BorrowedFd<'_>
impl core::marker::Freeze for aya::maps::sock::SockMapFd
impl core::marker::Send for aya::maps::sock::SockMapFd
impl core::marker::Sync for aya::maps::sock::SockMapFd
impl core::marker::Unpin for aya::maps::sock::SockMapFd
impl core::panic::unwind_safe::RefUnwindSafe for aya::maps::sock::SockMapFd
impl core::panic::unwind_safe::UnwindSafe for aya::maps::sock::SockMapFd
impl<T, U> core::convert::Into<U> for aya::maps::sock::SockMapFd where U: core::convert::From<T>
pub fn aya::maps::sock::SockMapFd::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::sock::SockMapFd where U: core::convert::Into<T>
pub type aya::maps::sock::SockMapFd::Error = core::convert::Infallible
pub fn aya::maps::sock::SockMapFd::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::sock::SockMapFd where U: core::convert::TryFrom<T>
pub type aya::maps::sock::SockMapFd::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::sock::SockMapFd::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::sock::SockMapFd where T: 'static + ?core::marker::Sized
pub fn aya::maps::sock::SockMapFd::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::sock::SockMapFd where T: ?core::marker::Sized
pub fn aya::maps::sock::SockMapFd::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::sock::SockMapFd where T: ?core::marker::Sized
pub fn aya::maps::sock::SockMapFd::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::sock::SockMapFd
pub fn aya::maps::sock::SockMapFd::from(t: T) -> T
pub mod aya::maps::stack
pub struct aya::maps::stack::Stack<T, V: aya::Pod>
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::stack::Stack<T, V>
pub fn aya::maps::stack::Stack<T, V>::capacity(&self) -> u32
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::stack::Stack<T, V>
pub fn aya::maps::stack::Stack<T, V>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>, V: aya::Pod> aya::maps::stack::Stack<T, V>
pub fn aya::maps::stack::Stack<T, V>::pop(&mut self, flags: u64) -> core::result::Result<V, aya::maps::MapError>
pub fn aya::maps::stack::Stack<T, V>::push(&mut self, value: impl core::borrow::Borrow<V>, flags: u64) -> core::result::Result<(), aya::maps::MapError>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::stack::Stack<&'a aya::maps::MapData, V>
pub type aya::maps::stack::Stack<&'a aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::stack::Stack<&'a aya::maps::MapData, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::stack::Stack<&'a mut aya::maps::MapData, V>
pub type aya::maps::stack::Stack<&'a mut aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::stack::Stack<&'a mut aya::maps::MapData, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::stack::Stack<aya::maps::MapData, V>
pub type aya::maps::stack::Stack<aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::stack::Stack<aya::maps::MapData, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T, V> core::marker::Freeze for aya::maps::stack::Stack<T, V> where T: core::marker::Freeze
impl<T, V> core::marker::Send for aya::maps::stack::Stack<T, V> where T: core::marker::Send, V: core::marker::Send
impl<T, V> core::marker::Sync for aya::maps::stack::Stack<T, V> where T: core::marker::Sync, V: core::marker::Sync
impl<T, V> core::marker::Unpin for aya::maps::stack::Stack<T, V> where T: core::marker::Unpin, V: core::marker::Unpin
impl<T, V> core::panic::unwind_safe::RefUnwindSafe for aya::maps::stack::Stack<T, V> where T: core::panic::unwind_safe::RefUnwindSafe, V: core::panic::unwind_safe::RefUnwindSafe
impl<T, V> core::panic::unwind_safe::UnwindSafe for aya::maps::stack::Stack<T, V> where T: core::panic::unwind_safe::UnwindSafe, V: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::stack::Stack<T, V> where U: core::convert::From<T>
pub fn aya::maps::stack::Stack<T, V>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::stack::Stack<T, V> where U: core::convert::Into<T>
pub type aya::maps::stack::Stack<T, V>::Error = core::convert::Infallible
pub fn aya::maps::stack::Stack<T, V>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::stack::Stack<T, V> where U: core::convert::TryFrom<T>
pub type aya::maps::stack::Stack<T, V>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::stack::Stack<T, V>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::stack::Stack<T, V> where T: 'static + ?core::marker::Sized
pub fn aya::maps::stack::Stack<T, V>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::stack::Stack<T, V> where T: ?core::marker::Sized
pub fn aya::maps::stack::Stack<T, V>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::stack::Stack<T, V> where T: ?core::marker::Sized
pub fn aya::maps::stack::Stack<T, V>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::stack::Stack<T, V>
pub fn aya::maps::stack::Stack<T, V>::from(t: T) -> T
pub mod aya::maps::stack_trace
pub struct aya::maps::stack_trace::StackFrame
pub aya::maps::stack_trace::StackFrame::ip: u64
impl core::marker::Freeze for aya::maps::stack_trace::StackFrame
impl core::marker::Send for aya::maps::stack_trace::StackFrame
impl core::marker::Sync for aya::maps::stack_trace::StackFrame
impl core::marker::Unpin for aya::maps::stack_trace::StackFrame
impl core::panic::unwind_safe::RefUnwindSafe for aya::maps::stack_trace::StackFrame
impl core::panic::unwind_safe::UnwindSafe for aya::maps::stack_trace::StackFrame
impl<T, U> core::convert::Into<U> for aya::maps::stack_trace::StackFrame where U: core::convert::From<T>
pub fn aya::maps::stack_trace::StackFrame::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::stack_trace::StackFrame where U: core::convert::Into<T>
pub type aya::maps::stack_trace::StackFrame::Error = core::convert::Infallible
pub fn aya::maps::stack_trace::StackFrame::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::stack_trace::StackFrame where U: core::convert::TryFrom<T>
pub type aya::maps::stack_trace::StackFrame::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::stack_trace::StackFrame::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::stack_trace::StackFrame where T: 'static + ?core::marker::Sized
pub fn aya::maps::stack_trace::StackFrame::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::stack_trace::StackFrame where T: ?core::marker::Sized
pub fn aya::maps::stack_trace::StackFrame::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::stack_trace::StackFrame where T: ?core::marker::Sized
pub fn aya::maps::stack_trace::StackFrame::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::stack_trace::StackFrame
pub fn aya::maps::stack_trace::StackFrame::from(t: T) -> T
pub struct aya::maps::stack_trace::StackTrace
pub aya::maps::stack_trace::StackTrace::id: u32
impl aya::maps::stack_trace::StackTrace
pub fn aya::maps::stack_trace::StackTrace::frames(&self) -> &[aya::maps::stack_trace::StackFrame]
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::IterableMap<u32, aya::maps::stack_trace::StackTrace> for aya::maps::stack_trace::StackTraceMap<T>
pub fn aya::maps::stack_trace::StackTraceMap<T>::get(&self, index: &u32) -> core::result::Result<aya::maps::stack_trace::StackTrace, aya::maps::MapError>
pub fn aya::maps::stack_trace::StackTraceMap<T>::map(&self) -> &aya::maps::MapData
impl core::marker::Freeze for aya::maps::stack_trace::StackTrace
impl core::marker::Send for aya::maps::stack_trace::StackTrace
impl core::marker::Sync for aya::maps::stack_trace::StackTrace
impl core::marker::Unpin for aya::maps::stack_trace::StackTrace
impl core::panic::unwind_safe::RefUnwindSafe for aya::maps::stack_trace::StackTrace
impl core::panic::unwind_safe::UnwindSafe for aya::maps::stack_trace::StackTrace
impl<T, U> core::convert::Into<U> for aya::maps::stack_trace::StackTrace where U: core::convert::From<T>
pub fn aya::maps::stack_trace::StackTrace::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::stack_trace::StackTrace where U: core::convert::Into<T>
pub type aya::maps::stack_trace::StackTrace::Error = core::convert::Infallible
pub fn aya::maps::stack_trace::StackTrace::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::stack_trace::StackTrace where U: core::convert::TryFrom<T>
pub type aya::maps::stack_trace::StackTrace::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::stack_trace::StackTrace::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::stack_trace::StackTrace where T: 'static + ?core::marker::Sized
pub fn aya::maps::stack_trace::StackTrace::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::stack_trace::StackTrace where T: ?core::marker::Sized
pub fn aya::maps::stack_trace::StackTrace::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::stack_trace::StackTrace where T: ?core::marker::Sized
pub fn aya::maps::stack_trace::StackTrace::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::stack_trace::StackTrace
pub fn aya::maps::stack_trace::StackTrace::from(t: T) -> T
pub struct aya::maps::stack_trace::StackTraceMap<T>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::stack_trace::StackTraceMap<T>
pub fn aya::maps::stack_trace::StackTraceMap<T>::get(&self, stack_id: &u32, flags: u64) -> core::result::Result<aya::maps::stack_trace::StackTrace, aya::maps::MapError>
pub fn aya::maps::stack_trace::StackTraceMap<T>::iter(&self) -> aya::maps::MapIter<'_, u32, aya::maps::stack_trace::StackTrace, Self>
pub fn aya::maps::stack_trace::StackTraceMap<T>::stack_ids(&self) -> aya::maps::MapKeys<'_, u32>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::stack_trace::StackTraceMap<T>
pub fn aya::maps::stack_trace::StackTraceMap<T>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>> aya::maps::stack_trace::StackTraceMap<T>
pub fn aya::maps::stack_trace::StackTraceMap<T>::remove(&mut self, stack_id: &u32) -> core::result::Result<(), aya::maps::MapError>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::stack_trace::StackTraceMap<aya::maps::MapData>
pub type aya::maps::stack_trace::StackTraceMap<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::stack_trace::StackTraceMap<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, T: core::borrow::Borrow<aya::maps::MapData>> core::iter::traits::collect::IntoIterator for &'a aya::maps::stack_trace::StackTraceMap<T>
pub type &'a aya::maps::stack_trace::StackTraceMap<T>::IntoIter = aya::maps::MapIter<'a, u32, aya::maps::stack_trace::StackTrace, aya::maps::stack_trace::StackTraceMap<T>>
pub type &'a aya::maps::stack_trace::StackTraceMap<T>::Item = core::result::Result<(u32, aya::maps::stack_trace::StackTrace), aya::maps::MapError>
pub fn &'a aya::maps::stack_trace::StackTraceMap<T>::into_iter(self) -> Self::IntoIter
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::stack_trace::StackTraceMap<&'a aya::maps::MapData>
pub type aya::maps::stack_trace::StackTraceMap<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::stack_trace::StackTraceMap<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::stack_trace::StackTraceMap<&'a mut aya::maps::MapData>
pub type aya::maps::stack_trace::StackTraceMap<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::stack_trace::StackTraceMap<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::IterableMap<u32, aya::maps::stack_trace::StackTrace> for aya::maps::stack_trace::StackTraceMap<T>
pub fn aya::maps::stack_trace::StackTraceMap<T>::get(&self, index: &u32) -> core::result::Result<aya::maps::stack_trace::StackTrace, aya::maps::MapError>
pub fn aya::maps::stack_trace::StackTraceMap<T>::map(&self) -> &aya::maps::MapData
impl<T: core::fmt::Debug> core::fmt::Debug for aya::maps::stack_trace::StackTraceMap<T>
pub fn aya::maps::stack_trace::StackTraceMap<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T> core::marker::Freeze for aya::maps::stack_trace::StackTraceMap<T> where T: core::marker::Freeze
impl<T> core::marker::Send for aya::maps::stack_trace::StackTraceMap<T> where T: core::marker::Send
impl<T> core::marker::Sync for aya::maps::stack_trace::StackTraceMap<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for aya::maps::stack_trace::StackTraceMap<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for aya::maps::stack_trace::StackTraceMap<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for aya::maps::stack_trace::StackTraceMap<T> where T: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::stack_trace::StackTraceMap<T> where U: core::convert::From<T>
pub fn aya::maps::stack_trace::StackTraceMap<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::stack_trace::StackTraceMap<T> where U: core::convert::Into<T>
pub type aya::maps::stack_trace::StackTraceMap<T>::Error = core::convert::Infallible
pub fn aya::maps::stack_trace::StackTraceMap<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::stack_trace::StackTraceMap<T> where U: core::convert::TryFrom<T>
pub type aya::maps::stack_trace::StackTraceMap<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::stack_trace::StackTraceMap<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::stack_trace::StackTraceMap<T> where T: 'static + ?core::marker::Sized
pub fn aya::maps::stack_trace::StackTraceMap<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::stack_trace::StackTraceMap<T> where T: ?core::marker::Sized
pub fn aya::maps::stack_trace::StackTraceMap<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::stack_trace::StackTraceMap<T> where T: ?core::marker::Sized
pub fn aya::maps::stack_trace::StackTraceMap<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::stack_trace::StackTraceMap<T>
pub fn aya::maps::stack_trace::StackTraceMap<T>::from(t: T) -> T
pub mod aya::maps::xdp
pub enum aya::maps::xdp::XdpMapError
pub aya::maps::xdp::XdpMapError::ChainedProgramNotSupported
pub aya::maps::xdp::XdpMapError::MapError(aya::maps::MapError)
impl core::convert::From<aya::maps::MapError> for aya::maps::xdp::XdpMapError
pub fn aya::maps::xdp::XdpMapError::from(source: aya::maps::MapError) -> Self
impl core::error::Error for aya::maps::xdp::XdpMapError
pub fn aya::maps::xdp::XdpMapError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Debug for aya::maps::xdp::XdpMapError
pub fn aya::maps::xdp::XdpMapError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for aya::maps::xdp::XdpMapError
pub fn aya::maps::xdp::XdpMapError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::maps::xdp::XdpMapError
impl core::marker::Send for aya::maps::xdp::XdpMapError
impl core::marker::Sync for aya::maps::xdp::XdpMapError
impl core::marker::Unpin for aya::maps::xdp::XdpMapError
impl !core::panic::unwind_safe::RefUnwindSafe for aya::maps::xdp::XdpMapError
impl !core::panic::unwind_safe::UnwindSafe for aya::maps::xdp::XdpMapError
impl<T, U> core::convert::Into<U> for aya::maps::xdp::XdpMapError where U: core::convert::From<T>
pub fn aya::maps::xdp::XdpMapError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::xdp::XdpMapError where U: core::convert::Into<T>
pub type aya::maps::xdp::XdpMapError::Error = core::convert::Infallible
pub fn aya::maps::xdp::XdpMapError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::xdp::XdpMapError where U: core::convert::TryFrom<T>
pub type aya::maps::xdp::XdpMapError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::xdp::XdpMapError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for aya::maps::xdp::XdpMapError where T: core::fmt::Display + ?core::marker::Sized
pub fn aya::maps::xdp::XdpMapError::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for aya::maps::xdp::XdpMapError where T: 'static + ?core::marker::Sized
pub fn aya::maps::xdp::XdpMapError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::xdp::XdpMapError where T: ?core::marker::Sized
pub fn aya::maps::xdp::XdpMapError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::xdp::XdpMapError where T: ?core::marker::Sized
pub fn aya::maps::xdp::XdpMapError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::xdp::XdpMapError
pub fn aya::maps::xdp::XdpMapError::from(t: T) -> T
pub struct aya::maps::xdp::CpuMap<T>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::CpuMap<T>
pub fn aya::maps::CpuMap<T>::get(&self, cpu_index: u32, flags: u64) -> core::result::Result<CpuMapValue, aya::maps::MapError>
pub fn aya::maps::CpuMap<T>::iter(&self) -> impl core::iter::traits::iterator::Iterator<Item = core::result::Result<CpuMapValue, aya::maps::MapError>> + '_
pub fn aya::maps::CpuMap<T>::len(&self) -> u32
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::CpuMap<T>
pub fn aya::maps::CpuMap<T>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>> aya::maps::CpuMap<T>
pub fn aya::maps::CpuMap<T>::set(&mut self, cpu_index: u32, queue_size: u32, program: core::option::Option<&aya::programs::ProgramFd>, flags: u64) -> core::result::Result<(), aya::maps::xdp::XdpMapError>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::CpuMap<aya::maps::MapData>
pub type aya::maps::CpuMap<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::CpuMap<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::CpuMap<&'a aya::maps::MapData>
pub type aya::maps::CpuMap<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::CpuMap<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::CpuMap<&'a mut aya::maps::MapData>
pub type aya::maps::CpuMap<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::CpuMap<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T> core::marker::Freeze for aya::maps::CpuMap<T> where T: core::marker::Freeze
impl<T> core::marker::Send for aya::maps::CpuMap<T> where T: core::marker::Send
impl<T> core::marker::Sync for aya::maps::CpuMap<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for aya::maps::CpuMap<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for aya::maps::CpuMap<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for aya::maps::CpuMap<T> where T: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::CpuMap<T> where U: core::convert::From<T>
pub fn aya::maps::CpuMap<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::CpuMap<T> where U: core::convert::Into<T>
pub type aya::maps::CpuMap<T>::Error = core::convert::Infallible
pub fn aya::maps::CpuMap<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::CpuMap<T> where U: core::convert::TryFrom<T>
pub type aya::maps::CpuMap<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::CpuMap<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::CpuMap<T> where T: 'static + ?core::marker::Sized
pub fn aya::maps::CpuMap<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::CpuMap<T> where T: ?core::marker::Sized
pub fn aya::maps::CpuMap<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::CpuMap<T> where T: ?core::marker::Sized
pub fn aya::maps::CpuMap<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::CpuMap<T>
pub fn aya::maps::CpuMap<T>::from(t: T) -> T
pub struct aya::maps::xdp::DevMap<T>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::DevMap<T>
pub fn aya::maps::DevMap<T>::get(&self, index: u32, flags: u64) -> core::result::Result<DevMapValue, aya::maps::MapError>
pub fn aya::maps::DevMap<T>::iter(&self) -> impl core::iter::traits::iterator::Iterator<Item = core::result::Result<DevMapValue, aya::maps::MapError>> + '_
pub fn aya::maps::DevMap<T>::len(&self) -> u32
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::DevMap<T>
pub fn aya::maps::DevMap<T>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>> aya::maps::DevMap<T>
pub fn aya::maps::DevMap<T>::set(&mut self, index: u32, target_if_index: u32, program: core::option::Option<&aya::programs::ProgramFd>, flags: u64) -> core::result::Result<(), aya::maps::xdp::XdpMapError>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::DevMap<aya::maps::MapData>
pub type aya::maps::DevMap<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::DevMap<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::DevMap<&'a aya::maps::MapData>
pub type aya::maps::DevMap<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::DevMap<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::DevMap<&'a mut aya::maps::MapData>
pub type aya::maps::DevMap<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::DevMap<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T> core::marker::Freeze for aya::maps::DevMap<T> where T: core::marker::Freeze
impl<T> core::marker::Send for aya::maps::DevMap<T> where T: core::marker::Send
impl<T> core::marker::Sync for aya::maps::DevMap<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for aya::maps::DevMap<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for aya::maps::DevMap<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for aya::maps::DevMap<T> where T: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::DevMap<T> where U: core::convert::From<T>
pub fn aya::maps::DevMap<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::DevMap<T> where U: core::convert::Into<T>
pub type aya::maps::DevMap<T>::Error = core::convert::Infallible
pub fn aya::maps::DevMap<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::DevMap<T> where U: core::convert::TryFrom<T>
pub type aya::maps::DevMap<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::DevMap<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::DevMap<T> where T: 'static + ?core::marker::Sized
pub fn aya::maps::DevMap<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::DevMap<T> where T: ?core::marker::Sized
pub fn aya::maps::DevMap<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::DevMap<T> where T: ?core::marker::Sized
pub fn aya::maps::DevMap<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::DevMap<T>
pub fn aya::maps::DevMap<T>::from(t: T) -> T
pub struct aya::maps::xdp::DevMapHash<T>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::DevMapHash<T>
pub fn aya::maps::DevMapHash<T>::get(&self, key: u32, flags: u64) -> core::result::Result<DevMapValue, aya::maps::MapError>
pub fn aya::maps::DevMapHash<T>::iter(&self) -> aya::maps::MapIter<'_, u32, DevMapValue, Self>
pub fn aya::maps::DevMapHash<T>::keys(&self) -> aya::maps::MapKeys<'_, u32>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::DevMapHash<T>
pub fn aya::maps::DevMapHash<T>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>> aya::maps::DevMapHash<T>
pub fn aya::maps::DevMapHash<T>::insert(&mut self, key: u32, target_if_index: u32, program: core::option::Option<&aya::programs::ProgramFd>, flags: u64) -> core::result::Result<(), aya::maps::xdp::XdpMapError>
pub fn aya::maps::DevMapHash<T>::remove(&mut self, key: u32) -> core::result::Result<(), aya::maps::MapError>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::DevMapHash<aya::maps::MapData>
pub type aya::maps::DevMapHash<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::DevMapHash<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::DevMapHash<&'a aya::maps::MapData>
pub type aya::maps::DevMapHash<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::DevMapHash<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::DevMapHash<&'a mut aya::maps::MapData>
pub type aya::maps::DevMapHash<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::DevMapHash<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T> core::marker::Freeze for aya::maps::DevMapHash<T> where T: core::marker::Freeze
impl<T> core::marker::Send for aya::maps::DevMapHash<T> where T: core::marker::Send
impl<T> core::marker::Sync for aya::maps::DevMapHash<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for aya::maps::DevMapHash<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for aya::maps::DevMapHash<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for aya::maps::DevMapHash<T> where T: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::DevMapHash<T> where U: core::convert::From<T>
pub fn aya::maps::DevMapHash<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::DevMapHash<T> where U: core::convert::Into<T>
pub type aya::maps::DevMapHash<T>::Error = core::convert::Infallible
pub fn aya::maps::DevMapHash<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::DevMapHash<T> where U: core::convert::TryFrom<T>
pub type aya::maps::DevMapHash<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::DevMapHash<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::DevMapHash<T> where T: 'static + ?core::marker::Sized
pub fn aya::maps::DevMapHash<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::DevMapHash<T> where T: ?core::marker::Sized
pub fn aya::maps::DevMapHash<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::DevMapHash<T> where T: ?core::marker::Sized
pub fn aya::maps::DevMapHash<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::DevMapHash<T>
pub fn aya::maps::DevMapHash<T>::from(t: T) -> T
pub struct aya::maps::xdp::XskMap<T>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::XskMap<T>
pub fn aya::maps::XskMap<T>::len(&self) -> u32
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::XskMap<T>
pub fn aya::maps::XskMap<T>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>> aya::maps::XskMap<T>
pub fn aya::maps::XskMap<T>::set(&mut self, index: u32, socket_fd: impl std::os::fd::raw::AsRawFd, flags: u64) -> core::result::Result<(), aya::maps::MapError>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::XskMap<aya::maps::MapData>
pub type aya::maps::XskMap<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::XskMap<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::XskMap<&'a aya::maps::MapData>
pub type aya::maps::XskMap<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::XskMap<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::XskMap<&'a mut aya::maps::MapData>
pub type aya::maps::XskMap<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::XskMap<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T> core::marker::Freeze for aya::maps::XskMap<T> where T: core::marker::Freeze
impl<T> core::marker::Send for aya::maps::XskMap<T> where T: core::marker::Send
impl<T> core::marker::Sync for aya::maps::XskMap<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for aya::maps::XskMap<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for aya::maps::XskMap<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for aya::maps::XskMap<T> where T: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::XskMap<T> where U: core::convert::From<T>
pub fn aya::maps::XskMap<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::XskMap<T> where U: core::convert::Into<T>
pub type aya::maps::XskMap<T>::Error = core::convert::Infallible
pub fn aya::maps::XskMap<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::XskMap<T> where U: core::convert::TryFrom<T>
pub type aya::maps::XskMap<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::XskMap<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::XskMap<T> where T: 'static + ?core::marker::Sized
pub fn aya::maps::XskMap<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::XskMap<T> where T: ?core::marker::Sized
pub fn aya::maps::XskMap<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::XskMap<T> where T: ?core::marker::Sized
pub fn aya::maps::XskMap<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::XskMap<T>
pub fn aya::maps::XskMap<T>::from(t: T) -> T
pub enum aya::maps::Map
pub aya::maps::Map::Array(aya::maps::MapData)
pub aya::maps::Map::BloomFilter(aya::maps::MapData)
pub aya::maps::Map::CpuMap(aya::maps::MapData)
pub aya::maps::Map::DevMap(aya::maps::MapData)
pub aya::maps::Map::DevMapHash(aya::maps::MapData)
pub aya::maps::Map::HashMap(aya::maps::MapData)
pub aya::maps::Map::LpmTrie(aya::maps::MapData)
pub aya::maps::Map::LruHashMap(aya::maps::MapData)
pub aya::maps::Map::PerCpuArray(aya::maps::MapData)
pub aya::maps::Map::PerCpuHashMap(aya::maps::MapData)
pub aya::maps::Map::PerCpuLruHashMap(aya::maps::MapData)
pub aya::maps::Map::PerfEventArray(aya::maps::MapData)
pub aya::maps::Map::ProgramArray(aya::maps::MapData)
pub aya::maps::Map::Queue(aya::maps::MapData)
pub aya::maps::Map::RingBuf(aya::maps::MapData)
pub aya::maps::Map::SockHash(aya::maps::MapData)
pub aya::maps::Map::SockMap(aya::maps::MapData)
pub aya::maps::Map::Stack(aya::maps::MapData)
pub aya::maps::Map::StackTraceMap(aya::maps::MapData)
pub aya::maps::Map::Unsupported(aya::maps::MapData)
pub aya::maps::Map::XskMap(aya::maps::MapData)
impl aya::maps::Map
pub fn aya::maps::Map::pin<P: core::convert::AsRef<std::path::Path>>(&self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::CpuMap<aya::maps::MapData>
pub type aya::maps::CpuMap<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::CpuMap<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::DevMap<aya::maps::MapData>
pub type aya::maps::DevMap<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::DevMap<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::DevMapHash<aya::maps::MapData>
pub type aya::maps::DevMapHash<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::DevMapHash<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::ProgramArray<aya::maps::MapData>
pub type aya::maps::ProgramArray<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::ProgramArray<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::SockMap<aya::maps::MapData>
pub type aya::maps::SockMap<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::SockMap<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::XskMap<aya::maps::MapData>
pub type aya::maps::XskMap<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::XskMap<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::perf::AsyncPerfEventArray<aya::maps::MapData>
pub type aya::maps::perf::AsyncPerfEventArray<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::perf::AsyncPerfEventArray<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::perf::PerfEventArray<aya::maps::MapData>
pub type aya::maps::perf::PerfEventArray<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::perf::PerfEventArray<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::ring_buf::RingBuf<aya::maps::MapData>
pub type aya::maps::ring_buf::RingBuf<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::ring_buf::RingBuf<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::stack_trace::StackTraceMap<aya::maps::MapData>
pub type aya::maps::stack_trace::StackTraceMap<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::stack_trace::StackTraceMap<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl core::fmt::Debug for aya::maps::Map
pub fn aya::maps::Map::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<'a, K: aya::Pod, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::hash_map::HashMap<&'a aya::maps::MapData, K, V>
pub type aya::maps::hash_map::HashMap<&'a aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::hash_map::HashMap<&'a aya::maps::MapData, K, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, K: aya::Pod, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::hash_map::PerCpuHashMap<&'a aya::maps::MapData, K, V>
pub type aya::maps::hash_map::PerCpuHashMap<&'a aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::hash_map::PerCpuHashMap<&'a aya::maps::MapData, K, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, K: aya::Pod, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::lpm_trie::LpmTrie<&'a aya::maps::MapData, K, V>
pub type aya::maps::lpm_trie::LpmTrie<&'a aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::lpm_trie::LpmTrie<&'a aya::maps::MapData, K, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, K: aya::Pod, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::hash_map::HashMap<&'a mut aya::maps::MapData, K, V>
pub type aya::maps::hash_map::HashMap<&'a mut aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::hash_map::HashMap<&'a mut aya::maps::MapData, K, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, K: aya::Pod, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::hash_map::PerCpuHashMap<&'a mut aya::maps::MapData, K, V>
pub type aya::maps::hash_map::PerCpuHashMap<&'a mut aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::hash_map::PerCpuHashMap<&'a mut aya::maps::MapData, K, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, K: aya::Pod, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::lpm_trie::LpmTrie<&'a mut aya::maps::MapData, K, V>
pub type aya::maps::lpm_trie::LpmTrie<&'a mut aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::lpm_trie::LpmTrie<&'a mut aya::maps::MapData, K, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::PerCpuArray<&'a aya::maps::MapData, V>
pub type aya::maps::PerCpuArray<&'a aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::PerCpuArray<&'a aya::maps::MapData, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::SockHash<&'a aya::maps::MapData, V>
pub type aya::maps::SockHash<&'a aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::SockHash<&'a aya::maps::MapData, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::array::Array<&'a aya::maps::MapData, V>
pub type aya::maps::array::Array<&'a aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::array::Array<&'a aya::maps::MapData, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::bloom_filter::BloomFilter<&'a aya::maps::MapData, V>
pub type aya::maps::bloom_filter::BloomFilter<&'a aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::bloom_filter::BloomFilter<&'a aya::maps::MapData, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::queue::Queue<&'a aya::maps::MapData, V>
pub type aya::maps::queue::Queue<&'a aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::queue::Queue<&'a aya::maps::MapData, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::stack::Stack<&'a aya::maps::MapData, V>
pub type aya::maps::stack::Stack<&'a aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::stack::Stack<&'a aya::maps::MapData, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::PerCpuArray<&'a mut aya::maps::MapData, V>
pub type aya::maps::PerCpuArray<&'a mut aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::PerCpuArray<&'a mut aya::maps::MapData, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::SockHash<&'a mut aya::maps::MapData, V>
pub type aya::maps::SockHash<&'a mut aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::SockHash<&'a mut aya::maps::MapData, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::array::Array<&'a mut aya::maps::MapData, V>
pub type aya::maps::array::Array<&'a mut aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::array::Array<&'a mut aya::maps::MapData, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::bloom_filter::BloomFilter<&'a mut aya::maps::MapData, V>
pub type aya::maps::bloom_filter::BloomFilter<&'a mut aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::bloom_filter::BloomFilter<&'a mut aya::maps::MapData, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::queue::Queue<&'a mut aya::maps::MapData, V>
pub type aya::maps::queue::Queue<&'a mut aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::queue::Queue<&'a mut aya::maps::MapData, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::stack::Stack<&'a mut aya::maps::MapData, V>
pub type aya::maps::stack::Stack<&'a mut aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::stack::Stack<&'a mut aya::maps::MapData, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::CpuMap<&'a aya::maps::MapData>
pub type aya::maps::CpuMap<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::CpuMap<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::DevMap<&'a aya::maps::MapData>
pub type aya::maps::DevMap<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::DevMap<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::DevMapHash<&'a aya::maps::MapData>
pub type aya::maps::DevMapHash<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::DevMapHash<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::ProgramArray<&'a aya::maps::MapData>
pub type aya::maps::ProgramArray<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::ProgramArray<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::SockMap<&'a aya::maps::MapData>
pub type aya::maps::SockMap<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::SockMap<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::XskMap<&'a aya::maps::MapData>
pub type aya::maps::XskMap<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::XskMap<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::perf::AsyncPerfEventArray<&'a aya::maps::MapData>
pub type aya::maps::perf::AsyncPerfEventArray<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::perf::AsyncPerfEventArray<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::perf::PerfEventArray<&'a aya::maps::MapData>
pub type aya::maps::perf::PerfEventArray<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::perf::PerfEventArray<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::ring_buf::RingBuf<&'a aya::maps::MapData>
pub type aya::maps::ring_buf::RingBuf<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::ring_buf::RingBuf<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::stack_trace::StackTraceMap<&'a aya::maps::MapData>
pub type aya::maps::stack_trace::StackTraceMap<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::stack_trace::StackTraceMap<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::CpuMap<&'a mut aya::maps::MapData>
pub type aya::maps::CpuMap<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::CpuMap<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::DevMap<&'a mut aya::maps::MapData>
pub type aya::maps::DevMap<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::DevMap<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::DevMapHash<&'a mut aya::maps::MapData>
pub type aya::maps::DevMapHash<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::DevMapHash<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::ProgramArray<&'a mut aya::maps::MapData>
pub type aya::maps::ProgramArray<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::ProgramArray<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::SockMap<&'a mut aya::maps::MapData>
pub type aya::maps::SockMap<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::SockMap<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::XskMap<&'a mut aya::maps::MapData>
pub type aya::maps::XskMap<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::XskMap<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::perf::AsyncPerfEventArray<&'a mut aya::maps::MapData>
pub type aya::maps::perf::AsyncPerfEventArray<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::perf::AsyncPerfEventArray<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::perf::PerfEventArray<&'a mut aya::maps::MapData>
pub type aya::maps::perf::PerfEventArray<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::perf::PerfEventArray<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::ring_buf::RingBuf<&'a mut aya::maps::MapData>
pub type aya::maps::ring_buf::RingBuf<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::ring_buf::RingBuf<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::stack_trace::StackTraceMap<&'a mut aya::maps::MapData>
pub type aya::maps::stack_trace::StackTraceMap<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::stack_trace::StackTraceMap<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<K: aya::Pod, V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::hash_map::HashMap<aya::maps::MapData, K, V>
pub type aya::maps::hash_map::HashMap<aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::hash_map::HashMap<aya::maps::MapData, K, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<K: aya::Pod, V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::hash_map::PerCpuHashMap<aya::maps::MapData, K, V>
pub type aya::maps::hash_map::PerCpuHashMap<aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::hash_map::PerCpuHashMap<aya::maps::MapData, K, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<K: aya::Pod, V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::lpm_trie::LpmTrie<aya::maps::MapData, K, V>
pub type aya::maps::lpm_trie::LpmTrie<aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::lpm_trie::LpmTrie<aya::maps::MapData, K, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::PerCpuArray<aya::maps::MapData, V>
pub type aya::maps::PerCpuArray<aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::PerCpuArray<aya::maps::MapData, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::SockHash<aya::maps::MapData, V>
pub type aya::maps::SockHash<aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::SockHash<aya::maps::MapData, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::array::Array<aya::maps::MapData, V>
pub type aya::maps::array::Array<aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::array::Array<aya::maps::MapData, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::bloom_filter::BloomFilter<aya::maps::MapData, V>
pub type aya::maps::bloom_filter::BloomFilter<aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::bloom_filter::BloomFilter<aya::maps::MapData, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::queue::Queue<aya::maps::MapData, V>
pub type aya::maps::queue::Queue<aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::queue::Queue<aya::maps::MapData, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::stack::Stack<aya::maps::MapData, V>
pub type aya::maps::stack::Stack<aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::stack::Stack<aya::maps::MapData, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl core::marker::Freeze for aya::maps::Map
impl core::marker::Send for aya::maps::Map
impl core::marker::Sync for aya::maps::Map
impl core::marker::Unpin for aya::maps::Map
impl core::panic::unwind_safe::RefUnwindSafe for aya::maps::Map
impl core::panic::unwind_safe::UnwindSafe for aya::maps::Map
impl<T, U> core::convert::Into<U> for aya::maps::Map where U: core::convert::From<T>
pub fn aya::maps::Map::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::Map where U: core::convert::Into<T>
pub type aya::maps::Map::Error = core::convert::Infallible
pub fn aya::maps::Map::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::Map where U: core::convert::TryFrom<T>
pub type aya::maps::Map::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::Map::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::Map where T: 'static + ?core::marker::Sized
pub fn aya::maps::Map::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::Map where T: ?core::marker::Sized
pub fn aya::maps::Map::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::Map where T: ?core::marker::Sized
pub fn aya::maps::Map::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::Map
pub fn aya::maps::Map::from(t: T) -> T
pub enum aya::maps::MapError
pub aya::maps::MapError::CreateError
pub aya::maps::MapError::CreateError::code: i64
pub aya::maps::MapError::CreateError::io_error: std::io::error::Error
pub aya::maps::MapError::CreateError::name: alloc::string::String
pub aya::maps::MapError::ElementNotFound
pub aya::maps::MapError::InvalidKeySize
pub aya::maps::MapError::InvalidKeySize::expected: usize
pub aya::maps::MapError::InvalidKeySize::size: usize
pub aya::maps::MapError::InvalidMapType
pub aya::maps::MapError::InvalidMapType::map_type: u32
pub aya::maps::MapError::InvalidName
pub aya::maps::MapError::InvalidName::name: alloc::string::String
pub aya::maps::MapError::InvalidValueSize
pub aya::maps::MapError::InvalidValueSize::expected: usize
pub aya::maps::MapError::InvalidValueSize::size: usize
pub aya::maps::MapError::IoError(std::io::error::Error)
pub aya::maps::MapError::KeyNotFound
pub aya::maps::MapError::OutOfBounds
pub aya::maps::MapError::OutOfBounds::index: u32
pub aya::maps::MapError::OutOfBounds::max_entries: u32
pub aya::maps::MapError::PinError
pub aya::maps::MapError::PinError::error: aya::pin::PinError
pub aya::maps::MapError::PinError::name: core::option::Option<alloc::string::String>
pub aya::maps::MapError::ProgIdNotSupported
pub aya::maps::MapError::ProgramNotLoaded
pub aya::maps::MapError::SyscallError(aya::sys::SyscallError)
pub aya::maps::MapError::Unsupported
pub aya::maps::MapError::Unsupported::map_type: aya_obj::generated::linux_bindings_x86_64::bpf_map_type
pub aya::maps::MapError::Unsupported::name: alloc::string::String
impl core::convert::From<aya::maps::MapError> for aya::EbpfError
pub fn aya::EbpfError::from(source: aya::maps::MapError) -> Self
impl core::convert::From<aya::maps::MapError> for aya::maps::xdp::XdpMapError
pub fn aya::maps::xdp::XdpMapError::from(source: aya::maps::MapError) -> Self
impl core::convert::From<aya::maps::MapError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya::maps::MapError) -> Self
impl core::convert::From<aya::sys::SyscallError> for aya::maps::MapError
pub fn aya::maps::MapError::from(source: aya::sys::SyscallError) -> Self
impl core::convert::From<aya_obj::obj::InvalidTypeBinding<u32>> for aya::maps::MapError
pub fn aya::maps::MapError::from(e: aya_obj::obj::InvalidTypeBinding<u32>) -> Self
impl core::convert::From<std::io::error::Error> for aya::maps::MapError
pub fn aya::maps::MapError::from(source: std::io::error::Error) -> Self
impl core::error::Error for aya::maps::MapError
pub fn aya::maps::MapError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Debug for aya::maps::MapError
pub fn aya::maps::MapError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for aya::maps::MapError
pub fn aya::maps::MapError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::maps::MapError
impl core::marker::Send for aya::maps::MapError
impl core::marker::Sync for aya::maps::MapError
impl core::marker::Unpin for aya::maps::MapError
impl !core::panic::unwind_safe::RefUnwindSafe for aya::maps::MapError
impl !core::panic::unwind_safe::UnwindSafe for aya::maps::MapError
impl<T, U> core::convert::Into<U> for aya::maps::MapError where U: core::convert::From<T>
pub fn aya::maps::MapError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::MapError where U: core::convert::Into<T>
pub type aya::maps::MapError::Error = core::convert::Infallible
pub fn aya::maps::MapError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::MapError where U: core::convert::TryFrom<T>
pub type aya::maps::MapError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::MapError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for aya::maps::MapError where T: core::fmt::Display + ?core::marker::Sized
pub fn aya::maps::MapError::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for aya::maps::MapError where T: 'static + ?core::marker::Sized
pub fn aya::maps::MapError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::MapError where T: ?core::marker::Sized
pub fn aya::maps::MapError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::MapError where T: ?core::marker::Sized
pub fn aya::maps::MapError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::MapError
pub fn aya::maps::MapError::from(t: T) -> T
#[non_exhaustive] pub enum aya::maps::MapType
pub aya::maps::MapType::Arena = 33
pub aya::maps::MapType::Array = 2
pub aya::maps::MapType::ArrayOfMaps = 12
pub aya::maps::MapType::BloomFilter = 30
pub aya::maps::MapType::CgroupArray = 8
pub aya::maps::MapType::CgroupStorage = 19
pub aya::maps::MapType::CgrpStorage = 32
pub aya::maps::MapType::CpuMap = 16
pub aya::maps::MapType::DevMap = 14
pub aya::maps::MapType::DevMapHash = 25
pub aya::maps::MapType::Hash = 1
pub aya::maps::MapType::HashOfMaps = 13
pub aya::maps::MapType::InodeStorage = 28
pub aya::maps::MapType::LpmTrie = 11
pub aya::maps::MapType::LruHash = 9
pub aya::maps::MapType::LruPerCpuHash = 10
pub aya::maps::MapType::PerCpuArray = 6
pub aya::maps::MapType::PerCpuCgroupStorage = 21
pub aya::maps::MapType::PerCpuHash = 5
pub aya::maps::MapType::PerfEventArray = 4
pub aya::maps::MapType::ProgramArray = 3
pub aya::maps::MapType::Queue = 22
pub aya::maps::MapType::ReuseportSockArray = 20
pub aya::maps::MapType::RingBuf = 27
pub aya::maps::MapType::SkStorage = 24
pub aya::maps::MapType::SockHash = 18
pub aya::maps::MapType::SockMap = 15
pub aya::maps::MapType::Stack = 23
pub aya::maps::MapType::StackTrace = 7
pub aya::maps::MapType::StructOps = 26
pub aya::maps::MapType::TaskStorage = 29
pub aya::maps::MapType::Unspecified = 0
pub aya::maps::MapType::UserRingBuf = 31
pub aya::maps::MapType::XskMap = 17
impl core::clone::Clone for aya::maps::MapType
pub fn aya::maps::MapType::clone(&self) -> aya::maps::MapType
impl core::cmp::PartialEq for aya::maps::MapType
pub fn aya::maps::MapType::eq(&self, other: &aya::maps::MapType) -> bool
impl core::convert::TryFrom<aya_obj::generated::linux_bindings_x86_64::bpf_map_type> for aya::maps::MapType
pub type aya::maps::MapType::Error = aya::maps::MapError
pub fn aya::maps::MapType::try_from(map_type: aya_obj::generated::linux_bindings_x86_64::bpf_map_type) -> core::result::Result<Self, Self::Error>
impl core::fmt::Debug for aya::maps::MapType
pub fn aya::maps::MapType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for aya::maps::MapType
impl core::marker::StructuralPartialEq for aya::maps::MapType
impl core::marker::Freeze for aya::maps::MapType
impl core::marker::Send for aya::maps::MapType
impl core::marker::Sync for aya::maps::MapType
impl core::marker::Unpin for aya::maps::MapType
impl core::panic::unwind_safe::RefUnwindSafe for aya::maps::MapType
impl core::panic::unwind_safe::UnwindSafe for aya::maps::MapType
impl<T, U> core::convert::Into<U> for aya::maps::MapType where U: core::convert::From<T>
pub fn aya::maps::MapType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::MapType where U: core::convert::Into<T>
pub type aya::maps::MapType::Error = core::convert::Infallible
pub fn aya::maps::MapType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::MapType where U: core::convert::TryFrom<T>
pub type aya::maps::MapType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::MapType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for aya::maps::MapType where T: core::clone::Clone
pub type aya::maps::MapType::Owned = T
pub fn aya::maps::MapType::clone_into(&self, target: &mut T)
pub fn aya::maps::MapType::to_owned(&self) -> T
impl<T> core::any::Any for aya::maps::MapType where T: 'static + ?core::marker::Sized
pub fn aya::maps::MapType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::MapType where T: ?core::marker::Sized
pub fn aya::maps::MapType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::MapType where T: ?core::marker::Sized
pub fn aya::maps::MapType::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for aya::maps::MapType where T: core::clone::Clone
pub unsafe fn aya::maps::MapType::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for aya::maps::MapType
pub fn aya::maps::MapType::from(t: T) -> T
pub struct aya::maps::Array<T, V: aya::Pod>
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::array::Array<T, V>
pub fn aya::maps::array::Array<T, V>::get(&self, index: &u32, flags: u64) -> core::result::Result<V, aya::maps::MapError>
pub fn aya::maps::array::Array<T, V>::iter(&self) -> impl core::iter::traits::iterator::Iterator<Item = core::result::Result<V, aya::maps::MapError>> + '_
pub fn aya::maps::array::Array<T, V>::len(&self) -> u32
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::array::Array<T, V>
pub fn aya::maps::array::Array<T, V>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>, V: aya::Pod> aya::maps::array::Array<T, V>
pub fn aya::maps::array::Array<T, V>::set(&mut self, index: u32, value: impl core::borrow::Borrow<V>, flags: u64) -> core::result::Result<(), aya::maps::MapError>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::array::Array<&'a aya::maps::MapData, V>
pub type aya::maps::array::Array<&'a aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::array::Array<&'a aya::maps::MapData, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::array::Array<&'a mut aya::maps::MapData, V>
pub type aya::maps::array::Array<&'a mut aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::array::Array<&'a mut aya::maps::MapData, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::IterableMap<u32, V> for aya::maps::array::Array<T, V>
pub fn aya::maps::array::Array<T, V>::get(&self, index: &u32) -> core::result::Result<V, aya::maps::MapError>
pub fn aya::maps::array::Array<T, V>::map(&self) -> &aya::maps::MapData
impl<V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::array::Array<aya::maps::MapData, V>
pub type aya::maps::array::Array<aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::array::Array<aya::maps::MapData, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T, V> core::marker::Freeze for aya::maps::array::Array<T, V> where T: core::marker::Freeze
impl<T, V> core::marker::Send for aya::maps::array::Array<T, V> where T: core::marker::Send, V: core::marker::Send
impl<T, V> core::marker::Sync for aya::maps::array::Array<T, V> where T: core::marker::Sync, V: core::marker::Sync
impl<T, V> core::marker::Unpin for aya::maps::array::Array<T, V> where T: core::marker::Unpin, V: core::marker::Unpin
impl<T, V> core::panic::unwind_safe::RefUnwindSafe for aya::maps::array::Array<T, V> where T: core::panic::unwind_safe::RefUnwindSafe, V: core::panic::unwind_safe::RefUnwindSafe
impl<T, V> core::panic::unwind_safe::UnwindSafe for aya::maps::array::Array<T, V> where T: core::panic::unwind_safe::UnwindSafe, V: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::array::Array<T, V> where U: core::convert::From<T>
pub fn aya::maps::array::Array<T, V>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::array::Array<T, V> where U: core::convert::Into<T>
pub type aya::maps::array::Array<T, V>::Error = core::convert::Infallible
pub fn aya::maps::array::Array<T, V>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::array::Array<T, V> where U: core::convert::TryFrom<T>
pub type aya::maps::array::Array<T, V>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::array::Array<T, V>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::array::Array<T, V> where T: 'static + ?core::marker::Sized
pub fn aya::maps::array::Array<T, V>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::array::Array<T, V> where T: ?core::marker::Sized
pub fn aya::maps::array::Array<T, V>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::array::Array<T, V> where T: ?core::marker::Sized
pub fn aya::maps::array::Array<T, V>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::array::Array<T, V>
pub fn aya::maps::array::Array<T, V>::from(t: T) -> T
pub struct aya::maps::AsyncPerfEventArray<T>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>> aya::maps::perf::AsyncPerfEventArray<T>
pub fn aya::maps::perf::AsyncPerfEventArray<T>::open(&mut self, index: u32, page_count: core::option::Option<usize>) -> core::result::Result<aya::maps::perf::AsyncPerfEventArrayBuffer<T>, aya::maps::perf::PerfBufferError>
pub fn aya::maps::perf::AsyncPerfEventArray<T>::pin<P: core::convert::AsRef<std::path::Path>>(&self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::perf::AsyncPerfEventArray<aya::maps::MapData>
pub type aya::maps::perf::AsyncPerfEventArray<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::perf::AsyncPerfEventArray<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::perf::AsyncPerfEventArray<&'a aya::maps::MapData>
pub type aya::maps::perf::AsyncPerfEventArray<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::perf::AsyncPerfEventArray<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::perf::AsyncPerfEventArray<&'a mut aya::maps::MapData>
pub type aya::maps::perf::AsyncPerfEventArray<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::perf::AsyncPerfEventArray<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T> core::marker::Freeze for aya::maps::perf::AsyncPerfEventArray<T>
impl<T> core::marker::Send for aya::maps::perf::AsyncPerfEventArray<T> where T: core::marker::Sync + core::marker::Send
impl<T> core::marker::Sync for aya::maps::perf::AsyncPerfEventArray<T> where T: core::marker::Sync + core::marker::Send
impl<T> core::marker::Unpin for aya::maps::perf::AsyncPerfEventArray<T>
impl<T> core::panic::unwind_safe::RefUnwindSafe for aya::maps::perf::AsyncPerfEventArray<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for aya::maps::perf::AsyncPerfEventArray<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::perf::AsyncPerfEventArray<T> where U: core::convert::From<T>
pub fn aya::maps::perf::AsyncPerfEventArray<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::perf::AsyncPerfEventArray<T> where U: core::convert::Into<T>
pub type aya::maps::perf::AsyncPerfEventArray<T>::Error = core::convert::Infallible
pub fn aya::maps::perf::AsyncPerfEventArray<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::perf::AsyncPerfEventArray<T> where U: core::convert::TryFrom<T>
pub type aya::maps::perf::AsyncPerfEventArray<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::perf::AsyncPerfEventArray<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::perf::AsyncPerfEventArray<T> where T: 'static + ?core::marker::Sized
pub fn aya::maps::perf::AsyncPerfEventArray<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::perf::AsyncPerfEventArray<T> where T: ?core::marker::Sized
pub fn aya::maps::perf::AsyncPerfEventArray<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::perf::AsyncPerfEventArray<T> where T: ?core::marker::Sized
pub fn aya::maps::perf::AsyncPerfEventArray<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::perf::AsyncPerfEventArray<T>
pub fn aya::maps::perf::AsyncPerfEventArray<T>::from(t: T) -> T
pub struct aya::maps::BloomFilter<T, V: aya::Pod>
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::bloom_filter::BloomFilter<T, V>
pub fn aya::maps::bloom_filter::BloomFilter<T, V>::contains(&self, value: &V, flags: u64) -> core::result::Result<(), aya::maps::MapError>
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::bloom_filter::BloomFilter<T, V>
pub fn aya::maps::bloom_filter::BloomFilter<T, V>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>, V: aya::Pod> aya::maps::bloom_filter::BloomFilter<T, V>
pub fn aya::maps::bloom_filter::BloomFilter<T, V>::insert(&mut self, value: impl core::borrow::Borrow<V>, flags: u64) -> core::result::Result<(), aya::maps::MapError>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::bloom_filter::BloomFilter<&'a aya::maps::MapData, V>
pub type aya::maps::bloom_filter::BloomFilter<&'a aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::bloom_filter::BloomFilter<&'a aya::maps::MapData, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::bloom_filter::BloomFilter<&'a mut aya::maps::MapData, V>
pub type aya::maps::bloom_filter::BloomFilter<&'a mut aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::bloom_filter::BloomFilter<&'a mut aya::maps::MapData, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T: core::fmt::Debug, V: core::fmt::Debug + aya::Pod> core::fmt::Debug for aya::maps::bloom_filter::BloomFilter<T, V>
pub fn aya::maps::bloom_filter::BloomFilter<T, V>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::bloom_filter::BloomFilter<aya::maps::MapData, V>
pub type aya::maps::bloom_filter::BloomFilter<aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::bloom_filter::BloomFilter<aya::maps::MapData, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T, V> core::marker::Freeze for aya::maps::bloom_filter::BloomFilter<T, V> where T: core::marker::Freeze
impl<T, V> core::marker::Send for aya::maps::bloom_filter::BloomFilter<T, V> where T: core::marker::Send, V: core::marker::Send
impl<T, V> core::marker::Sync for aya::maps::bloom_filter::BloomFilter<T, V> where T: core::marker::Sync, V: core::marker::Sync
impl<T, V> core::marker::Unpin for aya::maps::bloom_filter::BloomFilter<T, V> where T: core::marker::Unpin, V: core::marker::Unpin
impl<T, V> core::panic::unwind_safe::RefUnwindSafe for aya::maps::bloom_filter::BloomFilter<T, V> where T: core::panic::unwind_safe::RefUnwindSafe, V: core::panic::unwind_safe::RefUnwindSafe
impl<T, V> core::panic::unwind_safe::UnwindSafe for aya::maps::bloom_filter::BloomFilter<T, V> where T: core::panic::unwind_safe::UnwindSafe, V: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::bloom_filter::BloomFilter<T, V> where U: core::convert::From<T>
pub fn aya::maps::bloom_filter::BloomFilter<T, V>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::bloom_filter::BloomFilter<T, V> where U: core::convert::Into<T>
pub type aya::maps::bloom_filter::BloomFilter<T, V>::Error = core::convert::Infallible
pub fn aya::maps::bloom_filter::BloomFilter<T, V>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::bloom_filter::BloomFilter<T, V> where U: core::convert::TryFrom<T>
pub type aya::maps::bloom_filter::BloomFilter<T, V>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::bloom_filter::BloomFilter<T, V>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::bloom_filter::BloomFilter<T, V> where T: 'static + ?core::marker::Sized
pub fn aya::maps::bloom_filter::BloomFilter<T, V>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::bloom_filter::BloomFilter<T, V> where T: ?core::marker::Sized
pub fn aya::maps::bloom_filter::BloomFilter<T, V>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::bloom_filter::BloomFilter<T, V> where T: ?core::marker::Sized
pub fn aya::maps::bloom_filter::BloomFilter<T, V>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::bloom_filter::BloomFilter<T, V>
pub fn aya::maps::bloom_filter::BloomFilter<T, V>::from(t: T) -> T
pub struct aya::maps::CpuMap<T>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::CpuMap<T>
pub fn aya::maps::CpuMap<T>::get(&self, cpu_index: u32, flags: u64) -> core::result::Result<CpuMapValue, aya::maps::MapError>
pub fn aya::maps::CpuMap<T>::iter(&self) -> impl core::iter::traits::iterator::Iterator<Item = core::result::Result<CpuMapValue, aya::maps::MapError>> + '_
pub fn aya::maps::CpuMap<T>::len(&self) -> u32
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::CpuMap<T>
pub fn aya::maps::CpuMap<T>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>> aya::maps::CpuMap<T>
pub fn aya::maps::CpuMap<T>::set(&mut self, cpu_index: u32, queue_size: u32, program: core::option::Option<&aya::programs::ProgramFd>, flags: u64) -> core::result::Result<(), aya::maps::xdp::XdpMapError>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::CpuMap<aya::maps::MapData>
pub type aya::maps::CpuMap<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::CpuMap<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::CpuMap<&'a aya::maps::MapData>
pub type aya::maps::CpuMap<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::CpuMap<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::CpuMap<&'a mut aya::maps::MapData>
pub type aya::maps::CpuMap<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::CpuMap<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T> core::marker::Freeze for aya::maps::CpuMap<T> where T: core::marker::Freeze
impl<T> core::marker::Send for aya::maps::CpuMap<T> where T: core::marker::Send
impl<T> core::marker::Sync for aya::maps::CpuMap<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for aya::maps::CpuMap<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for aya::maps::CpuMap<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for aya::maps::CpuMap<T> where T: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::CpuMap<T> where U: core::convert::From<T>
pub fn aya::maps::CpuMap<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::CpuMap<T> where U: core::convert::Into<T>
pub type aya::maps::CpuMap<T>::Error = core::convert::Infallible
pub fn aya::maps::CpuMap<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::CpuMap<T> where U: core::convert::TryFrom<T>
pub type aya::maps::CpuMap<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::CpuMap<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::CpuMap<T> where T: 'static + ?core::marker::Sized
pub fn aya::maps::CpuMap<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::CpuMap<T> where T: ?core::marker::Sized
pub fn aya::maps::CpuMap<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::CpuMap<T> where T: ?core::marker::Sized
pub fn aya::maps::CpuMap<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::CpuMap<T>
pub fn aya::maps::CpuMap<T>::from(t: T) -> T
pub struct aya::maps::DevMap<T>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::DevMap<T>
pub fn aya::maps::DevMap<T>::get(&self, index: u32, flags: u64) -> core::result::Result<DevMapValue, aya::maps::MapError>
pub fn aya::maps::DevMap<T>::iter(&self) -> impl core::iter::traits::iterator::Iterator<Item = core::result::Result<DevMapValue, aya::maps::MapError>> + '_
pub fn aya::maps::DevMap<T>::len(&self) -> u32
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::DevMap<T>
pub fn aya::maps::DevMap<T>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>> aya::maps::DevMap<T>
pub fn aya::maps::DevMap<T>::set(&mut self, index: u32, target_if_index: u32, program: core::option::Option<&aya::programs::ProgramFd>, flags: u64) -> core::result::Result<(), aya::maps::xdp::XdpMapError>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::DevMap<aya::maps::MapData>
pub type aya::maps::DevMap<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::DevMap<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::DevMap<&'a aya::maps::MapData>
pub type aya::maps::DevMap<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::DevMap<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::DevMap<&'a mut aya::maps::MapData>
pub type aya::maps::DevMap<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::DevMap<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T> core::marker::Freeze for aya::maps::DevMap<T> where T: core::marker::Freeze
impl<T> core::marker::Send for aya::maps::DevMap<T> where T: core::marker::Send
impl<T> core::marker::Sync for aya::maps::DevMap<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for aya::maps::DevMap<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for aya::maps::DevMap<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for aya::maps::DevMap<T> where T: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::DevMap<T> where U: core::convert::From<T>
pub fn aya::maps::DevMap<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::DevMap<T> where U: core::convert::Into<T>
pub type aya::maps::DevMap<T>::Error = core::convert::Infallible
pub fn aya::maps::DevMap<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::DevMap<T> where U: core::convert::TryFrom<T>
pub type aya::maps::DevMap<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::DevMap<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::DevMap<T> where T: 'static + ?core::marker::Sized
pub fn aya::maps::DevMap<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::DevMap<T> where T: ?core::marker::Sized
pub fn aya::maps::DevMap<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::DevMap<T> where T: ?core::marker::Sized
pub fn aya::maps::DevMap<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::DevMap<T>
pub fn aya::maps::DevMap<T>::from(t: T) -> T
pub struct aya::maps::DevMapHash<T>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::DevMapHash<T>
pub fn aya::maps::DevMapHash<T>::get(&self, key: u32, flags: u64) -> core::result::Result<DevMapValue, aya::maps::MapError>
pub fn aya::maps::DevMapHash<T>::iter(&self) -> aya::maps::MapIter<'_, u32, DevMapValue, Self>
pub fn aya::maps::DevMapHash<T>::keys(&self) -> aya::maps::MapKeys<'_, u32>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::DevMapHash<T>
pub fn aya::maps::DevMapHash<T>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>> aya::maps::DevMapHash<T>
pub fn aya::maps::DevMapHash<T>::insert(&mut self, key: u32, target_if_index: u32, program: core::option::Option<&aya::programs::ProgramFd>, flags: u64) -> core::result::Result<(), aya::maps::xdp::XdpMapError>
pub fn aya::maps::DevMapHash<T>::remove(&mut self, key: u32) -> core::result::Result<(), aya::maps::MapError>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::DevMapHash<aya::maps::MapData>
pub type aya::maps::DevMapHash<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::DevMapHash<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::DevMapHash<&'a aya::maps::MapData>
pub type aya::maps::DevMapHash<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::DevMapHash<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::DevMapHash<&'a mut aya::maps::MapData>
pub type aya::maps::DevMapHash<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::DevMapHash<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T> core::marker::Freeze for aya::maps::DevMapHash<T> where T: core::marker::Freeze
impl<T> core::marker::Send for aya::maps::DevMapHash<T> where T: core::marker::Send
impl<T> core::marker::Sync for aya::maps::DevMapHash<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for aya::maps::DevMapHash<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for aya::maps::DevMapHash<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for aya::maps::DevMapHash<T> where T: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::DevMapHash<T> where U: core::convert::From<T>
pub fn aya::maps::DevMapHash<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::DevMapHash<T> where U: core::convert::Into<T>
pub type aya::maps::DevMapHash<T>::Error = core::convert::Infallible
pub fn aya::maps::DevMapHash<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::DevMapHash<T> where U: core::convert::TryFrom<T>
pub type aya::maps::DevMapHash<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::DevMapHash<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::DevMapHash<T> where T: 'static + ?core::marker::Sized
pub fn aya::maps::DevMapHash<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::DevMapHash<T> where T: ?core::marker::Sized
pub fn aya::maps::DevMapHash<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::DevMapHash<T> where T: ?core::marker::Sized
pub fn aya::maps::DevMapHash<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::DevMapHash<T>
pub fn aya::maps::DevMapHash<T>::from(t: T) -> T
pub struct aya::maps::HashMap<T, K, V>
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::hash_map::HashMap<T, K, V>
pub fn aya::maps::hash_map::HashMap<T, K, V>::get(&self, key: &K, flags: u64) -> core::result::Result<V, aya::maps::MapError>
pub fn aya::maps::hash_map::HashMap<T, K, V>::iter(&self) -> aya::maps::MapIter<'_, K, V, Self>
pub fn aya::maps::hash_map::HashMap<T, K, V>::keys(&self) -> aya::maps::MapKeys<'_, K>
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::hash_map::HashMap<T, K, V>
pub fn aya::maps::hash_map::HashMap<T, K, V>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::hash_map::HashMap<T, K, V>
pub fn aya::maps::hash_map::HashMap<T, K, V>::insert(&mut self, key: impl core::borrow::Borrow<K>, value: impl core::borrow::Borrow<V>, flags: u64) -> core::result::Result<(), aya::maps::MapError>
pub fn aya::maps::hash_map::HashMap<T, K, V>::remove(&mut self, key: &K) -> core::result::Result<(), aya::maps::MapError>
impl<'a, K: aya::Pod, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::hash_map::HashMap<&'a aya::maps::MapData, K, V>
pub type aya::maps::hash_map::HashMap<&'a aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::hash_map::HashMap<&'a aya::maps::MapData, K, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, K: aya::Pod, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::hash_map::HashMap<&'a mut aya::maps::MapData, K, V>
pub type aya::maps::hash_map::HashMap<&'a mut aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::hash_map::HashMap<&'a mut aya::maps::MapData, K, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<K: aya::Pod, V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::hash_map::HashMap<aya::maps::MapData, K, V>
pub type aya::maps::hash_map::HashMap<aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::hash_map::HashMap<aya::maps::MapData, K, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::IterableMap<K, V> for aya::maps::hash_map::HashMap<T, K, V>
pub fn aya::maps::hash_map::HashMap<T, K, V>::get(&self, key: &K) -> core::result::Result<V, aya::maps::MapError>
pub fn aya::maps::hash_map::HashMap<T, K, V>::map(&self) -> &aya::maps::MapData
impl<T: core::fmt::Debug, K: core::fmt::Debug, V: core::fmt::Debug> core::fmt::Debug for aya::maps::hash_map::HashMap<T, K, V>
pub fn aya::maps::hash_map::HashMap<T, K, V>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T, K, V> core::marker::Freeze for aya::maps::hash_map::HashMap<T, K, V> where T: core::marker::Freeze
impl<T, K, V> core::marker::Send for aya::maps::hash_map::HashMap<T, K, V> where T: core::marker::Send, K: core::marker::Send, V: core::marker::Send
impl<T, K, V> core::marker::Sync for aya::maps::hash_map::HashMap<T, K, V> where T: core::marker::Sync, K: core::marker::Sync, V: core::marker::Sync
impl<T, K, V> core::marker::Unpin for aya::maps::hash_map::HashMap<T, K, V> where T: core::marker::Unpin, K: core::marker::Unpin, V: core::marker::Unpin
impl<T, K, V> core::panic::unwind_safe::RefUnwindSafe for aya::maps::hash_map::HashMap<T, K, V> where T: core::panic::unwind_safe::RefUnwindSafe, K: core::panic::unwind_safe::RefUnwindSafe, V: core::panic::unwind_safe::RefUnwindSafe
impl<T, K, V> core::panic::unwind_safe::UnwindSafe for aya::maps::hash_map::HashMap<T, K, V> where T: core::panic::unwind_safe::UnwindSafe, K: core::panic::unwind_safe::UnwindSafe, V: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::hash_map::HashMap<T, K, V> where U: core::convert::From<T>
pub fn aya::maps::hash_map::HashMap<T, K, V>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::hash_map::HashMap<T, K, V> where U: core::convert::Into<T>
pub type aya::maps::hash_map::HashMap<T, K, V>::Error = core::convert::Infallible
pub fn aya::maps::hash_map::HashMap<T, K, V>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::hash_map::HashMap<T, K, V> where U: core::convert::TryFrom<T>
pub type aya::maps::hash_map::HashMap<T, K, V>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::hash_map::HashMap<T, K, V>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::hash_map::HashMap<T, K, V> where T: 'static + ?core::marker::Sized
pub fn aya::maps::hash_map::HashMap<T, K, V>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::hash_map::HashMap<T, K, V> where T: ?core::marker::Sized
pub fn aya::maps::hash_map::HashMap<T, K, V>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::hash_map::HashMap<T, K, V> where T: ?core::marker::Sized
pub fn aya::maps::hash_map::HashMap<T, K, V>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::hash_map::HashMap<T, K, V>
pub fn aya::maps::hash_map::HashMap<T, K, V>::from(t: T) -> T
pub struct aya::maps::LpmTrie<T, K, V>
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::lpm_trie::LpmTrie<T, K, V>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::get(&self, key: &aya::maps::lpm_trie::Key<K>, flags: u64) -> core::result::Result<V, aya::maps::MapError>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::iter(&self) -> aya::maps::MapIter<'_, aya::maps::lpm_trie::Key<K>, V, Self>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::keys(&self) -> aya::maps::MapKeys<'_, aya::maps::lpm_trie::Key<K>>
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::lpm_trie::LpmTrie<T, K, V>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::lpm_trie::LpmTrie<T, K, V>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::insert(&mut self, key: &aya::maps::lpm_trie::Key<K>, value: impl core::borrow::Borrow<V>, flags: u64) -> core::result::Result<(), aya::maps::MapError>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::remove(&mut self, key: &aya::maps::lpm_trie::Key<K>) -> core::result::Result<(), aya::maps::MapError>
impl<'a, K: aya::Pod, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::lpm_trie::LpmTrie<&'a aya::maps::MapData, K, V>
pub type aya::maps::lpm_trie::LpmTrie<&'a aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::lpm_trie::LpmTrie<&'a aya::maps::MapData, K, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, K: aya::Pod, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::lpm_trie::LpmTrie<&'a mut aya::maps::MapData, K, V>
pub type aya::maps::lpm_trie::LpmTrie<&'a mut aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::lpm_trie::LpmTrie<&'a mut aya::maps::MapData, K, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<K: aya::Pod, V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::lpm_trie::LpmTrie<aya::maps::MapData, K, V>
pub type aya::maps::lpm_trie::LpmTrie<aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::lpm_trie::LpmTrie<aya::maps::MapData, K, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::IterableMap<aya::maps::lpm_trie::Key<K>, V> for aya::maps::lpm_trie::LpmTrie<T, K, V>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::get(&self, key: &aya::maps::lpm_trie::Key<K>) -> core::result::Result<V, aya::maps::MapError>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::map(&self) -> &aya::maps::MapData
impl<T: core::fmt::Debug, K: core::fmt::Debug, V: core::fmt::Debug> core::fmt::Debug for aya::maps::lpm_trie::LpmTrie<T, K, V>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T, K, V> core::marker::Freeze for aya::maps::lpm_trie::LpmTrie<T, K, V> where T: core::marker::Freeze
impl<T, K, V> core::marker::Send for aya::maps::lpm_trie::LpmTrie<T, K, V> where T: core::marker::Send, K: core::marker::Send, V: core::marker::Send
impl<T, K, V> core::marker::Sync for aya::maps::lpm_trie::LpmTrie<T, K, V> where T: core::marker::Sync, K: core::marker::Sync, V: core::marker::Sync
impl<T, K, V> core::marker::Unpin for aya::maps::lpm_trie::LpmTrie<T, K, V> where T: core::marker::Unpin, K: core::marker::Unpin, V: core::marker::Unpin
impl<T, K, V> core::panic::unwind_safe::RefUnwindSafe for aya::maps::lpm_trie::LpmTrie<T, K, V> where T: core::panic::unwind_safe::RefUnwindSafe, K: core::panic::unwind_safe::RefUnwindSafe, V: core::panic::unwind_safe::RefUnwindSafe
impl<T, K, V> core::panic::unwind_safe::UnwindSafe for aya::maps::lpm_trie::LpmTrie<T, K, V> where T: core::panic::unwind_safe::UnwindSafe, K: core::panic::unwind_safe::UnwindSafe, V: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::lpm_trie::LpmTrie<T, K, V> where U: core::convert::From<T>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::lpm_trie::LpmTrie<T, K, V> where U: core::convert::Into<T>
pub type aya::maps::lpm_trie::LpmTrie<T, K, V>::Error = core::convert::Infallible
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::lpm_trie::LpmTrie<T, K, V> where U: core::convert::TryFrom<T>
pub type aya::maps::lpm_trie::LpmTrie<T, K, V>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::lpm_trie::LpmTrie<T, K, V> where T: 'static + ?core::marker::Sized
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::lpm_trie::LpmTrie<T, K, V> where T: ?core::marker::Sized
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::lpm_trie::LpmTrie<T, K, V> where T: ?core::marker::Sized
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::lpm_trie::LpmTrie<T, K, V>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::from(t: T) -> T
pub struct aya::maps::MapData
impl aya::maps::MapData
pub fn aya::maps::MapData::create(obj: aya_obj::maps::Map, name: &str, btf_fd: core::option::Option<std::os::fd::owned::BorrowedFd<'_>>) -> core::result::Result<Self, aya::maps::MapError>
pub fn aya::maps::MapData::fd(&self) -> &aya::maps::MapFd
pub fn aya::maps::MapData::from_fd(fd: std::os::fd::owned::OwnedFd) -> core::result::Result<Self, aya::maps::MapError>
pub fn aya::maps::MapData::from_id(id: u32) -> core::result::Result<Self, aya::maps::MapError>
pub fn aya::maps::MapData::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::maps::MapError>
pub fn aya::maps::MapData::info(&self) -> core::result::Result<aya::maps::MapInfo, aya::maps::MapError>
pub fn aya::maps::MapData::pin<P: core::convert::AsRef<std::path::Path>>(&self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl core::fmt::Debug for aya::maps::MapData
pub fn aya::maps::MapData::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::maps::MapData
impl core::marker::Send for aya::maps::MapData
impl core::marker::Sync for aya::maps::MapData
impl core::marker::Unpin for aya::maps::MapData
impl core::panic::unwind_safe::RefUnwindSafe for aya::maps::MapData
impl core::panic::unwind_safe::UnwindSafe for aya::maps::MapData
impl<T, U> core::convert::Into<U> for aya::maps::MapData where U: core::convert::From<T>
pub fn aya::maps::MapData::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::MapData where U: core::convert::Into<T>
pub type aya::maps::MapData::Error = core::convert::Infallible
pub fn aya::maps::MapData::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::MapData where U: core::convert::TryFrom<T>
pub type aya::maps::MapData::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::MapData::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::MapData where T: 'static + ?core::marker::Sized
pub fn aya::maps::MapData::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::MapData where T: ?core::marker::Sized
pub fn aya::maps::MapData::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::MapData where T: ?core::marker::Sized
pub fn aya::maps::MapData::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::MapData
pub fn aya::maps::MapData::from(t: T) -> T
pub struct aya::maps::MapFd
impl core::fmt::Debug for aya::maps::MapFd
pub fn aya::maps::MapFd::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl std::os::fd::owned::AsFd for aya::maps::MapFd
pub fn aya::maps::MapFd::as_fd(&self) -> std::os::fd::owned::BorrowedFd<'_>
impl core::marker::Freeze for aya::maps::MapFd
impl core::marker::Send for aya::maps::MapFd
impl core::marker::Sync for aya::maps::MapFd
impl core::marker::Unpin for aya::maps::MapFd
impl core::panic::unwind_safe::RefUnwindSafe for aya::maps::MapFd
impl core::panic::unwind_safe::UnwindSafe for aya::maps::MapFd
impl<T, U> core::convert::Into<U> for aya::maps::MapFd where U: core::convert::From<T>
pub fn aya::maps::MapFd::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::MapFd where U: core::convert::Into<T>
pub type aya::maps::MapFd::Error = core::convert::Infallible
pub fn aya::maps::MapFd::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::MapFd where U: core::convert::TryFrom<T>
pub type aya::maps::MapFd::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::MapFd::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::MapFd where T: 'static + ?core::marker::Sized
pub fn aya::maps::MapFd::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::MapFd where T: ?core::marker::Sized
pub fn aya::maps::MapFd::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::MapFd where T: ?core::marker::Sized
pub fn aya::maps::MapFd::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::MapFd
pub fn aya::maps::MapFd::from(t: T) -> T
pub struct aya::maps::MapInfo(_)
impl aya::maps::MapInfo
pub fn aya::maps::MapInfo::fd(&self) -> core::result::Result<aya::maps::MapFd, aya::maps::MapError>
pub fn aya::maps::MapInfo::from_id(id: u32) -> core::result::Result<Self, aya::maps::MapError>
pub fn aya::maps::MapInfo::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::maps::MapError>
pub fn aya::maps::MapInfo::id(&self) -> u32
pub fn aya::maps::MapInfo::key_size(&self) -> u32
pub fn aya::maps::MapInfo::map_flags(&self) -> u32
pub fn aya::maps::MapInfo::map_type(&self) -> core::result::Result<aya::maps::MapType, aya::maps::MapError>
pub fn aya::maps::MapInfo::max_entries(&self) -> u32
pub fn aya::maps::MapInfo::name(&self) -> &[u8]
pub fn aya::maps::MapInfo::name_as_str(&self) -> core::option::Option<&str>
pub fn aya::maps::MapInfo::value_size(&self) -> u32
impl core::fmt::Debug for aya::maps::MapInfo
pub fn aya::maps::MapInfo::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::maps::MapInfo
impl core::marker::Send for aya::maps::MapInfo
impl core::marker::Sync for aya::maps::MapInfo
impl core::marker::Unpin for aya::maps::MapInfo
impl core::panic::unwind_safe::RefUnwindSafe for aya::maps::MapInfo
impl core::panic::unwind_safe::UnwindSafe for aya::maps::MapInfo
impl<T, U> core::convert::Into<U> for aya::maps::MapInfo where U: core::convert::From<T>
pub fn aya::maps::MapInfo::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::MapInfo where U: core::convert::Into<T>
pub type aya::maps::MapInfo::Error = core::convert::Infallible
pub fn aya::maps::MapInfo::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::MapInfo where U: core::convert::TryFrom<T>
pub type aya::maps::MapInfo::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::MapInfo::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::MapInfo where T: 'static + ?core::marker::Sized
pub fn aya::maps::MapInfo::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::MapInfo where T: ?core::marker::Sized
pub fn aya::maps::MapInfo::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::MapInfo where T: ?core::marker::Sized
pub fn aya::maps::MapInfo::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::MapInfo
pub fn aya::maps::MapInfo::from(t: T) -> T
pub struct aya::maps::MapIter<'coll, K: aya::Pod, V, I: aya::maps::IterableMap<K, V>>
impl<K: aya::Pod, V, I: aya::maps::IterableMap<K, V>> core::iter::traits::iterator::Iterator for aya::maps::MapIter<'_, K, V, I>
pub type aya::maps::MapIter<'_, K, V, I>::Item = core::result::Result<(K, V), aya::maps::MapError>
pub fn aya::maps::MapIter<'_, K, V, I>::next(&mut self) -> core::option::Option<Self::Item>
impl<'coll, K, V, I> core::marker::Freeze for aya::maps::MapIter<'coll, K, V, I> where K: core::marker::Freeze
impl<'coll, K, V, I> core::marker::Send for aya::maps::MapIter<'coll, K, V, I> where I: core::marker::Sync, V: core::marker::Send, K: core::marker::Send
impl<'coll, K, V, I> core::marker::Sync for aya::maps::MapIter<'coll, K, V, I> where I: core::marker::Sync, V: core::marker::Sync, K: core::marker::Sync
impl<'coll, K, V, I> core::marker::Unpin for aya::maps::MapIter<'coll, K, V, I> where V: core::marker::Unpin, K: core::marker::Unpin
impl<'coll, K, V, I> core::panic::unwind_safe::RefUnwindSafe for aya::maps::MapIter<'coll, K, V, I> where I: core::panic::unwind_safe::RefUnwindSafe, V: core::panic::unwind_safe::RefUnwindSafe, K: core::panic::unwind_safe::RefUnwindSafe
impl<'coll, K, V, I> core::panic::unwind_safe::UnwindSafe for aya::maps::MapIter<'coll, K, V, I> where I: core::panic::unwind_safe::RefUnwindSafe, V: core::panic::unwind_safe::UnwindSafe, K: core::panic::unwind_safe::UnwindSafe
impl<I> core::iter::traits::collect::IntoIterator for aya::maps::MapIter<'coll, K, V, I> where I: core::iter::traits::iterator::Iterator
pub type aya::maps::MapIter<'coll, K, V, I>::IntoIter = I
pub type aya::maps::MapIter<'coll, K, V, I>::Item = <I as core::iter::traits::iterator::Iterator>::Item
pub fn aya::maps::MapIter<'coll, K, V, I>::into_iter(self) -> I
impl<T, U> core::convert::Into<U> for aya::maps::MapIter<'coll, K, V, I> where U: core::convert::From<T>
pub fn aya::maps::MapIter<'coll, K, V, I>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::MapIter<'coll, K, V, I> where U: core::convert::Into<T>
pub type aya::maps::MapIter<'coll, K, V, I>::Error = core::convert::Infallible
pub fn aya::maps::MapIter<'coll, K, V, I>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::MapIter<'coll, K, V, I> where U: core::convert::TryFrom<T>
pub type aya::maps::MapIter<'coll, K, V, I>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::MapIter<'coll, K, V, I>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::MapIter<'coll, K, V, I> where T: 'static + ?core::marker::Sized
pub fn aya::maps::MapIter<'coll, K, V, I>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::MapIter<'coll, K, V, I> where T: ?core::marker::Sized
pub fn aya::maps::MapIter<'coll, K, V, I>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::MapIter<'coll, K, V, I> where T: ?core::marker::Sized
pub fn aya::maps::MapIter<'coll, K, V, I>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::MapIter<'coll, K, V, I>
pub fn aya::maps::MapIter<'coll, K, V, I>::from(t: T) -> T
pub struct aya::maps::MapKeys<'coll, K: aya::Pod>
impl<K: aya::Pod> core::iter::traits::iterator::Iterator for aya::maps::MapKeys<'_, K>
pub type aya::maps::MapKeys<'_, K>::Item = core::result::Result<K, aya::maps::MapError>
pub fn aya::maps::MapKeys<'_, K>::next(&mut self) -> core::option::Option<core::result::Result<K, aya::maps::MapError>>
impl<'coll, K> core::marker::Freeze for aya::maps::MapKeys<'coll, K> where K: core::marker::Freeze
impl<'coll, K> core::marker::Send for aya::maps::MapKeys<'coll, K> where K: core::marker::Send
impl<'coll, K> core::marker::Sync for aya::maps::MapKeys<'coll, K> where K: core::marker::Sync
impl<'coll, K> core::marker::Unpin for aya::maps::MapKeys<'coll, K> where K: core::marker::Unpin
impl<'coll, K> core::panic::unwind_safe::RefUnwindSafe for aya::maps::MapKeys<'coll, K> where K: core::panic::unwind_safe::RefUnwindSafe
impl<'coll, K> core::panic::unwind_safe::UnwindSafe for aya::maps::MapKeys<'coll, K> where K: core::panic::unwind_safe::UnwindSafe
impl<I> core::iter::traits::collect::IntoIterator for aya::maps::MapKeys<'coll, K> where I: core::iter::traits::iterator::Iterator
pub type aya::maps::MapKeys<'coll, K>::IntoIter = I
pub type aya::maps::MapKeys<'coll, K>::Item = <I as core::iter::traits::iterator::Iterator>::Item
pub fn aya::maps::MapKeys<'coll, K>::into_iter(self) -> I
impl<T, U> core::convert::Into<U> for aya::maps::MapKeys<'coll, K> where U: core::convert::From<T>
pub fn aya::maps::MapKeys<'coll, K>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::MapKeys<'coll, K> where U: core::convert::Into<T>
pub type aya::maps::MapKeys<'coll, K>::Error = core::convert::Infallible
pub fn aya::maps::MapKeys<'coll, K>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::MapKeys<'coll, K> where U: core::convert::TryFrom<T>
pub type aya::maps::MapKeys<'coll, K>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::MapKeys<'coll, K>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::MapKeys<'coll, K> where T: 'static + ?core::marker::Sized
pub fn aya::maps::MapKeys<'coll, K>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::MapKeys<'coll, K> where T: ?core::marker::Sized
pub fn aya::maps::MapKeys<'coll, K>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::MapKeys<'coll, K> where T: ?core::marker::Sized
pub fn aya::maps::MapKeys<'coll, K>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::MapKeys<'coll, K>
pub fn aya::maps::MapKeys<'coll, K>::from(t: T) -> T
pub struct aya::maps::PerCpuArray<T, V: aya::Pod>
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::PerCpuArray<T, V>
pub fn aya::maps::PerCpuArray<T, V>::get(&self, index: &u32, flags: u64) -> core::result::Result<aya::maps::PerCpuValues<V>, aya::maps::MapError>
pub fn aya::maps::PerCpuArray<T, V>::iter(&self) -> impl core::iter::traits::iterator::Iterator<Item = core::result::Result<aya::maps::PerCpuValues<V>, aya::maps::MapError>> + '_
pub fn aya::maps::PerCpuArray<T, V>::len(&self) -> u32
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::PerCpuArray<T, V>
pub fn aya::maps::PerCpuArray<T, V>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>, V: aya::Pod> aya::maps::PerCpuArray<T, V>
pub fn aya::maps::PerCpuArray<T, V>::set(&mut self, index: u32, values: aya::maps::PerCpuValues<V>, flags: u64) -> core::result::Result<(), aya::maps::MapError>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::PerCpuArray<&'a aya::maps::MapData, V>
pub type aya::maps::PerCpuArray<&'a aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::PerCpuArray<&'a aya::maps::MapData, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::PerCpuArray<&'a mut aya::maps::MapData, V>
pub type aya::maps::PerCpuArray<&'a mut aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::PerCpuArray<&'a mut aya::maps::MapData, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::IterableMap<u32, aya::maps::PerCpuValues<V>> for aya::maps::PerCpuArray<T, V>
pub fn aya::maps::PerCpuArray<T, V>::get(&self, index: &u32) -> core::result::Result<aya::maps::PerCpuValues<V>, aya::maps::MapError>
pub fn aya::maps::PerCpuArray<T, V>::map(&self) -> &aya::maps::MapData
impl<V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::PerCpuArray<aya::maps::MapData, V>
pub type aya::maps::PerCpuArray<aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::PerCpuArray<aya::maps::MapData, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T, V> core::marker::Freeze for aya::maps::PerCpuArray<T, V> where T: core::marker::Freeze
impl<T, V> core::marker::Send for aya::maps::PerCpuArray<T, V> where T: core::marker::Send, V: core::marker::Send
impl<T, V> core::marker::Sync for aya::maps::PerCpuArray<T, V> where T: core::marker::Sync, V: core::marker::Sync
impl<T, V> core::marker::Unpin for aya::maps::PerCpuArray<T, V> where T: core::marker::Unpin, V: core::marker::Unpin
impl<T, V> core::panic::unwind_safe::RefUnwindSafe for aya::maps::PerCpuArray<T, V> where T: core::panic::unwind_safe::RefUnwindSafe, V: core::panic::unwind_safe::RefUnwindSafe
impl<T, V> core::panic::unwind_safe::UnwindSafe for aya::maps::PerCpuArray<T, V> where T: core::panic::unwind_safe::UnwindSafe, V: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::PerCpuArray<T, V> where U: core::convert::From<T>
pub fn aya::maps::PerCpuArray<T, V>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::PerCpuArray<T, V> where U: core::convert::Into<T>
pub type aya::maps::PerCpuArray<T, V>::Error = core::convert::Infallible
pub fn aya::maps::PerCpuArray<T, V>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::PerCpuArray<T, V> where U: core::convert::TryFrom<T>
pub type aya::maps::PerCpuArray<T, V>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::PerCpuArray<T, V>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::PerCpuArray<T, V> where T: 'static + ?core::marker::Sized
pub fn aya::maps::PerCpuArray<T, V>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::PerCpuArray<T, V> where T: ?core::marker::Sized
pub fn aya::maps::PerCpuArray<T, V>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::PerCpuArray<T, V> where T: ?core::marker::Sized
pub fn aya::maps::PerCpuArray<T, V>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::PerCpuArray<T, V>
pub fn aya::maps::PerCpuArray<T, V>::from(t: T) -> T
pub struct aya::maps::PerCpuHashMap<T, K: aya::Pod, V: aya::Pod>
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::hash_map::PerCpuHashMap<T, K, V>
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::get(&self, key: &K, flags: u64) -> core::result::Result<aya::maps::PerCpuValues<V>, aya::maps::MapError>
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::iter(&self) -> aya::maps::MapIter<'_, K, aya::maps::PerCpuValues<V>, Self>
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::keys(&self) -> aya::maps::MapKeys<'_, K>
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::hash_map::PerCpuHashMap<T, K, V>
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::hash_map::PerCpuHashMap<T, K, V>
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::insert(&mut self, key: impl core::borrow::Borrow<K>, values: aya::maps::PerCpuValues<V>, flags: u64) -> core::result::Result<(), aya::maps::MapError>
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::remove(&mut self, key: &K) -> core::result::Result<(), aya::maps::MapError>
impl<'a, K: aya::Pod, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::hash_map::PerCpuHashMap<&'a aya::maps::MapData, K, V>
pub type aya::maps::hash_map::PerCpuHashMap<&'a aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::hash_map::PerCpuHashMap<&'a aya::maps::MapData, K, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, K: aya::Pod, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::hash_map::PerCpuHashMap<&'a mut aya::maps::MapData, K, V>
pub type aya::maps::hash_map::PerCpuHashMap<&'a mut aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::hash_map::PerCpuHashMap<&'a mut aya::maps::MapData, K, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<K: aya::Pod, V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::hash_map::PerCpuHashMap<aya::maps::MapData, K, V>
pub type aya::maps::hash_map::PerCpuHashMap<aya::maps::MapData, K, V>::Error = aya::maps::MapError
pub fn aya::maps::hash_map::PerCpuHashMap<aya::maps::MapData, K, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::IterableMap<K, aya::maps::PerCpuValues<V>> for aya::maps::hash_map::PerCpuHashMap<T, K, V>
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::get(&self, key: &K) -> core::result::Result<aya::maps::PerCpuValues<V>, aya::maps::MapError>
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::map(&self) -> &aya::maps::MapData
impl<T, K, V> core::marker::Freeze for aya::maps::hash_map::PerCpuHashMap<T, K, V> where T: core::marker::Freeze
impl<T, K, V> core::marker::Send for aya::maps::hash_map::PerCpuHashMap<T, K, V> where T: core::marker::Send, K: core::marker::Send, V: core::marker::Send
impl<T, K, V> core::marker::Sync for aya::maps::hash_map::PerCpuHashMap<T, K, V> where T: core::marker::Sync, K: core::marker::Sync, V: core::marker::Sync
impl<T, K, V> core::marker::Unpin for aya::maps::hash_map::PerCpuHashMap<T, K, V> where T: core::marker::Unpin, K: core::marker::Unpin, V: core::marker::Unpin
impl<T, K, V> core::panic::unwind_safe::RefUnwindSafe for aya::maps::hash_map::PerCpuHashMap<T, K, V> where T: core::panic::unwind_safe::RefUnwindSafe, K: core::panic::unwind_safe::RefUnwindSafe, V: core::panic::unwind_safe::RefUnwindSafe
impl<T, K, V> core::panic::unwind_safe::UnwindSafe for aya::maps::hash_map::PerCpuHashMap<T, K, V> where T: core::panic::unwind_safe::UnwindSafe, K: core::panic::unwind_safe::UnwindSafe, V: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::hash_map::PerCpuHashMap<T, K, V> where U: core::convert::From<T>
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::hash_map::PerCpuHashMap<T, K, V> where U: core::convert::Into<T>
pub type aya::maps::hash_map::PerCpuHashMap<T, K, V>::Error = core::convert::Infallible
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::hash_map::PerCpuHashMap<T, K, V> where U: core::convert::TryFrom<T>
pub type aya::maps::hash_map::PerCpuHashMap<T, K, V>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::hash_map::PerCpuHashMap<T, K, V> where T: 'static + ?core::marker::Sized
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::hash_map::PerCpuHashMap<T, K, V> where T: ?core::marker::Sized
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::hash_map::PerCpuHashMap<T, K, V> where T: ?core::marker::Sized
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::hash_map::PerCpuHashMap<T, K, V>
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::from(t: T) -> T
pub struct aya::maps::PerCpuValues<T: aya::Pod>
impl<T: aya::Pod> core::convert::TryFrom<alloc::vec::Vec<T>> for aya::maps::PerCpuValues<T>
pub type aya::maps::PerCpuValues<T>::Error = std::io::error::Error
pub fn aya::maps::PerCpuValues<T>::try_from(values: alloc::vec::Vec<T>) -> core::result::Result<Self, Self::Error>
impl<T: aya::Pod> core::ops::deref::Deref for aya::maps::PerCpuValues<T>
pub type aya::maps::PerCpuValues<T>::Target = alloc::boxed::Box<[T]>
pub fn aya::maps::PerCpuValues<T>::deref(&self) -> &Self::Target
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::IterableMap<K, aya::maps::PerCpuValues<V>> for aya::maps::hash_map::PerCpuHashMap<T, K, V>
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::get(&self, key: &K) -> core::result::Result<aya::maps::PerCpuValues<V>, aya::maps::MapError>
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::map(&self) -> &aya::maps::MapData
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::IterableMap<u32, aya::maps::PerCpuValues<V>> for aya::maps::PerCpuArray<T, V>
pub fn aya::maps::PerCpuArray<T, V>::get(&self, index: &u32) -> core::result::Result<aya::maps::PerCpuValues<V>, aya::maps::MapError>
pub fn aya::maps::PerCpuArray<T, V>::map(&self) -> &aya::maps::MapData
impl<T: core::fmt::Debug + aya::Pod> core::fmt::Debug for aya::maps::PerCpuValues<T>
pub fn aya::maps::PerCpuValues<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T> core::marker::Freeze for aya::maps::PerCpuValues<T>
impl<T> core::marker::Send for aya::maps::PerCpuValues<T> where T: core::marker::Send
impl<T> core::marker::Sync for aya::maps::PerCpuValues<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for aya::maps::PerCpuValues<T>
impl<T> core::panic::unwind_safe::RefUnwindSafe for aya::maps::PerCpuValues<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for aya::maps::PerCpuValues<T> where T: core::panic::unwind_safe::UnwindSafe
impl<P, T> core::ops::deref::Receiver for aya::maps::PerCpuValues<T> where P: core::ops::deref::Deref<Target = T> + ?core::marker::Sized, T: ?core::marker::Sized
pub type aya::maps::PerCpuValues<T>::Target = T
impl<T, U> core::convert::Into<U> for aya::maps::PerCpuValues<T> where U: core::convert::From<T>
pub fn aya::maps::PerCpuValues<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::PerCpuValues<T> where U: core::convert::Into<T>
pub type aya::maps::PerCpuValues<T>::Error = core::convert::Infallible
pub fn aya::maps::PerCpuValues<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::PerCpuValues<T> where U: core::convert::TryFrom<T>
pub type aya::maps::PerCpuValues<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::PerCpuValues<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::PerCpuValues<T> where T: 'static + ?core::marker::Sized
pub fn aya::maps::PerCpuValues<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::PerCpuValues<T> where T: ?core::marker::Sized
pub fn aya::maps::PerCpuValues<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::PerCpuValues<T> where T: ?core::marker::Sized
pub fn aya::maps::PerCpuValues<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::PerCpuValues<T>
pub fn aya::maps::PerCpuValues<T>::from(t: T) -> T
pub struct aya::maps::PerfEventArray<T>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::perf::PerfEventArray<T>
pub fn aya::maps::perf::PerfEventArray<T>::pin<P: core::convert::AsRef<std::path::Path>>(&self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>> aya::maps::perf::PerfEventArray<T>
pub fn aya::maps::perf::PerfEventArray<T>::open(&mut self, index: u32, page_count: core::option::Option<usize>) -> core::result::Result<aya::maps::perf::PerfEventArrayBuffer<T>, aya::maps::perf::PerfBufferError>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::perf::PerfEventArray<aya::maps::MapData>
pub type aya::maps::perf::PerfEventArray<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::perf::PerfEventArray<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::perf::PerfEventArray<&'a aya::maps::MapData>
pub type aya::maps::perf::PerfEventArray<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::perf::PerfEventArray<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::perf::PerfEventArray<&'a mut aya::maps::MapData>
pub type aya::maps::perf::PerfEventArray<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::perf::PerfEventArray<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T> core::marker::Freeze for aya::maps::perf::PerfEventArray<T>
impl<T> core::marker::Send for aya::maps::perf::PerfEventArray<T> where T: core::marker::Sync + core::marker::Send
impl<T> core::marker::Sync for aya::maps::perf::PerfEventArray<T> where T: core::marker::Sync + core::marker::Send
impl<T> core::marker::Unpin for aya::maps::perf::PerfEventArray<T>
impl<T> core::panic::unwind_safe::RefUnwindSafe for aya::maps::perf::PerfEventArray<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for aya::maps::perf::PerfEventArray<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::perf::PerfEventArray<T> where U: core::convert::From<T>
pub fn aya::maps::perf::PerfEventArray<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::perf::PerfEventArray<T> where U: core::convert::Into<T>
pub type aya::maps::perf::PerfEventArray<T>::Error = core::convert::Infallible
pub fn aya::maps::perf::PerfEventArray<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::perf::PerfEventArray<T> where U: core::convert::TryFrom<T>
pub type aya::maps::perf::PerfEventArray<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::perf::PerfEventArray<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::perf::PerfEventArray<T> where T: 'static + ?core::marker::Sized
pub fn aya::maps::perf::PerfEventArray<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::perf::PerfEventArray<T> where T: ?core::marker::Sized
pub fn aya::maps::perf::PerfEventArray<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::perf::PerfEventArray<T> where T: ?core::marker::Sized
pub fn aya::maps::perf::PerfEventArray<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::perf::PerfEventArray<T>
pub fn aya::maps::perf::PerfEventArray<T>::from(t: T) -> T
pub struct aya::maps::ProgramArray<T>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::ProgramArray<T>
pub fn aya::maps::ProgramArray<T>::indices(&self) -> aya::maps::MapKeys<'_, u32>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::ProgramArray<T>
pub fn aya::maps::ProgramArray<T>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>> aya::maps::ProgramArray<T>
pub fn aya::maps::ProgramArray<T>::clear_index(&mut self, index: &u32) -> core::result::Result<(), aya::maps::MapError>
pub fn aya::maps::ProgramArray<T>::set(&mut self, index: u32, program: &aya::programs::ProgramFd, flags: u64) -> core::result::Result<(), aya::maps::MapError>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::ProgramArray<aya::maps::MapData>
pub type aya::maps::ProgramArray<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::ProgramArray<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::ProgramArray<&'a aya::maps::MapData>
pub type aya::maps::ProgramArray<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::ProgramArray<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::ProgramArray<&'a mut aya::maps::MapData>
pub type aya::maps::ProgramArray<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::ProgramArray<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T> core::marker::Freeze for aya::maps::ProgramArray<T> where T: core::marker::Freeze
impl<T> core::marker::Send for aya::maps::ProgramArray<T> where T: core::marker::Send
impl<T> core::marker::Sync for aya::maps::ProgramArray<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for aya::maps::ProgramArray<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for aya::maps::ProgramArray<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for aya::maps::ProgramArray<T> where T: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::ProgramArray<T> where U: core::convert::From<T>
pub fn aya::maps::ProgramArray<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::ProgramArray<T> where U: core::convert::Into<T>
pub type aya::maps::ProgramArray<T>::Error = core::convert::Infallible
pub fn aya::maps::ProgramArray<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::ProgramArray<T> where U: core::convert::TryFrom<T>
pub type aya::maps::ProgramArray<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::ProgramArray<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::ProgramArray<T> where T: 'static + ?core::marker::Sized
pub fn aya::maps::ProgramArray<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::ProgramArray<T> where T: ?core::marker::Sized
pub fn aya::maps::ProgramArray<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::ProgramArray<T> where T: ?core::marker::Sized
pub fn aya::maps::ProgramArray<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::ProgramArray<T>
pub fn aya::maps::ProgramArray<T>::from(t: T) -> T
pub struct aya::maps::Queue<T, V: aya::Pod>
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::queue::Queue<T, V>
pub fn aya::maps::queue::Queue<T, V>::capacity(&self) -> u32
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::queue::Queue<T, V>
pub fn aya::maps::queue::Queue<T, V>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>, V: aya::Pod> aya::maps::queue::Queue<T, V>
pub fn aya::maps::queue::Queue<T, V>::pop(&mut self, flags: u64) -> core::result::Result<V, aya::maps::MapError>
pub fn aya::maps::queue::Queue<T, V>::push(&mut self, value: impl core::borrow::Borrow<V>, flags: u64) -> core::result::Result<(), aya::maps::MapError>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::queue::Queue<&'a aya::maps::MapData, V>
pub type aya::maps::queue::Queue<&'a aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::queue::Queue<&'a aya::maps::MapData, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::queue::Queue<&'a mut aya::maps::MapData, V>
pub type aya::maps::queue::Queue<&'a mut aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::queue::Queue<&'a mut aya::maps::MapData, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::queue::Queue<aya::maps::MapData, V>
pub type aya::maps::queue::Queue<aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::queue::Queue<aya::maps::MapData, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T, V> core::marker::Freeze for aya::maps::queue::Queue<T, V> where T: core::marker::Freeze
impl<T, V> core::marker::Send for aya::maps::queue::Queue<T, V> where T: core::marker::Send, V: core::marker::Send
impl<T, V> core::marker::Sync for aya::maps::queue::Queue<T, V> where T: core::marker::Sync, V: core::marker::Sync
impl<T, V> core::marker::Unpin for aya::maps::queue::Queue<T, V> where T: core::marker::Unpin, V: core::marker::Unpin
impl<T, V> core::panic::unwind_safe::RefUnwindSafe for aya::maps::queue::Queue<T, V> where T: core::panic::unwind_safe::RefUnwindSafe, V: core::panic::unwind_safe::RefUnwindSafe
impl<T, V> core::panic::unwind_safe::UnwindSafe for aya::maps::queue::Queue<T, V> where T: core::panic::unwind_safe::UnwindSafe, V: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::queue::Queue<T, V> where U: core::convert::From<T>
pub fn aya::maps::queue::Queue<T, V>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::queue::Queue<T, V> where U: core::convert::Into<T>
pub type aya::maps::queue::Queue<T, V>::Error = core::convert::Infallible
pub fn aya::maps::queue::Queue<T, V>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::queue::Queue<T, V> where U: core::convert::TryFrom<T>
pub type aya::maps::queue::Queue<T, V>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::queue::Queue<T, V>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::queue::Queue<T, V> where T: 'static + ?core::marker::Sized
pub fn aya::maps::queue::Queue<T, V>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::queue::Queue<T, V> where T: ?core::marker::Sized
pub fn aya::maps::queue::Queue<T, V>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::queue::Queue<T, V> where T: ?core::marker::Sized
pub fn aya::maps::queue::Queue<T, V>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::queue::Queue<T, V>
pub fn aya::maps::queue::Queue<T, V>::from(t: T) -> T
pub struct aya::maps::RingBuf<T>
impl<T> aya::maps::ring_buf::RingBuf<T>
pub fn aya::maps::ring_buf::RingBuf<T>::next(&mut self) -> core::option::Option<aya::maps::ring_buf::RingBufItem<'_>>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::ring_buf::RingBuf<aya::maps::MapData>
pub type aya::maps::ring_buf::RingBuf<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::ring_buf::RingBuf<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::ring_buf::RingBuf<&'a aya::maps::MapData>
pub type aya::maps::ring_buf::RingBuf<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::ring_buf::RingBuf<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::ring_buf::RingBuf<&'a mut aya::maps::MapData>
pub type aya::maps::ring_buf::RingBuf<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::ring_buf::RingBuf<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T: core::borrow::Borrow<aya::maps::MapData>> std::os::fd::raw::AsRawFd for aya::maps::ring_buf::RingBuf<T>
pub fn aya::maps::ring_buf::RingBuf<T>::as_raw_fd(&self) -> std::os::fd::raw::RawFd
impl<T> core::marker::Freeze for aya::maps::ring_buf::RingBuf<T> where T: core::marker::Freeze
impl<T> core::marker::Send for aya::maps::ring_buf::RingBuf<T> where T: core::marker::Send
impl<T> core::marker::Sync for aya::maps::ring_buf::RingBuf<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for aya::maps::ring_buf::RingBuf<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for aya::maps::ring_buf::RingBuf<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for aya::maps::ring_buf::RingBuf<T> where T: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::ring_buf::RingBuf<T> where U: core::convert::From<T>
pub fn aya::maps::ring_buf::RingBuf<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::ring_buf::RingBuf<T> where U: core::convert::Into<T>
pub type aya::maps::ring_buf::RingBuf<T>::Error = core::convert::Infallible
pub fn aya::maps::ring_buf::RingBuf<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::ring_buf::RingBuf<T> where U: core::convert::TryFrom<T>
pub type aya::maps::ring_buf::RingBuf<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::ring_buf::RingBuf<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::ring_buf::RingBuf<T> where T: 'static + ?core::marker::Sized
pub fn aya::maps::ring_buf::RingBuf<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::ring_buf::RingBuf<T> where T: ?core::marker::Sized
pub fn aya::maps::ring_buf::RingBuf<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::ring_buf::RingBuf<T> where T: ?core::marker::Sized
pub fn aya::maps::ring_buf::RingBuf<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::ring_buf::RingBuf<T>
pub fn aya::maps::ring_buf::RingBuf<T>::from(t: T) -> T
pub struct aya::maps::SockHash<T, K>
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod> aya::maps::SockHash<T, K>
pub fn aya::maps::SockHash<T, K>::fd(&self) -> &aya::maps::sock::SockMapFd
pub fn aya::maps::SockHash<T, K>::get(&self, key: &K, flags: u64) -> core::result::Result<std::os::fd::raw::RawFd, aya::maps::MapError>
pub fn aya::maps::SockHash<T, K>::iter(&self) -> aya::maps::MapIter<'_, K, std::os::fd::raw::RawFd, Self>
pub fn aya::maps::SockHash<T, K>::keys(&self) -> aya::maps::MapKeys<'_, K>
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::SockHash<T, V>
pub fn aya::maps::SockHash<T, V>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>, K: aya::Pod> aya::maps::SockHash<T, K>
pub fn aya::maps::SockHash<T, K>::insert<I: std::os::fd::raw::AsRawFd>(&mut self, key: impl core::borrow::Borrow<K>, value: I, flags: u64) -> core::result::Result<(), aya::maps::MapError>
pub fn aya::maps::SockHash<T, K>::remove(&mut self, key: &K) -> core::result::Result<(), aya::maps::MapError>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::SockHash<&'a aya::maps::MapData, V>
pub type aya::maps::SockHash<&'a aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::SockHash<&'a aya::maps::MapData, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::SockHash<&'a mut aya::maps::MapData, V>
pub type aya::maps::SockHash<&'a mut aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::SockHash<&'a mut aya::maps::MapData, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod> aya::maps::IterableMap<K, i32> for aya::maps::SockHash<T, K>
pub fn aya::maps::SockHash<T, K>::get(&self, key: &K) -> core::result::Result<std::os::fd::raw::RawFd, aya::maps::MapError>
pub fn aya::maps::SockHash<T, K>::map(&self) -> &aya::maps::MapData
impl<V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::SockHash<aya::maps::MapData, V>
pub type aya::maps::SockHash<aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::SockHash<aya::maps::MapData, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T, K> core::marker::Freeze for aya::maps::SockHash<T, K> where T: core::marker::Freeze
impl<T, K> core::marker::Send for aya::maps::SockHash<T, K> where T: core::marker::Send, K: core::marker::Send
impl<T, K> core::marker::Sync for aya::maps::SockHash<T, K> where T: core::marker::Sync, K: core::marker::Sync
impl<T, K> core::marker::Unpin for aya::maps::SockHash<T, K> where T: core::marker::Unpin, K: core::marker::Unpin
impl<T, K> core::panic::unwind_safe::RefUnwindSafe for aya::maps::SockHash<T, K> where T: core::panic::unwind_safe::RefUnwindSafe, K: core::panic::unwind_safe::RefUnwindSafe
impl<T, K> core::panic::unwind_safe::UnwindSafe for aya::maps::SockHash<T, K> where T: core::panic::unwind_safe::UnwindSafe, K: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::SockHash<T, K> where U: core::convert::From<T>
pub fn aya::maps::SockHash<T, K>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::SockHash<T, K> where U: core::convert::Into<T>
pub type aya::maps::SockHash<T, K>::Error = core::convert::Infallible
pub fn aya::maps::SockHash<T, K>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::SockHash<T, K> where U: core::convert::TryFrom<T>
pub type aya::maps::SockHash<T, K>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::SockHash<T, K>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::SockHash<T, K> where T: 'static + ?core::marker::Sized
pub fn aya::maps::SockHash<T, K>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::SockHash<T, K> where T: ?core::marker::Sized
pub fn aya::maps::SockHash<T, K>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::SockHash<T, K> where T: ?core::marker::Sized
pub fn aya::maps::SockHash<T, K>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::SockHash<T, K>
pub fn aya::maps::SockHash<T, K>::from(t: T) -> T
pub struct aya::maps::SockMap<T>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::SockMap<T>
pub fn aya::maps::SockMap<T>::fd(&self) -> &aya::maps::sock::SockMapFd
pub fn aya::maps::SockMap<T>::indices(&self) -> aya::maps::MapKeys<'_, u32>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::SockMap<T>
pub fn aya::maps::SockMap<T>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>> aya::maps::SockMap<T>
pub fn aya::maps::SockMap<T>::clear_index(&mut self, index: &u32) -> core::result::Result<(), aya::maps::MapError>
pub fn aya::maps::SockMap<T>::set<I: std::os::fd::raw::AsRawFd>(&mut self, index: u32, socket: &I, flags: u64) -> core::result::Result<(), aya::maps::MapError>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::SockMap<aya::maps::MapData>
pub type aya::maps::SockMap<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::SockMap<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::SockMap<&'a aya::maps::MapData>
pub type aya::maps::SockMap<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::SockMap<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::SockMap<&'a mut aya::maps::MapData>
pub type aya::maps::SockMap<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::SockMap<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T> core::marker::Freeze for aya::maps::SockMap<T> where T: core::marker::Freeze
impl<T> core::marker::Send for aya::maps::SockMap<T> where T: core::marker::Send
impl<T> core::marker::Sync for aya::maps::SockMap<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for aya::maps::SockMap<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for aya::maps::SockMap<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for aya::maps::SockMap<T> where T: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::SockMap<T> where U: core::convert::From<T>
pub fn aya::maps::SockMap<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::SockMap<T> where U: core::convert::Into<T>
pub type aya::maps::SockMap<T>::Error = core::convert::Infallible
pub fn aya::maps::SockMap<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::SockMap<T> where U: core::convert::TryFrom<T>
pub type aya::maps::SockMap<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::SockMap<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::SockMap<T> where T: 'static + ?core::marker::Sized
pub fn aya::maps::SockMap<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::SockMap<T> where T: ?core::marker::Sized
pub fn aya::maps::SockMap<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::SockMap<T> where T: ?core::marker::Sized
pub fn aya::maps::SockMap<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::SockMap<T>
pub fn aya::maps::SockMap<T>::from(t: T) -> T
pub struct aya::maps::Stack<T, V: aya::Pod>
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::stack::Stack<T, V>
pub fn aya::maps::stack::Stack<T, V>::capacity(&self) -> u32
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::stack::Stack<T, V>
pub fn aya::maps::stack::Stack<T, V>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>, V: aya::Pod> aya::maps::stack::Stack<T, V>
pub fn aya::maps::stack::Stack<T, V>::pop(&mut self, flags: u64) -> core::result::Result<V, aya::maps::MapError>
pub fn aya::maps::stack::Stack<T, V>::push(&mut self, value: impl core::borrow::Borrow<V>, flags: u64) -> core::result::Result<(), aya::maps::MapError>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::stack::Stack<&'a aya::maps::MapData, V>
pub type aya::maps::stack::Stack<&'a aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::stack::Stack<&'a aya::maps::MapData, V>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, V: aya::Pod> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::stack::Stack<&'a mut aya::maps::MapData, V>
pub type aya::maps::stack::Stack<&'a mut aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::stack::Stack<&'a mut aya::maps::MapData, V>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<V: aya::Pod> core::convert::TryFrom<aya::maps::Map> for aya::maps::stack::Stack<aya::maps::MapData, V>
pub type aya::maps::stack::Stack<aya::maps::MapData, V>::Error = aya::maps::MapError
pub fn aya::maps::stack::Stack<aya::maps::MapData, V>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T, V> core::marker::Freeze for aya::maps::stack::Stack<T, V> where T: core::marker::Freeze
impl<T, V> core::marker::Send for aya::maps::stack::Stack<T, V> where T: core::marker::Send, V: core::marker::Send
impl<T, V> core::marker::Sync for aya::maps::stack::Stack<T, V> where T: core::marker::Sync, V: core::marker::Sync
impl<T, V> core::marker::Unpin for aya::maps::stack::Stack<T, V> where T: core::marker::Unpin, V: core::marker::Unpin
impl<T, V> core::panic::unwind_safe::RefUnwindSafe for aya::maps::stack::Stack<T, V> where T: core::panic::unwind_safe::RefUnwindSafe, V: core::panic::unwind_safe::RefUnwindSafe
impl<T, V> core::panic::unwind_safe::UnwindSafe for aya::maps::stack::Stack<T, V> where T: core::panic::unwind_safe::UnwindSafe, V: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::stack::Stack<T, V> where U: core::convert::From<T>
pub fn aya::maps::stack::Stack<T, V>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::stack::Stack<T, V> where U: core::convert::Into<T>
pub type aya::maps::stack::Stack<T, V>::Error = core::convert::Infallible
pub fn aya::maps::stack::Stack<T, V>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::stack::Stack<T, V> where U: core::convert::TryFrom<T>
pub type aya::maps::stack::Stack<T, V>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::stack::Stack<T, V>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::stack::Stack<T, V> where T: 'static + ?core::marker::Sized
pub fn aya::maps::stack::Stack<T, V>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::stack::Stack<T, V> where T: ?core::marker::Sized
pub fn aya::maps::stack::Stack<T, V>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::stack::Stack<T, V> where T: ?core::marker::Sized
pub fn aya::maps::stack::Stack<T, V>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::stack::Stack<T, V>
pub fn aya::maps::stack::Stack<T, V>::from(t: T) -> T
pub struct aya::maps::StackTraceMap<T>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::stack_trace::StackTraceMap<T>
pub fn aya::maps::stack_trace::StackTraceMap<T>::get(&self, stack_id: &u32, flags: u64) -> core::result::Result<aya::maps::stack_trace::StackTrace, aya::maps::MapError>
pub fn aya::maps::stack_trace::StackTraceMap<T>::iter(&self) -> aya::maps::MapIter<'_, u32, aya::maps::stack_trace::StackTrace, Self>
pub fn aya::maps::stack_trace::StackTraceMap<T>::stack_ids(&self) -> aya::maps::MapKeys<'_, u32>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::stack_trace::StackTraceMap<T>
pub fn aya::maps::stack_trace::StackTraceMap<T>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>> aya::maps::stack_trace::StackTraceMap<T>
pub fn aya::maps::stack_trace::StackTraceMap<T>::remove(&mut self, stack_id: &u32) -> core::result::Result<(), aya::maps::MapError>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::stack_trace::StackTraceMap<aya::maps::MapData>
pub type aya::maps::stack_trace::StackTraceMap<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::stack_trace::StackTraceMap<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a, T: core::borrow::Borrow<aya::maps::MapData>> core::iter::traits::collect::IntoIterator for &'a aya::maps::stack_trace::StackTraceMap<T>
pub type &'a aya::maps::stack_trace::StackTraceMap<T>::IntoIter = aya::maps::MapIter<'a, u32, aya::maps::stack_trace::StackTrace, aya::maps::stack_trace::StackTraceMap<T>>
pub type &'a aya::maps::stack_trace::StackTraceMap<T>::Item = core::result::Result<(u32, aya::maps::stack_trace::StackTrace), aya::maps::MapError>
pub fn &'a aya::maps::stack_trace::StackTraceMap<T>::into_iter(self) -> Self::IntoIter
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::stack_trace::StackTraceMap<&'a aya::maps::MapData>
pub type aya::maps::stack_trace::StackTraceMap<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::stack_trace::StackTraceMap<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::stack_trace::StackTraceMap<&'a mut aya::maps::MapData>
pub type aya::maps::stack_trace::StackTraceMap<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::stack_trace::StackTraceMap<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::IterableMap<u32, aya::maps::stack_trace::StackTrace> for aya::maps::stack_trace::StackTraceMap<T>
pub fn aya::maps::stack_trace::StackTraceMap<T>::get(&self, index: &u32) -> core::result::Result<aya::maps::stack_trace::StackTrace, aya::maps::MapError>
pub fn aya::maps::stack_trace::StackTraceMap<T>::map(&self) -> &aya::maps::MapData
impl<T: core::fmt::Debug> core::fmt::Debug for aya::maps::stack_trace::StackTraceMap<T>
pub fn aya::maps::stack_trace::StackTraceMap<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T> core::marker::Freeze for aya::maps::stack_trace::StackTraceMap<T> where T: core::marker::Freeze
impl<T> core::marker::Send for aya::maps::stack_trace::StackTraceMap<T> where T: core::marker::Send
impl<T> core::marker::Sync for aya::maps::stack_trace::StackTraceMap<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for aya::maps::stack_trace::StackTraceMap<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for aya::maps::stack_trace::StackTraceMap<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for aya::maps::stack_trace::StackTraceMap<T> where T: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::stack_trace::StackTraceMap<T> where U: core::convert::From<T>
pub fn aya::maps::stack_trace::StackTraceMap<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::stack_trace::StackTraceMap<T> where U: core::convert::Into<T>
pub type aya::maps::stack_trace::StackTraceMap<T>::Error = core::convert::Infallible
pub fn aya::maps::stack_trace::StackTraceMap<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::stack_trace::StackTraceMap<T> where U: core::convert::TryFrom<T>
pub type aya::maps::stack_trace::StackTraceMap<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::stack_trace::StackTraceMap<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::stack_trace::StackTraceMap<T> where T: 'static + ?core::marker::Sized
pub fn aya::maps::stack_trace::StackTraceMap<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::stack_trace::StackTraceMap<T> where T: ?core::marker::Sized
pub fn aya::maps::stack_trace::StackTraceMap<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::stack_trace::StackTraceMap<T> where T: ?core::marker::Sized
pub fn aya::maps::stack_trace::StackTraceMap<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::stack_trace::StackTraceMap<T>
pub fn aya::maps::stack_trace::StackTraceMap<T>::from(t: T) -> T
pub struct aya::maps::XskMap<T>
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::XskMap<T>
pub fn aya::maps::XskMap<T>::len(&self) -> u32
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::XskMap<T>
pub fn aya::maps::XskMap<T>::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<(), aya::pin::PinError>
impl<T: core::borrow::BorrowMut<aya::maps::MapData>> aya::maps::XskMap<T>
pub fn aya::maps::XskMap<T>::set(&mut self, index: u32, socket_fd: impl std::os::fd::raw::AsRawFd, flags: u64) -> core::result::Result<(), aya::maps::MapError>
impl core::convert::TryFrom<aya::maps::Map> for aya::maps::XskMap<aya::maps::MapData>
pub type aya::maps::XskMap<aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::XskMap<aya::maps::MapData>::try_from(map: aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a aya::maps::Map> for aya::maps::XskMap<&'a aya::maps::MapData>
pub type aya::maps::XskMap<&'a aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::XskMap<&'a aya::maps::MapData>::try_from(map: &'a aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<'a> core::convert::TryFrom<&'a mut aya::maps::Map> for aya::maps::XskMap<&'a mut aya::maps::MapData>
pub type aya::maps::XskMap<&'a mut aya::maps::MapData>::Error = aya::maps::MapError
pub fn aya::maps::XskMap<&'a mut aya::maps::MapData>::try_from(map: &'a mut aya::maps::Map) -> core::result::Result<Self, Self::Error>
impl<T> core::marker::Freeze for aya::maps::XskMap<T> where T: core::marker::Freeze
impl<T> core::marker::Send for aya::maps::XskMap<T> where T: core::marker::Send
impl<T> core::marker::Sync for aya::maps::XskMap<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for aya::maps::XskMap<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for aya::maps::XskMap<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for aya::maps::XskMap<T> where T: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for aya::maps::XskMap<T> where U: core::convert::From<T>
pub fn aya::maps::XskMap<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::maps::XskMap<T> where U: core::convert::Into<T>
pub type aya::maps::XskMap<T>::Error = core::convert::Infallible
pub fn aya::maps::XskMap<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::maps::XskMap<T> where U: core::convert::TryFrom<T>
pub type aya::maps::XskMap<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::maps::XskMap<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::maps::XskMap<T> where T: 'static + ?core::marker::Sized
pub fn aya::maps::XskMap<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::maps::XskMap<T> where T: ?core::marker::Sized
pub fn aya::maps::XskMap<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::maps::XskMap<T> where T: ?core::marker::Sized
pub fn aya::maps::XskMap<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::maps::XskMap<T>
pub fn aya::maps::XskMap<T>::from(t: T) -> T
pub trait aya::maps::IterableMap<K: aya::Pod, V>
pub fn aya::maps::IterableMap::get(&self, key: &K) -> core::result::Result<V, aya::maps::MapError>
pub fn aya::maps::IterableMap::map(&self) -> &aya::maps::MapData
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::IterableMap<K, V> for aya::maps::hash_map::HashMap<T, K, V>
pub fn aya::maps::hash_map::HashMap<T, K, V>::get(&self, key: &K) -> core::result::Result<V, aya::maps::MapError>
pub fn aya::maps::hash_map::HashMap<T, K, V>::map(&self) -> &aya::maps::MapData
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::IterableMap<K, aya::maps::PerCpuValues<V>> for aya::maps::hash_map::PerCpuHashMap<T, K, V>
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::get(&self, key: &K) -> core::result::Result<aya::maps::PerCpuValues<V>, aya::maps::MapError>
pub fn aya::maps::hash_map::PerCpuHashMap<T, K, V>::map(&self) -> &aya::maps::MapData
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod, V: aya::Pod> aya::maps::IterableMap<aya::maps::lpm_trie::Key<K>, V> for aya::maps::lpm_trie::LpmTrie<T, K, V>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::get(&self, key: &aya::maps::lpm_trie::Key<K>) -> core::result::Result<V, aya::maps::MapError>
pub fn aya::maps::lpm_trie::LpmTrie<T, K, V>::map(&self) -> &aya::maps::MapData
impl<T: core::borrow::Borrow<aya::maps::MapData>, K: aya::Pod> aya::maps::IterableMap<K, i32> for aya::maps::SockHash<T, K>
pub fn aya::maps::SockHash<T, K>::get(&self, key: &K) -> core::result::Result<std::os::fd::raw::RawFd, aya::maps::MapError>
pub fn aya::maps::SockHash<T, K>::map(&self) -> &aya::maps::MapData
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::IterableMap<u32, V> for aya::maps::array::Array<T, V>
pub fn aya::maps::array::Array<T, V>::get(&self, index: &u32) -> core::result::Result<V, aya::maps::MapError>
pub fn aya::maps::array::Array<T, V>::map(&self) -> &aya::maps::MapData
impl<T: core::borrow::Borrow<aya::maps::MapData>, V: aya::Pod> aya::maps::IterableMap<u32, aya::maps::PerCpuValues<V>> for aya::maps::PerCpuArray<T, V>
pub fn aya::maps::PerCpuArray<T, V>::get(&self, index: &u32) -> core::result::Result<aya::maps::PerCpuValues<V>, aya::maps::MapError>
pub fn aya::maps::PerCpuArray<T, V>::map(&self) -> &aya::maps::MapData
impl<T: core::borrow::Borrow<aya::maps::MapData>> aya::maps::IterableMap<u32, aya::maps::stack_trace::StackTrace> for aya::maps::stack_trace::StackTraceMap<T>
pub fn aya::maps::stack_trace::StackTraceMap<T>::get(&self, index: &u32) -> core::result::Result<aya::maps::stack_trace::StackTrace, aya::maps::MapError>
pub fn aya::maps::stack_trace::StackTraceMap<T>::map(&self) -> &aya::maps::MapData
pub fn aya::maps::loaded_maps() -> impl core::iter::traits::iterator::Iterator<Item = core::result::Result<aya::maps::MapInfo, aya::maps::MapError>>
pub mod aya::pin
pub enum aya::pin::PinError
pub aya::pin::PinError::InvalidPinPath
pub aya::pin::PinError::InvalidPinPath::error: alloc::ffi::c_str::NulError
pub aya::pin::PinError::InvalidPinPath::path: std::path::PathBuf
pub aya::pin::PinError::NoFd
pub aya::pin::PinError::NoFd::name: alloc::string::String
pub aya::pin::PinError::SyscallError(aya::sys::SyscallError)
impl core::convert::From<aya::sys::SyscallError> for aya::pin::PinError
pub fn aya::pin::PinError::from(source: aya::sys::SyscallError) -> Self
impl core::error::Error for aya::pin::PinError
pub fn aya::pin::PinError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Debug for aya::pin::PinError
pub fn aya::pin::PinError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for aya::pin::PinError
pub fn aya::pin::PinError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::pin::PinError
impl core::marker::Send for aya::pin::PinError
impl core::marker::Sync for aya::pin::PinError
impl core::marker::Unpin for aya::pin::PinError
impl !core::panic::unwind_safe::RefUnwindSafe for aya::pin::PinError
impl !core::panic::unwind_safe::UnwindSafe for aya::pin::PinError
impl<T, U> core::convert::Into<U> for aya::pin::PinError where U: core::convert::From<T>
pub fn aya::pin::PinError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::pin::PinError where U: core::convert::Into<T>
pub type aya::pin::PinError::Error = core::convert::Infallible
pub fn aya::pin::PinError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::pin::PinError where U: core::convert::TryFrom<T>
pub type aya::pin::PinError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::pin::PinError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for aya::pin::PinError where T: core::fmt::Display + ?core::marker::Sized
pub fn aya::pin::PinError::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for aya::pin::PinError where T: 'static + ?core::marker::Sized
pub fn aya::pin::PinError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::pin::PinError where T: ?core::marker::Sized
pub fn aya::pin::PinError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::pin::PinError where T: ?core::marker::Sized
pub fn aya::pin::PinError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::pin::PinError
pub fn aya::pin::PinError::from(t: T) -> T
pub mod aya::programs
pub use aya::programs::CgroupSockAddrAttachType
pub use aya::programs::CgroupSockAttachType
pub use aya::programs::CgroupSockoptAttachType
pub mod aya::programs::cgroup_device
pub struct aya::programs::cgroup_device::CgroupDevice
impl aya::programs::cgroup_device::CgroupDevice
pub fn aya::programs::cgroup_device::CgroupDevice::attach<T: std::os::fd::owned::AsFd>(&mut self, cgroup: T, mode: aya::programs::links::CgroupAttachMode) -> core::result::Result<aya::programs::cgroup_device::CgroupDeviceLinkId, aya::programs::ProgramError>
pub fn aya::programs::cgroup_device::CgroupDevice::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_device::CgroupDevice::query<T: std::os::fd::owned::AsFd>(target_fd: T) -> core::result::Result<alloc::vec::Vec<aya::programs::cgroup_device::CgroupDeviceLink>, aya::programs::ProgramError>
impl aya::programs::cgroup_device::CgroupDevice
pub fn aya::programs::cgroup_device::CgroupDevice::detach(&mut self, link_id: aya::programs::cgroup_device::CgroupDeviceLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_device::CgroupDevice::take_link(&mut self, link_id: aya::programs::cgroup_device::CgroupDeviceLinkId) -> core::result::Result<aya::programs::cgroup_device::CgroupDeviceLink, aya::programs::ProgramError>
impl aya::programs::cgroup_device::CgroupDevice
pub fn aya::programs::cgroup_device::CgroupDevice::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::cgroup_device::CgroupDevice
pub fn aya::programs::cgroup_device::CgroupDevice::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::cgroup_device::CgroupDevice
pub fn aya::programs::cgroup_device::CgroupDevice::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::cgroup_device::CgroupDevice
pub fn aya::programs::cgroup_device::CgroupDevice::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::cgroup_device::CgroupDevice::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::cgroup_device::CgroupDevice
pub fn aya::programs::cgroup_device::CgroupDevice::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::cgroup_device::CgroupDevice
pub fn aya::programs::cgroup_device::CgroupDevice::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::cgroup_device::CgroupDevice
pub fn aya::programs::cgroup_device::CgroupDevice::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::cgroup_device::CgroupDevice
pub type &'a aya::programs::cgroup_device::CgroupDevice::Error = aya::programs::ProgramError
pub fn &'a aya::programs::cgroup_device::CgroupDevice::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::cgroup_device::CgroupDevice, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::cgroup_device::CgroupDevice
pub type &'a mut aya::programs::cgroup_device::CgroupDevice::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::cgroup_device::CgroupDevice::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::cgroup_device::CgroupDevice, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::cgroup_device::CgroupDevice
impl core::marker::Send for aya::programs::cgroup_device::CgroupDevice
impl core::marker::Sync for aya::programs::cgroup_device::CgroupDevice
impl core::marker::Unpin for aya::programs::cgroup_device::CgroupDevice
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_device::CgroupDevice
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_device::CgroupDevice
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_device::CgroupDevice where U: core::convert::From<T>
pub fn aya::programs::cgroup_device::CgroupDevice::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_device::CgroupDevice where U: core::convert::Into<T>
pub type aya::programs::cgroup_device::CgroupDevice::Error = core::convert::Infallible
pub fn aya::programs::cgroup_device::CgroupDevice::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_device::CgroupDevice where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_device::CgroupDevice::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_device::CgroupDevice::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::cgroup_device::CgroupDevice where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_device::CgroupDevice::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_device::CgroupDevice where T: ?core::marker::Sized
pub fn aya::programs::cgroup_device::CgroupDevice::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_device::CgroupDevice where T: ?core::marker::Sized
pub fn aya::programs::cgroup_device::CgroupDevice::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::cgroup_device::CgroupDevice
pub fn aya::programs::cgroup_device::CgroupDevice::from(t: T) -> T
pub struct aya::programs::cgroup_device::CgroupDeviceLink(_)
impl aya::programs::links::Link for aya::programs::cgroup_device::CgroupDeviceLink
pub type aya::programs::cgroup_device::CgroupDeviceLink::Id = aya::programs::cgroup_device::CgroupDeviceLinkId
pub fn aya::programs::cgroup_device::CgroupDeviceLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_device::CgroupDeviceLink::id(&self) -> Self::Id
impl core::fmt::Debug for aya::programs::cgroup_device::CgroupDeviceLink
pub fn aya::programs::cgroup_device::CgroupDeviceLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::cgroup_device::CgroupDeviceLink
pub fn aya::programs::cgroup_device::CgroupDeviceLink::drop(&mut self)
impl core::marker::Freeze for aya::programs::cgroup_device::CgroupDeviceLink
impl core::marker::Send for aya::programs::cgroup_device::CgroupDeviceLink
impl core::marker::Sync for aya::programs::cgroup_device::CgroupDeviceLink
impl core::marker::Unpin for aya::programs::cgroup_device::CgroupDeviceLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_device::CgroupDeviceLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_device::CgroupDeviceLink
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_device::CgroupDeviceLink where U: core::convert::From<T>
pub fn aya::programs::cgroup_device::CgroupDeviceLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_device::CgroupDeviceLink where U: core::convert::Into<T>
pub type aya::programs::cgroup_device::CgroupDeviceLink::Error = core::convert::Infallible
pub fn aya::programs::cgroup_device::CgroupDeviceLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_device::CgroupDeviceLink where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_device::CgroupDeviceLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_device::CgroupDeviceLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::cgroup_device::CgroupDeviceLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_device::CgroupDeviceLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_device::CgroupDeviceLink where T: ?core::marker::Sized
pub fn aya::programs::cgroup_device::CgroupDeviceLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_device::CgroupDeviceLink where T: ?core::marker::Sized
pub fn aya::programs::cgroup_device::CgroupDeviceLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::cgroup_device::CgroupDeviceLink
pub fn aya::programs::cgroup_device::CgroupDeviceLink::from(t: T) -> T
pub struct aya::programs::cgroup_device::CgroupDeviceLinkId(_)
impl core::cmp::Eq for aya::programs::cgroup_device::CgroupDeviceLinkId
impl core::cmp::PartialEq for aya::programs::cgroup_device::CgroupDeviceLinkId
pub fn aya::programs::cgroup_device::CgroupDeviceLinkId::eq(&self, other: &aya::programs::cgroup_device::CgroupDeviceLinkId) -> bool
impl core::fmt::Debug for aya::programs::cgroup_device::CgroupDeviceLinkId
pub fn aya::programs::cgroup_device::CgroupDeviceLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::cgroup_device::CgroupDeviceLinkId
pub fn aya::programs::cgroup_device::CgroupDeviceLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::cgroup_device::CgroupDeviceLinkId
impl core::marker::Freeze for aya::programs::cgroup_device::CgroupDeviceLinkId
impl core::marker::Send for aya::programs::cgroup_device::CgroupDeviceLinkId
impl core::marker::Sync for aya::programs::cgroup_device::CgroupDeviceLinkId
impl core::marker::Unpin for aya::programs::cgroup_device::CgroupDeviceLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_device::CgroupDeviceLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_device::CgroupDeviceLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::cgroup_device::CgroupDeviceLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::cgroup_device::CgroupDeviceLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_device::CgroupDeviceLinkId where U: core::convert::From<T>
pub fn aya::programs::cgroup_device::CgroupDeviceLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_device::CgroupDeviceLinkId where U: core::convert::Into<T>
pub type aya::programs::cgroup_device::CgroupDeviceLinkId::Error = core::convert::Infallible
pub fn aya::programs::cgroup_device::CgroupDeviceLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_device::CgroupDeviceLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_device::CgroupDeviceLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_device::CgroupDeviceLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::cgroup_device::CgroupDeviceLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_device::CgroupDeviceLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_device::CgroupDeviceLinkId where T: ?core::marker::Sized
pub fn aya::programs::cgroup_device::CgroupDeviceLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_device::CgroupDeviceLinkId where T: ?core::marker::Sized
pub fn aya::programs::cgroup_device::CgroupDeviceLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::cgroup_device::CgroupDeviceLinkId
pub fn aya::programs::cgroup_device::CgroupDeviceLinkId::from(t: T) -> T
pub mod aya::programs::cgroup_skb
pub enum aya::programs::cgroup_skb::CgroupSkbAttachType
pub aya::programs::cgroup_skb::CgroupSkbAttachType::Egress
pub aya::programs::cgroup_skb::CgroupSkbAttachType::Ingress
impl core::clone::Clone for aya::programs::cgroup_skb::CgroupSkbAttachType
pub fn aya::programs::cgroup_skb::CgroupSkbAttachType::clone(&self) -> aya::programs::cgroup_skb::CgroupSkbAttachType
impl core::fmt::Debug for aya::programs::cgroup_skb::CgroupSkbAttachType
pub fn aya::programs::cgroup_skb::CgroupSkbAttachType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for aya::programs::cgroup_skb::CgroupSkbAttachType
impl core::marker::Freeze for aya::programs::cgroup_skb::CgroupSkbAttachType
impl core::marker::Send for aya::programs::cgroup_skb::CgroupSkbAttachType
impl core::marker::Sync for aya::programs::cgroup_skb::CgroupSkbAttachType
impl core::marker::Unpin for aya::programs::cgroup_skb::CgroupSkbAttachType
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_skb::CgroupSkbAttachType
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_skb::CgroupSkbAttachType
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_skb::CgroupSkbAttachType where U: core::convert::From<T>
pub fn aya::programs::cgroup_skb::CgroupSkbAttachType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_skb::CgroupSkbAttachType where U: core::convert::Into<T>
pub type aya::programs::cgroup_skb::CgroupSkbAttachType::Error = core::convert::Infallible
pub fn aya::programs::cgroup_skb::CgroupSkbAttachType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_skb::CgroupSkbAttachType where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_skb::CgroupSkbAttachType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_skb::CgroupSkbAttachType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for aya::programs::cgroup_skb::CgroupSkbAttachType where T: core::clone::Clone
pub type aya::programs::cgroup_skb::CgroupSkbAttachType::Owned = T
pub fn aya::programs::cgroup_skb::CgroupSkbAttachType::clone_into(&self, target: &mut T)
pub fn aya::programs::cgroup_skb::CgroupSkbAttachType::to_owned(&self) -> T
impl<T> core::any::Any for aya::programs::cgroup_skb::CgroupSkbAttachType where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_skb::CgroupSkbAttachType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_skb::CgroupSkbAttachType where T: ?core::marker::Sized
pub fn aya::programs::cgroup_skb::CgroupSkbAttachType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_skb::CgroupSkbAttachType where T: ?core::marker::Sized
pub fn aya::programs::cgroup_skb::CgroupSkbAttachType::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for aya::programs::cgroup_skb::CgroupSkbAttachType where T: core::clone::Clone
pub unsafe fn aya::programs::cgroup_skb::CgroupSkbAttachType::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for aya::programs::cgroup_skb::CgroupSkbAttachType
pub fn aya::programs::cgroup_skb::CgroupSkbAttachType::from(t: T) -> T
pub struct aya::programs::cgroup_skb::CgroupSkb
impl aya::programs::cgroup_skb::CgroupSkb
pub fn aya::programs::cgroup_skb::CgroupSkb::attach<T: std::os::fd::owned::AsFd>(&mut self, cgroup: T, attach_type: aya::programs::cgroup_skb::CgroupSkbAttachType, mode: aya::programs::links::CgroupAttachMode) -> core::result::Result<aya::programs::cgroup_skb::CgroupSkbLinkId, aya::programs::ProgramError>
pub fn aya::programs::cgroup_skb::CgroupSkb::expected_attach_type(&self) -> &core::option::Option<aya::programs::cgroup_skb::CgroupSkbAttachType>
pub fn aya::programs::cgroup_skb::CgroupSkb::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P, expected_attach_type: aya::programs::cgroup_skb::CgroupSkbAttachType) -> core::result::Result<Self, aya::programs::ProgramError>
pub fn aya::programs::cgroup_skb::CgroupSkb::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::cgroup_skb::CgroupSkb
pub fn aya::programs::cgroup_skb::CgroupSkb::detach(&mut self, link_id: aya::programs::cgroup_skb::CgroupSkbLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_skb::CgroupSkb::take_link(&mut self, link_id: aya::programs::cgroup_skb::CgroupSkbLinkId) -> core::result::Result<aya::programs::cgroup_skb::CgroupSkbLink, aya::programs::ProgramError>
impl aya::programs::cgroup_skb::CgroupSkb
pub fn aya::programs::cgroup_skb::CgroupSkb::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::cgroup_skb::CgroupSkb
pub fn aya::programs::cgroup_skb::CgroupSkb::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::cgroup_skb::CgroupSkb
pub fn aya::programs::cgroup_skb::CgroupSkb::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::cgroup_skb::CgroupSkb::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::cgroup_skb::CgroupSkb
pub fn aya::programs::cgroup_skb::CgroupSkb::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::cgroup_skb::CgroupSkb
pub fn aya::programs::cgroup_skb::CgroupSkb::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::cgroup_skb::CgroupSkb
pub fn aya::programs::cgroup_skb::CgroupSkb::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::cgroup_skb::CgroupSkb
pub type &'a aya::programs::cgroup_skb::CgroupSkb::Error = aya::programs::ProgramError
pub fn &'a aya::programs::cgroup_skb::CgroupSkb::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::cgroup_skb::CgroupSkb, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::cgroup_skb::CgroupSkb
pub type &'a mut aya::programs::cgroup_skb::CgroupSkb::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::cgroup_skb::CgroupSkb::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::cgroup_skb::CgroupSkb, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::cgroup_skb::CgroupSkb
impl core::marker::Send for aya::programs::cgroup_skb::CgroupSkb
impl core::marker::Sync for aya::programs::cgroup_skb::CgroupSkb
impl core::marker::Unpin for aya::programs::cgroup_skb::CgroupSkb
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_skb::CgroupSkb
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_skb::CgroupSkb
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_skb::CgroupSkb where U: core::convert::From<T>
pub fn aya::programs::cgroup_skb::CgroupSkb::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_skb::CgroupSkb where U: core::convert::Into<T>
pub type aya::programs::cgroup_skb::CgroupSkb::Error = core::convert::Infallible
pub fn aya::programs::cgroup_skb::CgroupSkb::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_skb::CgroupSkb where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_skb::CgroupSkb::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_skb::CgroupSkb::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::cgroup_skb::CgroupSkb where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_skb::CgroupSkb::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_skb::CgroupSkb where T: ?core::marker::Sized
pub fn aya::programs::cgroup_skb::CgroupSkb::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_skb::CgroupSkb where T: ?core::marker::Sized
pub fn aya::programs::cgroup_skb::CgroupSkb::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::cgroup_skb::CgroupSkb
pub fn aya::programs::cgroup_skb::CgroupSkb::from(t: T) -> T
pub struct aya::programs::cgroup_skb::CgroupSkbLink(_)
impl aya::programs::links::Link for aya::programs::cgroup_skb::CgroupSkbLink
pub type aya::programs::cgroup_skb::CgroupSkbLink::Id = aya::programs::cgroup_skb::CgroupSkbLinkId
pub fn aya::programs::cgroup_skb::CgroupSkbLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_skb::CgroupSkbLink::id(&self) -> Self::Id
impl core::fmt::Debug for aya::programs::cgroup_skb::CgroupSkbLink
pub fn aya::programs::cgroup_skb::CgroupSkbLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::cgroup_skb::CgroupSkbLink
pub fn aya::programs::cgroup_skb::CgroupSkbLink::drop(&mut self)
impl core::marker::Freeze for aya::programs::cgroup_skb::CgroupSkbLink
impl core::marker::Send for aya::programs::cgroup_skb::CgroupSkbLink
impl core::marker::Sync for aya::programs::cgroup_skb::CgroupSkbLink
impl core::marker::Unpin for aya::programs::cgroup_skb::CgroupSkbLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_skb::CgroupSkbLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_skb::CgroupSkbLink
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_skb::CgroupSkbLink where U: core::convert::From<T>
pub fn aya::programs::cgroup_skb::CgroupSkbLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_skb::CgroupSkbLink where U: core::convert::Into<T>
pub type aya::programs::cgroup_skb::CgroupSkbLink::Error = core::convert::Infallible
pub fn aya::programs::cgroup_skb::CgroupSkbLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_skb::CgroupSkbLink where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_skb::CgroupSkbLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_skb::CgroupSkbLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::cgroup_skb::CgroupSkbLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_skb::CgroupSkbLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_skb::CgroupSkbLink where T: ?core::marker::Sized
pub fn aya::programs::cgroup_skb::CgroupSkbLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_skb::CgroupSkbLink where T: ?core::marker::Sized
pub fn aya::programs::cgroup_skb::CgroupSkbLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::cgroup_skb::CgroupSkbLink
pub fn aya::programs::cgroup_skb::CgroupSkbLink::from(t: T) -> T
pub struct aya::programs::cgroup_skb::CgroupSkbLinkId(_)
impl core::cmp::Eq for aya::programs::cgroup_skb::CgroupSkbLinkId
impl core::cmp::PartialEq for aya::programs::cgroup_skb::CgroupSkbLinkId
pub fn aya::programs::cgroup_skb::CgroupSkbLinkId::eq(&self, other: &aya::programs::cgroup_skb::CgroupSkbLinkId) -> bool
impl core::fmt::Debug for aya::programs::cgroup_skb::CgroupSkbLinkId
pub fn aya::programs::cgroup_skb::CgroupSkbLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::cgroup_skb::CgroupSkbLinkId
pub fn aya::programs::cgroup_skb::CgroupSkbLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::cgroup_skb::CgroupSkbLinkId
impl core::marker::Freeze for aya::programs::cgroup_skb::CgroupSkbLinkId
impl core::marker::Send for aya::programs::cgroup_skb::CgroupSkbLinkId
impl core::marker::Sync for aya::programs::cgroup_skb::CgroupSkbLinkId
impl core::marker::Unpin for aya::programs::cgroup_skb::CgroupSkbLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_skb::CgroupSkbLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_skb::CgroupSkbLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::cgroup_skb::CgroupSkbLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::cgroup_skb::CgroupSkbLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_skb::CgroupSkbLinkId where U: core::convert::From<T>
pub fn aya::programs::cgroup_skb::CgroupSkbLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_skb::CgroupSkbLinkId where U: core::convert::Into<T>
pub type aya::programs::cgroup_skb::CgroupSkbLinkId::Error = core::convert::Infallible
pub fn aya::programs::cgroup_skb::CgroupSkbLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_skb::CgroupSkbLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_skb::CgroupSkbLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_skb::CgroupSkbLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::cgroup_skb::CgroupSkbLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_skb::CgroupSkbLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_skb::CgroupSkbLinkId where T: ?core::marker::Sized
pub fn aya::programs::cgroup_skb::CgroupSkbLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_skb::CgroupSkbLinkId where T: ?core::marker::Sized
pub fn aya::programs::cgroup_skb::CgroupSkbLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::cgroup_skb::CgroupSkbLinkId
pub fn aya::programs::cgroup_skb::CgroupSkbLinkId::from(t: T) -> T
pub mod aya::programs::cgroup_sock
pub use aya::programs::cgroup_sock::CgroupSockAttachType
pub struct aya::programs::cgroup_sock::CgroupSock
impl aya::programs::cgroup_sock::CgroupSock
pub fn aya::programs::cgroup_sock::CgroupSock::attach<T: std::os::fd::owned::AsFd>(&mut self, cgroup: T, mode: aya::programs::links::CgroupAttachMode) -> core::result::Result<aya::programs::cgroup_sock::CgroupSockLinkId, aya::programs::ProgramError>
pub fn aya::programs::cgroup_sock::CgroupSock::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P, attach_type: aya_obj::programs::cgroup_sock::CgroupSockAttachType) -> core::result::Result<Self, aya::programs::ProgramError>
pub fn aya::programs::cgroup_sock::CgroupSock::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::cgroup_sock::CgroupSock
pub fn aya::programs::cgroup_sock::CgroupSock::detach(&mut self, link_id: aya::programs::cgroup_sock::CgroupSockLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_sock::CgroupSock::take_link(&mut self, link_id: aya::programs::cgroup_sock::CgroupSockLinkId) -> core::result::Result<aya::programs::cgroup_sock::CgroupSockLink, aya::programs::ProgramError>
impl aya::programs::cgroup_sock::CgroupSock
pub fn aya::programs::cgroup_sock::CgroupSock::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::cgroup_sock::CgroupSock
pub fn aya::programs::cgroup_sock::CgroupSock::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::cgroup_sock::CgroupSock
pub fn aya::programs::cgroup_sock::CgroupSock::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::cgroup_sock::CgroupSock::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::cgroup_sock::CgroupSock
pub fn aya::programs::cgroup_sock::CgroupSock::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::cgroup_sock::CgroupSock
pub fn aya::programs::cgroup_sock::CgroupSock::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::cgroup_sock::CgroupSock
pub fn aya::programs::cgroup_sock::CgroupSock::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::cgroup_sock::CgroupSock
pub type &'a aya::programs::cgroup_sock::CgroupSock::Error = aya::programs::ProgramError
pub fn &'a aya::programs::cgroup_sock::CgroupSock::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::cgroup_sock::CgroupSock, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::cgroup_sock::CgroupSock
pub type &'a mut aya::programs::cgroup_sock::CgroupSock::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::cgroup_sock::CgroupSock::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::cgroup_sock::CgroupSock, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::cgroup_sock::CgroupSock
impl core::marker::Send for aya::programs::cgroup_sock::CgroupSock
impl core::marker::Sync for aya::programs::cgroup_sock::CgroupSock
impl core::marker::Unpin for aya::programs::cgroup_sock::CgroupSock
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_sock::CgroupSock
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_sock::CgroupSock
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_sock::CgroupSock where U: core::convert::From<T>
pub fn aya::programs::cgroup_sock::CgroupSock::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_sock::CgroupSock where U: core::convert::Into<T>
pub type aya::programs::cgroup_sock::CgroupSock::Error = core::convert::Infallible
pub fn aya::programs::cgroup_sock::CgroupSock::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_sock::CgroupSock where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_sock::CgroupSock::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_sock::CgroupSock::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::cgroup_sock::CgroupSock where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_sock::CgroupSock::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_sock::CgroupSock where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sock::CgroupSock::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_sock::CgroupSock where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sock::CgroupSock::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::cgroup_sock::CgroupSock
pub fn aya::programs::cgroup_sock::CgroupSock::from(t: T) -> T
pub struct aya::programs::cgroup_sock::CgroupSockLink(_)
impl aya::programs::links::Link for aya::programs::cgroup_sock::CgroupSockLink
pub type aya::programs::cgroup_sock::CgroupSockLink::Id = aya::programs::cgroup_sock::CgroupSockLinkId
pub fn aya::programs::cgroup_sock::CgroupSockLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_sock::CgroupSockLink::id(&self) -> Self::Id
impl core::fmt::Debug for aya::programs::cgroup_sock::CgroupSockLink
pub fn aya::programs::cgroup_sock::CgroupSockLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::cgroup_sock::CgroupSockLink
pub fn aya::programs::cgroup_sock::CgroupSockLink::drop(&mut self)
impl core::marker::Freeze for aya::programs::cgroup_sock::CgroupSockLink
impl core::marker::Send for aya::programs::cgroup_sock::CgroupSockLink
impl core::marker::Sync for aya::programs::cgroup_sock::CgroupSockLink
impl core::marker::Unpin for aya::programs::cgroup_sock::CgroupSockLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_sock::CgroupSockLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_sock::CgroupSockLink
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_sock::CgroupSockLink where U: core::convert::From<T>
pub fn aya::programs::cgroup_sock::CgroupSockLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_sock::CgroupSockLink where U: core::convert::Into<T>
pub type aya::programs::cgroup_sock::CgroupSockLink::Error = core::convert::Infallible
pub fn aya::programs::cgroup_sock::CgroupSockLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_sock::CgroupSockLink where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_sock::CgroupSockLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_sock::CgroupSockLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::cgroup_sock::CgroupSockLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_sock::CgroupSockLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_sock::CgroupSockLink where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sock::CgroupSockLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_sock::CgroupSockLink where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sock::CgroupSockLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::cgroup_sock::CgroupSockLink
pub fn aya::programs::cgroup_sock::CgroupSockLink::from(t: T) -> T
pub struct aya::programs::cgroup_sock::CgroupSockLinkId(_)
impl core::cmp::Eq for aya::programs::cgroup_sock::CgroupSockLinkId
impl core::cmp::PartialEq for aya::programs::cgroup_sock::CgroupSockLinkId
pub fn aya::programs::cgroup_sock::CgroupSockLinkId::eq(&self, other: &aya::programs::cgroup_sock::CgroupSockLinkId) -> bool
impl core::fmt::Debug for aya::programs::cgroup_sock::CgroupSockLinkId
pub fn aya::programs::cgroup_sock::CgroupSockLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::cgroup_sock::CgroupSockLinkId
pub fn aya::programs::cgroup_sock::CgroupSockLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::cgroup_sock::CgroupSockLinkId
impl core::marker::Freeze for aya::programs::cgroup_sock::CgroupSockLinkId
impl core::marker::Send for aya::programs::cgroup_sock::CgroupSockLinkId
impl core::marker::Sync for aya::programs::cgroup_sock::CgroupSockLinkId
impl core::marker::Unpin for aya::programs::cgroup_sock::CgroupSockLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_sock::CgroupSockLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_sock::CgroupSockLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::cgroup_sock::CgroupSockLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::cgroup_sock::CgroupSockLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_sock::CgroupSockLinkId where U: core::convert::From<T>
pub fn aya::programs::cgroup_sock::CgroupSockLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_sock::CgroupSockLinkId where U: core::convert::Into<T>
pub type aya::programs::cgroup_sock::CgroupSockLinkId::Error = core::convert::Infallible
pub fn aya::programs::cgroup_sock::CgroupSockLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_sock::CgroupSockLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_sock::CgroupSockLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_sock::CgroupSockLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::cgroup_sock::CgroupSockLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_sock::CgroupSockLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_sock::CgroupSockLinkId where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sock::CgroupSockLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_sock::CgroupSockLinkId where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sock::CgroupSockLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::cgroup_sock::CgroupSockLinkId
pub fn aya::programs::cgroup_sock::CgroupSockLinkId::from(t: T) -> T
pub mod aya::programs::cgroup_sock_addr
pub use aya::programs::cgroup_sock_addr::CgroupSockAddrAttachType
pub struct aya::programs::cgroup_sock_addr::CgroupSockAddr
impl aya::programs::cgroup_sock_addr::CgroupSockAddr
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::attach<T: std::os::fd::owned::AsFd>(&mut self, cgroup: T, mode: aya::programs::links::CgroupAttachMode) -> core::result::Result<aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId, aya::programs::ProgramError>
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P, attach_type: aya_obj::programs::cgroup_sock_addr::CgroupSockAddrAttachType) -> core::result::Result<Self, aya::programs::ProgramError>
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::cgroup_sock_addr::CgroupSockAddr
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::detach(&mut self, link_id: aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::take_link(&mut self, link_id: aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId) -> core::result::Result<aya::programs::cgroup_sock_addr::CgroupSockAddrLink, aya::programs::ProgramError>
impl aya::programs::cgroup_sock_addr::CgroupSockAddr
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::cgroup_sock_addr::CgroupSockAddr
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::cgroup_sock_addr::CgroupSockAddr
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::cgroup_sock_addr::CgroupSockAddr
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::cgroup_sock_addr::CgroupSockAddr
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::cgroup_sock_addr::CgroupSockAddr
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::cgroup_sock_addr::CgroupSockAddr
pub type &'a aya::programs::cgroup_sock_addr::CgroupSockAddr::Error = aya::programs::ProgramError
pub fn &'a aya::programs::cgroup_sock_addr::CgroupSockAddr::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::cgroup_sock_addr::CgroupSockAddr, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::cgroup_sock_addr::CgroupSockAddr
pub type &'a mut aya::programs::cgroup_sock_addr::CgroupSockAddr::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::cgroup_sock_addr::CgroupSockAddr::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::cgroup_sock_addr::CgroupSockAddr, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::cgroup_sock_addr::CgroupSockAddr
impl core::marker::Send for aya::programs::cgroup_sock_addr::CgroupSockAddr
impl core::marker::Sync for aya::programs::cgroup_sock_addr::CgroupSockAddr
impl core::marker::Unpin for aya::programs::cgroup_sock_addr::CgroupSockAddr
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_sock_addr::CgroupSockAddr
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_sock_addr::CgroupSockAddr
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_sock_addr::CgroupSockAddr where U: core::convert::From<T>
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_sock_addr::CgroupSockAddr where U: core::convert::Into<T>
pub type aya::programs::cgroup_sock_addr::CgroupSockAddr::Error = core::convert::Infallible
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_sock_addr::CgroupSockAddr where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_sock_addr::CgroupSockAddr::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::cgroup_sock_addr::CgroupSockAddr where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_sock_addr::CgroupSockAddr where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_sock_addr::CgroupSockAddr where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::cgroup_sock_addr::CgroupSockAddr
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::from(t: T) -> T
pub struct aya::programs::cgroup_sock_addr::CgroupSockAddrLink(_)
impl aya::programs::links::Link for aya::programs::cgroup_sock_addr::CgroupSockAddrLink
pub type aya::programs::cgroup_sock_addr::CgroupSockAddrLink::Id = aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLink::id(&self) -> Self::Id
impl core::fmt::Debug for aya::programs::cgroup_sock_addr::CgroupSockAddrLink
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::cgroup_sock_addr::CgroupSockAddrLink
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLink::drop(&mut self)
impl core::marker::Freeze for aya::programs::cgroup_sock_addr::CgroupSockAddrLink
impl core::marker::Send for aya::programs::cgroup_sock_addr::CgroupSockAddrLink
impl core::marker::Sync for aya::programs::cgroup_sock_addr::CgroupSockAddrLink
impl core::marker::Unpin for aya::programs::cgroup_sock_addr::CgroupSockAddrLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_sock_addr::CgroupSockAddrLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_sock_addr::CgroupSockAddrLink
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_sock_addr::CgroupSockAddrLink where U: core::convert::From<T>
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_sock_addr::CgroupSockAddrLink where U: core::convert::Into<T>
pub type aya::programs::cgroup_sock_addr::CgroupSockAddrLink::Error = core::convert::Infallible
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_sock_addr::CgroupSockAddrLink where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_sock_addr::CgroupSockAddrLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::cgroup_sock_addr::CgroupSockAddrLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_sock_addr::CgroupSockAddrLink where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_sock_addr::CgroupSockAddrLink where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::cgroup_sock_addr::CgroupSockAddrLink
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLink::from(t: T) -> T
pub struct aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId(_)
impl core::cmp::Eq for aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId
impl core::cmp::PartialEq for aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId::eq(&self, other: &aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId) -> bool
impl core::fmt::Debug for aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId
impl core::marker::Freeze for aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId
impl core::marker::Send for aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId
impl core::marker::Sync for aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId
impl core::marker::Unpin for aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId where U: core::convert::From<T>
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId where U: core::convert::Into<T>
pub type aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId::Error = core::convert::Infallible
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId::from(t: T) -> T
pub mod aya::programs::cgroup_sockopt
pub use aya::programs::cgroup_sockopt::CgroupSockoptAttachType
pub struct aya::programs::cgroup_sockopt::CgroupSockopt
impl aya::programs::cgroup_sockopt::CgroupSockopt
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::attach<T: std::os::fd::owned::AsFd>(&mut self, cgroup: T, mode: aya::programs::links::CgroupAttachMode) -> core::result::Result<aya::programs::cgroup_sockopt::CgroupSockoptLinkId, aya::programs::ProgramError>
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P, attach_type: aya_obj::programs::cgroup_sockopt::CgroupSockoptAttachType) -> core::result::Result<Self, aya::programs::ProgramError>
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::cgroup_sockopt::CgroupSockopt
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::detach(&mut self, link_id: aya::programs::cgroup_sockopt::CgroupSockoptLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::take_link(&mut self, link_id: aya::programs::cgroup_sockopt::CgroupSockoptLinkId) -> core::result::Result<aya::programs::cgroup_sockopt::CgroupSockoptLink, aya::programs::ProgramError>
impl aya::programs::cgroup_sockopt::CgroupSockopt
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::cgroup_sockopt::CgroupSockopt
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::cgroup_sockopt::CgroupSockopt
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::cgroup_sockopt::CgroupSockopt
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::cgroup_sockopt::CgroupSockopt
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::cgroup_sockopt::CgroupSockopt
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::cgroup_sockopt::CgroupSockopt
pub type &'a aya::programs::cgroup_sockopt::CgroupSockopt::Error = aya::programs::ProgramError
pub fn &'a aya::programs::cgroup_sockopt::CgroupSockopt::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::cgroup_sockopt::CgroupSockopt, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::cgroup_sockopt::CgroupSockopt
pub type &'a mut aya::programs::cgroup_sockopt::CgroupSockopt::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::cgroup_sockopt::CgroupSockopt::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::cgroup_sockopt::CgroupSockopt, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::cgroup_sockopt::CgroupSockopt
impl core::marker::Send for aya::programs::cgroup_sockopt::CgroupSockopt
impl core::marker::Sync for aya::programs::cgroup_sockopt::CgroupSockopt
impl core::marker::Unpin for aya::programs::cgroup_sockopt::CgroupSockopt
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_sockopt::CgroupSockopt
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_sockopt::CgroupSockopt
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_sockopt::CgroupSockopt where U: core::convert::From<T>
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_sockopt::CgroupSockopt where U: core::convert::Into<T>
pub type aya::programs::cgroup_sockopt::CgroupSockopt::Error = core::convert::Infallible
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_sockopt::CgroupSockopt where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_sockopt::CgroupSockopt::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::cgroup_sockopt::CgroupSockopt where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_sockopt::CgroupSockopt where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_sockopt::CgroupSockopt where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::cgroup_sockopt::CgroupSockopt
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::from(t: T) -> T
pub struct aya::programs::cgroup_sockopt::CgroupSockoptLink(_)
impl aya::programs::links::Link for aya::programs::cgroup_sockopt::CgroupSockoptLink
pub type aya::programs::cgroup_sockopt::CgroupSockoptLink::Id = aya::programs::cgroup_sockopt::CgroupSockoptLinkId
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLink::id(&self) -> Self::Id
impl core::fmt::Debug for aya::programs::cgroup_sockopt::CgroupSockoptLink
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::cgroup_sockopt::CgroupSockoptLink
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLink::drop(&mut self)
impl core::marker::Freeze for aya::programs::cgroup_sockopt::CgroupSockoptLink
impl core::marker::Send for aya::programs::cgroup_sockopt::CgroupSockoptLink
impl core::marker::Sync for aya::programs::cgroup_sockopt::CgroupSockoptLink
impl core::marker::Unpin for aya::programs::cgroup_sockopt::CgroupSockoptLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_sockopt::CgroupSockoptLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_sockopt::CgroupSockoptLink
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_sockopt::CgroupSockoptLink where U: core::convert::From<T>
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_sockopt::CgroupSockoptLink where U: core::convert::Into<T>
pub type aya::programs::cgroup_sockopt::CgroupSockoptLink::Error = core::convert::Infallible
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_sockopt::CgroupSockoptLink where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_sockopt::CgroupSockoptLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::cgroup_sockopt::CgroupSockoptLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_sockopt::CgroupSockoptLink where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_sockopt::CgroupSockoptLink where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::cgroup_sockopt::CgroupSockoptLink
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLink::from(t: T) -> T
pub struct aya::programs::cgroup_sockopt::CgroupSockoptLinkId(_)
impl core::cmp::Eq for aya::programs::cgroup_sockopt::CgroupSockoptLinkId
impl core::cmp::PartialEq for aya::programs::cgroup_sockopt::CgroupSockoptLinkId
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLinkId::eq(&self, other: &aya::programs::cgroup_sockopt::CgroupSockoptLinkId) -> bool
impl core::fmt::Debug for aya::programs::cgroup_sockopt::CgroupSockoptLinkId
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::cgroup_sockopt::CgroupSockoptLinkId
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::cgroup_sockopt::CgroupSockoptLinkId
impl core::marker::Freeze for aya::programs::cgroup_sockopt::CgroupSockoptLinkId
impl core::marker::Send for aya::programs::cgroup_sockopt::CgroupSockoptLinkId
impl core::marker::Sync for aya::programs::cgroup_sockopt::CgroupSockoptLinkId
impl core::marker::Unpin for aya::programs::cgroup_sockopt::CgroupSockoptLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_sockopt::CgroupSockoptLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_sockopt::CgroupSockoptLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::cgroup_sockopt::CgroupSockoptLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_sockopt::CgroupSockoptLinkId where U: core::convert::From<T>
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_sockopt::CgroupSockoptLinkId where U: core::convert::Into<T>
pub type aya::programs::cgroup_sockopt::CgroupSockoptLinkId::Error = core::convert::Infallible
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_sockopt::CgroupSockoptLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_sockopt::CgroupSockoptLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::cgroup_sockopt::CgroupSockoptLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_sockopt::CgroupSockoptLinkId where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_sockopt::CgroupSockoptLinkId where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::cgroup_sockopt::CgroupSockoptLinkId
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLinkId::from(t: T) -> T
pub mod aya::programs::cgroup_sysctl
pub struct aya::programs::cgroup_sysctl::CgroupSysctl
impl aya::programs::cgroup_sysctl::CgroupSysctl
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::attach<T: std::os::fd::owned::AsFd>(&mut self, cgroup: T, mode: aya::programs::links::CgroupAttachMode) -> core::result::Result<aya::programs::cgroup_sysctl::CgroupSysctlLinkId, aya::programs::ProgramError>
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::cgroup_sysctl::CgroupSysctl
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::detach(&mut self, link_id: aya::programs::cgroup_sysctl::CgroupSysctlLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::take_link(&mut self, link_id: aya::programs::cgroup_sysctl::CgroupSysctlLinkId) -> core::result::Result<aya::programs::cgroup_sysctl::CgroupSysctlLink, aya::programs::ProgramError>
impl aya::programs::cgroup_sysctl::CgroupSysctl
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::cgroup_sysctl::CgroupSysctl
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::cgroup_sysctl::CgroupSysctl
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::cgroup_sysctl::CgroupSysctl
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::cgroup_sysctl::CgroupSysctl
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::cgroup_sysctl::CgroupSysctl
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::cgroup_sysctl::CgroupSysctl
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::cgroup_sysctl::CgroupSysctl
pub type &'a aya::programs::cgroup_sysctl::CgroupSysctl::Error = aya::programs::ProgramError
pub fn &'a aya::programs::cgroup_sysctl::CgroupSysctl::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::cgroup_sysctl::CgroupSysctl, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::cgroup_sysctl::CgroupSysctl
pub type &'a mut aya::programs::cgroup_sysctl::CgroupSysctl::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::cgroup_sysctl::CgroupSysctl::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::cgroup_sysctl::CgroupSysctl, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::cgroup_sysctl::CgroupSysctl
impl core::marker::Send for aya::programs::cgroup_sysctl::CgroupSysctl
impl core::marker::Sync for aya::programs::cgroup_sysctl::CgroupSysctl
impl core::marker::Unpin for aya::programs::cgroup_sysctl::CgroupSysctl
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_sysctl::CgroupSysctl
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_sysctl::CgroupSysctl
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_sysctl::CgroupSysctl where U: core::convert::From<T>
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_sysctl::CgroupSysctl where U: core::convert::Into<T>
pub type aya::programs::cgroup_sysctl::CgroupSysctl::Error = core::convert::Infallible
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_sysctl::CgroupSysctl where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_sysctl::CgroupSysctl::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::cgroup_sysctl::CgroupSysctl where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_sysctl::CgroupSysctl where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_sysctl::CgroupSysctl where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::cgroup_sysctl::CgroupSysctl
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::from(t: T) -> T
pub struct aya::programs::cgroup_sysctl::CgroupSysctlLink(_)
impl aya::programs::links::Link for aya::programs::cgroup_sysctl::CgroupSysctlLink
pub type aya::programs::cgroup_sysctl::CgroupSysctlLink::Id = aya::programs::cgroup_sysctl::CgroupSysctlLinkId
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLink::id(&self) -> Self::Id
impl core::fmt::Debug for aya::programs::cgroup_sysctl::CgroupSysctlLink
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::cgroup_sysctl::CgroupSysctlLink
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLink::drop(&mut self)
impl core::marker::Freeze for aya::programs::cgroup_sysctl::CgroupSysctlLink
impl core::marker::Send for aya::programs::cgroup_sysctl::CgroupSysctlLink
impl core::marker::Sync for aya::programs::cgroup_sysctl::CgroupSysctlLink
impl core::marker::Unpin for aya::programs::cgroup_sysctl::CgroupSysctlLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_sysctl::CgroupSysctlLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_sysctl::CgroupSysctlLink
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_sysctl::CgroupSysctlLink where U: core::convert::From<T>
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_sysctl::CgroupSysctlLink where U: core::convert::Into<T>
pub type aya::programs::cgroup_sysctl::CgroupSysctlLink::Error = core::convert::Infallible
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_sysctl::CgroupSysctlLink where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_sysctl::CgroupSysctlLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::cgroup_sysctl::CgroupSysctlLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_sysctl::CgroupSysctlLink where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_sysctl::CgroupSysctlLink where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::cgroup_sysctl::CgroupSysctlLink
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLink::from(t: T) -> T
pub struct aya::programs::cgroup_sysctl::CgroupSysctlLinkId(_)
impl core::cmp::Eq for aya::programs::cgroup_sysctl::CgroupSysctlLinkId
impl core::cmp::PartialEq for aya::programs::cgroup_sysctl::CgroupSysctlLinkId
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLinkId::eq(&self, other: &aya::programs::cgroup_sysctl::CgroupSysctlLinkId) -> bool
impl core::fmt::Debug for aya::programs::cgroup_sysctl::CgroupSysctlLinkId
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::cgroup_sysctl::CgroupSysctlLinkId
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::cgroup_sysctl::CgroupSysctlLinkId
impl core::marker::Freeze for aya::programs::cgroup_sysctl::CgroupSysctlLinkId
impl core::marker::Send for aya::programs::cgroup_sysctl::CgroupSysctlLinkId
impl core::marker::Sync for aya::programs::cgroup_sysctl::CgroupSysctlLinkId
impl core::marker::Unpin for aya::programs::cgroup_sysctl::CgroupSysctlLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_sysctl::CgroupSysctlLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_sysctl::CgroupSysctlLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::cgroup_sysctl::CgroupSysctlLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_sysctl::CgroupSysctlLinkId where U: core::convert::From<T>
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_sysctl::CgroupSysctlLinkId where U: core::convert::Into<T>
pub type aya::programs::cgroup_sysctl::CgroupSysctlLinkId::Error = core::convert::Infallible
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_sysctl::CgroupSysctlLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_sysctl::CgroupSysctlLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::cgroup_sysctl::CgroupSysctlLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_sysctl::CgroupSysctlLinkId where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_sysctl::CgroupSysctlLinkId where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::cgroup_sysctl::CgroupSysctlLinkId
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLinkId::from(t: T) -> T
pub mod aya::programs::extension
pub enum aya::programs::extension::ExtensionError
pub aya::programs::extension::ExtensionError::NoBTF
impl core::convert::From<aya::programs::extension::ExtensionError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya::programs::extension::ExtensionError) -> Self
impl core::error::Error for aya::programs::extension::ExtensionError
impl core::fmt::Debug for aya::programs::extension::ExtensionError
pub fn aya::programs::extension::ExtensionError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for aya::programs::extension::ExtensionError
pub fn aya::programs::extension::ExtensionError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::extension::ExtensionError
impl core::marker::Send for aya::programs::extension::ExtensionError
impl core::marker::Sync for aya::programs::extension::ExtensionError
impl core::marker::Unpin for aya::programs::extension::ExtensionError
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::extension::ExtensionError
impl core::panic::unwind_safe::UnwindSafe for aya::programs::extension::ExtensionError
impl<T, U> core::convert::Into<U> for aya::programs::extension::ExtensionError where U: core::convert::From<T>
pub fn aya::programs::extension::ExtensionError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::extension::ExtensionError where U: core::convert::Into<T>
pub type aya::programs::extension::ExtensionError::Error = core::convert::Infallible
pub fn aya::programs::extension::ExtensionError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::extension::ExtensionError where U: core::convert::TryFrom<T>
pub type aya::programs::extension::ExtensionError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::extension::ExtensionError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for aya::programs::extension::ExtensionError where T: core::fmt::Display + ?core::marker::Sized
pub fn aya::programs::extension::ExtensionError::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for aya::programs::extension::ExtensionError where T: 'static + ?core::marker::Sized
pub fn aya::programs::extension::ExtensionError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::extension::ExtensionError where T: ?core::marker::Sized
pub fn aya::programs::extension::ExtensionError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::extension::ExtensionError where T: ?core::marker::Sized
pub fn aya::programs::extension::ExtensionError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::extension::ExtensionError
pub fn aya::programs::extension::ExtensionError::from(t: T) -> T
pub struct aya::programs::extension::Extension
impl aya::programs::extension::Extension
pub fn aya::programs::extension::Extension::attach(&mut self) -> core::result::Result<aya::programs::extension::ExtensionLinkId, aya::programs::ProgramError>
pub fn aya::programs::extension::Extension::attach_to_program(&mut self, program: &aya::programs::ProgramFd, func_name: &str) -> core::result::Result<aya::programs::extension::ExtensionLinkId, aya::programs::ProgramError>
pub fn aya::programs::extension::Extension::load(&mut self, program: aya::programs::ProgramFd, func_name: &str) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::extension::Extension
pub fn aya::programs::extension::Extension::detach(&mut self, link_id: aya::programs::extension::ExtensionLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::extension::Extension::take_link(&mut self, link_id: aya::programs::extension::ExtensionLinkId) -> core::result::Result<aya::programs::extension::ExtensionLink, aya::programs::ProgramError>
impl aya::programs::extension::Extension
pub fn aya::programs::extension::Extension::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::extension::Extension
pub fn aya::programs::extension::Extension::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::extension::Extension
pub fn aya::programs::extension::Extension::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::extension::Extension
pub fn aya::programs::extension::Extension::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::extension::Extension::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::extension::Extension
pub fn aya::programs::extension::Extension::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::extension::Extension
pub fn aya::programs::extension::Extension::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::extension::Extension
pub fn aya::programs::extension::Extension::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::extension::Extension
pub type &'a aya::programs::extension::Extension::Error = aya::programs::ProgramError
pub fn &'a aya::programs::extension::Extension::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::extension::Extension, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::extension::Extension
pub type &'a mut aya::programs::extension::Extension::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::extension::Extension::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::extension::Extension, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::extension::Extension
impl core::marker::Send for aya::programs::extension::Extension
impl core::marker::Sync for aya::programs::extension::Extension
impl core::marker::Unpin for aya::programs::extension::Extension
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::extension::Extension
impl core::panic::unwind_safe::UnwindSafe for aya::programs::extension::Extension
impl<T, U> core::convert::Into<U> for aya::programs::extension::Extension where U: core::convert::From<T>
pub fn aya::programs::extension::Extension::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::extension::Extension where U: core::convert::Into<T>
pub type aya::programs::extension::Extension::Error = core::convert::Infallible
pub fn aya::programs::extension::Extension::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::extension::Extension where U: core::convert::TryFrom<T>
pub type aya::programs::extension::Extension::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::extension::Extension::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::extension::Extension where T: 'static + ?core::marker::Sized
pub fn aya::programs::extension::Extension::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::extension::Extension where T: ?core::marker::Sized
pub fn aya::programs::extension::Extension::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::extension::Extension where T: ?core::marker::Sized
pub fn aya::programs::extension::Extension::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::extension::Extension
pub fn aya::programs::extension::Extension::from(t: T) -> T
pub struct aya::programs::extension::ExtensionLink(_)
impl aya::programs::links::Link for aya::programs::extension::ExtensionLink
pub type aya::programs::extension::ExtensionLink::Id = aya::programs::extension::ExtensionLinkId
pub fn aya::programs::extension::ExtensionLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::extension::ExtensionLink::id(&self) -> Self::Id
impl core::convert::From<aya::programs::extension::ExtensionLink> for aya::programs::links::FdLink
pub fn aya::programs::links::FdLink::from(w: aya::programs::extension::ExtensionLink) -> aya::programs::links::FdLink
impl core::convert::From<aya::programs::links::FdLink> for aya::programs::extension::ExtensionLink
pub fn aya::programs::extension::ExtensionLink::from(b: aya::programs::links::FdLink) -> aya::programs::extension::ExtensionLink
impl core::fmt::Debug for aya::programs::extension::ExtensionLink
pub fn aya::programs::extension::ExtensionLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::extension::ExtensionLink
pub fn aya::programs::extension::ExtensionLink::drop(&mut self)
impl core::marker::Freeze for aya::programs::extension::ExtensionLink
impl core::marker::Send for aya::programs::extension::ExtensionLink
impl core::marker::Sync for aya::programs::extension::ExtensionLink
impl core::marker::Unpin for aya::programs::extension::ExtensionLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::extension::ExtensionLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::extension::ExtensionLink
impl<T, U> core::convert::Into<U> for aya::programs::extension::ExtensionLink where U: core::convert::From<T>
pub fn aya::programs::extension::ExtensionLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::extension::ExtensionLink where U: core::convert::Into<T>
pub type aya::programs::extension::ExtensionLink::Error = core::convert::Infallible
pub fn aya::programs::extension::ExtensionLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::extension::ExtensionLink where U: core::convert::TryFrom<T>
pub type aya::programs::extension::ExtensionLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::extension::ExtensionLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::extension::ExtensionLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::extension::ExtensionLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::extension::ExtensionLink where T: ?core::marker::Sized
pub fn aya::programs::extension::ExtensionLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::extension::ExtensionLink where T: ?core::marker::Sized
pub fn aya::programs::extension::ExtensionLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::extension::ExtensionLink
pub fn aya::programs::extension::ExtensionLink::from(t: T) -> T
pub struct aya::programs::extension::ExtensionLinkId(_)
impl core::cmp::Eq for aya::programs::extension::ExtensionLinkId
impl core::cmp::PartialEq for aya::programs::extension::ExtensionLinkId
pub fn aya::programs::extension::ExtensionLinkId::eq(&self, other: &aya::programs::extension::ExtensionLinkId) -> bool
impl core::fmt::Debug for aya::programs::extension::ExtensionLinkId
pub fn aya::programs::extension::ExtensionLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::extension::ExtensionLinkId
pub fn aya::programs::extension::ExtensionLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::extension::ExtensionLinkId
impl core::marker::Freeze for aya::programs::extension::ExtensionLinkId
impl core::marker::Send for aya::programs::extension::ExtensionLinkId
impl core::marker::Sync for aya::programs::extension::ExtensionLinkId
impl core::marker::Unpin for aya::programs::extension::ExtensionLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::extension::ExtensionLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::extension::ExtensionLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::extension::ExtensionLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::extension::ExtensionLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::extension::ExtensionLinkId where U: core::convert::From<T>
pub fn aya::programs::extension::ExtensionLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::extension::ExtensionLinkId where U: core::convert::Into<T>
pub type aya::programs::extension::ExtensionLinkId::Error = core::convert::Infallible
pub fn aya::programs::extension::ExtensionLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::extension::ExtensionLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::extension::ExtensionLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::extension::ExtensionLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::extension::ExtensionLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::extension::ExtensionLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::extension::ExtensionLinkId where T: ?core::marker::Sized
pub fn aya::programs::extension::ExtensionLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::extension::ExtensionLinkId where T: ?core::marker::Sized
pub fn aya::programs::extension::ExtensionLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::extension::ExtensionLinkId
pub fn aya::programs::extension::ExtensionLinkId::from(t: T) -> T
pub mod aya::programs::fentry
pub struct aya::programs::fentry::FEntry
impl aya::programs::fentry::FEntry
pub fn aya::programs::fentry::FEntry::attach(&mut self) -> core::result::Result<aya::programs::fentry::FEntryLinkId, aya::programs::ProgramError>
pub fn aya::programs::fentry::FEntry::load(&mut self, fn_name: &str, btf: &aya_obj::btf::btf::Btf) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::fentry::FEntry
pub fn aya::programs::fentry::FEntry::detach(&mut self, link_id: aya::programs::fentry::FEntryLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::fentry::FEntry::take_link(&mut self, link_id: aya::programs::fentry::FEntryLinkId) -> core::result::Result<aya::programs::fentry::FEntryLink, aya::programs::ProgramError>
impl aya::programs::fentry::FEntry
pub fn aya::programs::fentry::FEntry::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::fentry::FEntry
pub fn aya::programs::fentry::FEntry::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::fentry::FEntry
pub fn aya::programs::fentry::FEntry::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::fentry::FEntry
pub fn aya::programs::fentry::FEntry::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::fentry::FEntry::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::fentry::FEntry
pub fn aya::programs::fentry::FEntry::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::fentry::FEntry
pub fn aya::programs::fentry::FEntry::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::fentry::FEntry
pub fn aya::programs::fentry::FEntry::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::fentry::FEntry
pub type &'a aya::programs::fentry::FEntry::Error = aya::programs::ProgramError
pub fn &'a aya::programs::fentry::FEntry::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::fentry::FEntry, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::fentry::FEntry
pub type &'a mut aya::programs::fentry::FEntry::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::fentry::FEntry::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::fentry::FEntry, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::fentry::FEntry
impl core::marker::Send for aya::programs::fentry::FEntry
impl core::marker::Sync for aya::programs::fentry::FEntry
impl core::marker::Unpin for aya::programs::fentry::FEntry
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::fentry::FEntry
impl core::panic::unwind_safe::UnwindSafe for aya::programs::fentry::FEntry
impl<T, U> core::convert::Into<U> for aya::programs::fentry::FEntry where U: core::convert::From<T>
pub fn aya::programs::fentry::FEntry::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::fentry::FEntry where U: core::convert::Into<T>
pub type aya::programs::fentry::FEntry::Error = core::convert::Infallible
pub fn aya::programs::fentry::FEntry::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::fentry::FEntry where U: core::convert::TryFrom<T>
pub type aya::programs::fentry::FEntry::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::fentry::FEntry::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::fentry::FEntry where T: 'static + ?core::marker::Sized
pub fn aya::programs::fentry::FEntry::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::fentry::FEntry where T: ?core::marker::Sized
pub fn aya::programs::fentry::FEntry::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::fentry::FEntry where T: ?core::marker::Sized
pub fn aya::programs::fentry::FEntry::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::fentry::FEntry
pub fn aya::programs::fentry::FEntry::from(t: T) -> T
pub struct aya::programs::fentry::FEntryLink(_)
impl aya::programs::links::Link for aya::programs::fentry::FEntryLink
pub type aya::programs::fentry::FEntryLink::Id = aya::programs::fentry::FEntryLinkId
pub fn aya::programs::fentry::FEntryLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::fentry::FEntryLink::id(&self) -> Self::Id
impl core::convert::From<aya::programs::fentry::FEntryLink> for aya::programs::links::FdLink
pub fn aya::programs::links::FdLink::from(w: aya::programs::fentry::FEntryLink) -> aya::programs::links::FdLink
impl core::convert::From<aya::programs::links::FdLink> for aya::programs::fentry::FEntryLink
pub fn aya::programs::fentry::FEntryLink::from(b: aya::programs::links::FdLink) -> aya::programs::fentry::FEntryLink
impl core::fmt::Debug for aya::programs::fentry::FEntryLink
pub fn aya::programs::fentry::FEntryLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::fentry::FEntryLink
pub fn aya::programs::fentry::FEntryLink::drop(&mut self)
impl core::marker::Freeze for aya::programs::fentry::FEntryLink
impl core::marker::Send for aya::programs::fentry::FEntryLink
impl core::marker::Sync for aya::programs::fentry::FEntryLink
impl core::marker::Unpin for aya::programs::fentry::FEntryLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::fentry::FEntryLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::fentry::FEntryLink
impl<T, U> core::convert::Into<U> for aya::programs::fentry::FEntryLink where U: core::convert::From<T>
pub fn aya::programs::fentry::FEntryLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::fentry::FEntryLink where U: core::convert::Into<T>
pub type aya::programs::fentry::FEntryLink::Error = core::convert::Infallible
pub fn aya::programs::fentry::FEntryLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::fentry::FEntryLink where U: core::convert::TryFrom<T>
pub type aya::programs::fentry::FEntryLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::fentry::FEntryLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::fentry::FEntryLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::fentry::FEntryLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::fentry::FEntryLink where T: ?core::marker::Sized
pub fn aya::programs::fentry::FEntryLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::fentry::FEntryLink where T: ?core::marker::Sized
pub fn aya::programs::fentry::FEntryLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::fentry::FEntryLink
pub fn aya::programs::fentry::FEntryLink::from(t: T) -> T
pub struct aya::programs::fentry::FEntryLinkId(_)
impl core::cmp::Eq for aya::programs::fentry::FEntryLinkId
impl core::cmp::PartialEq for aya::programs::fentry::FEntryLinkId
pub fn aya::programs::fentry::FEntryLinkId::eq(&self, other: &aya::programs::fentry::FEntryLinkId) -> bool
impl core::fmt::Debug for aya::programs::fentry::FEntryLinkId
pub fn aya::programs::fentry::FEntryLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::fentry::FEntryLinkId
pub fn aya::programs::fentry::FEntryLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::fentry::FEntryLinkId
impl core::marker::Freeze for aya::programs::fentry::FEntryLinkId
impl core::marker::Send for aya::programs::fentry::FEntryLinkId
impl core::marker::Sync for aya::programs::fentry::FEntryLinkId
impl core::marker::Unpin for aya::programs::fentry::FEntryLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::fentry::FEntryLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::fentry::FEntryLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::fentry::FEntryLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::fentry::FEntryLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::fentry::FEntryLinkId where U: core::convert::From<T>
pub fn aya::programs::fentry::FEntryLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::fentry::FEntryLinkId where U: core::convert::Into<T>
pub type aya::programs::fentry::FEntryLinkId::Error = core::convert::Infallible
pub fn aya::programs::fentry::FEntryLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::fentry::FEntryLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::fentry::FEntryLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::fentry::FEntryLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::fentry::FEntryLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::fentry::FEntryLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::fentry::FEntryLinkId where T: ?core::marker::Sized
pub fn aya::programs::fentry::FEntryLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::fentry::FEntryLinkId where T: ?core::marker::Sized
pub fn aya::programs::fentry::FEntryLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::fentry::FEntryLinkId
pub fn aya::programs::fentry::FEntryLinkId::from(t: T) -> T
pub mod aya::programs::fexit
pub struct aya::programs::fexit::FExit
impl aya::programs::fexit::FExit
pub fn aya::programs::fexit::FExit::attach(&mut self) -> core::result::Result<aya::programs::fexit::FExitLinkId, aya::programs::ProgramError>
pub fn aya::programs::fexit::FExit::load(&mut self, fn_name: &str, btf: &aya_obj::btf::btf::Btf) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::fexit::FExit
pub fn aya::programs::fexit::FExit::detach(&mut self, link_id: aya::programs::fexit::FExitLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::fexit::FExit::take_link(&mut self, link_id: aya::programs::fexit::FExitLinkId) -> core::result::Result<aya::programs::fexit::FExitLink, aya::programs::ProgramError>
impl aya::programs::fexit::FExit
pub fn aya::programs::fexit::FExit::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::fexit::FExit
pub fn aya::programs::fexit::FExit::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::fexit::FExit
pub fn aya::programs::fexit::FExit::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::fexit::FExit
pub fn aya::programs::fexit::FExit::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::fexit::FExit::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::fexit::FExit
pub fn aya::programs::fexit::FExit::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::fexit::FExit
pub fn aya::programs::fexit::FExit::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::fexit::FExit
pub fn aya::programs::fexit::FExit::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::fexit::FExit
pub type &'a aya::programs::fexit::FExit::Error = aya::programs::ProgramError
pub fn &'a aya::programs::fexit::FExit::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::fexit::FExit, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::fexit::FExit
pub type &'a mut aya::programs::fexit::FExit::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::fexit::FExit::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::fexit::FExit, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::fexit::FExit
impl core::marker::Send for aya::programs::fexit::FExit
impl core::marker::Sync for aya::programs::fexit::FExit
impl core::marker::Unpin for aya::programs::fexit::FExit
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::fexit::FExit
impl core::panic::unwind_safe::UnwindSafe for aya::programs::fexit::FExit
impl<T, U> core::convert::Into<U> for aya::programs::fexit::FExit where U: core::convert::From<T>
pub fn aya::programs::fexit::FExit::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::fexit::FExit where U: core::convert::Into<T>
pub type aya::programs::fexit::FExit::Error = core::convert::Infallible
pub fn aya::programs::fexit::FExit::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::fexit::FExit where U: core::convert::TryFrom<T>
pub type aya::programs::fexit::FExit::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::fexit::FExit::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::fexit::FExit where T: 'static + ?core::marker::Sized
pub fn aya::programs::fexit::FExit::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::fexit::FExit where T: ?core::marker::Sized
pub fn aya::programs::fexit::FExit::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::fexit::FExit where T: ?core::marker::Sized
pub fn aya::programs::fexit::FExit::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::fexit::FExit
pub fn aya::programs::fexit::FExit::from(t: T) -> T
pub struct aya::programs::fexit::FExitLink(_)
impl aya::programs::links::Link for aya::programs::fexit::FExitLink
pub type aya::programs::fexit::FExitLink::Id = aya::programs::fexit::FExitLinkId
pub fn aya::programs::fexit::FExitLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::fexit::FExitLink::id(&self) -> Self::Id
impl core::convert::From<aya::programs::fexit::FExitLink> for aya::programs::links::FdLink
pub fn aya::programs::links::FdLink::from(w: aya::programs::fexit::FExitLink) -> aya::programs::links::FdLink
impl core::convert::From<aya::programs::links::FdLink> for aya::programs::fexit::FExitLink
pub fn aya::programs::fexit::FExitLink::from(b: aya::programs::links::FdLink) -> aya::programs::fexit::FExitLink
impl core::fmt::Debug for aya::programs::fexit::FExitLink
pub fn aya::programs::fexit::FExitLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::fexit::FExitLink
pub fn aya::programs::fexit::FExitLink::drop(&mut self)
impl core::marker::Freeze for aya::programs::fexit::FExitLink
impl core::marker::Send for aya::programs::fexit::FExitLink
impl core::marker::Sync for aya::programs::fexit::FExitLink
impl core::marker::Unpin for aya::programs::fexit::FExitLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::fexit::FExitLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::fexit::FExitLink
impl<T, U> core::convert::Into<U> for aya::programs::fexit::FExitLink where U: core::convert::From<T>
pub fn aya::programs::fexit::FExitLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::fexit::FExitLink where U: core::convert::Into<T>
pub type aya::programs::fexit::FExitLink::Error = core::convert::Infallible
pub fn aya::programs::fexit::FExitLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::fexit::FExitLink where U: core::convert::TryFrom<T>
pub type aya::programs::fexit::FExitLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::fexit::FExitLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::fexit::FExitLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::fexit::FExitLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::fexit::FExitLink where T: ?core::marker::Sized
pub fn aya::programs::fexit::FExitLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::fexit::FExitLink where T: ?core::marker::Sized
pub fn aya::programs::fexit::FExitLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::fexit::FExitLink
pub fn aya::programs::fexit::FExitLink::from(t: T) -> T
pub struct aya::programs::fexit::FExitLinkId(_)
impl core::cmp::Eq for aya::programs::fexit::FExitLinkId
impl core::cmp::PartialEq for aya::programs::fexit::FExitLinkId
pub fn aya::programs::fexit::FExitLinkId::eq(&self, other: &aya::programs::fexit::FExitLinkId) -> bool
impl core::fmt::Debug for aya::programs::fexit::FExitLinkId
pub fn aya::programs::fexit::FExitLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::fexit::FExitLinkId
pub fn aya::programs::fexit::FExitLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::fexit::FExitLinkId
impl core::marker::Freeze for aya::programs::fexit::FExitLinkId
impl core::marker::Send for aya::programs::fexit::FExitLinkId
impl core::marker::Sync for aya::programs::fexit::FExitLinkId
impl core::marker::Unpin for aya::programs::fexit::FExitLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::fexit::FExitLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::fexit::FExitLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::fexit::FExitLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::fexit::FExitLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::fexit::FExitLinkId where U: core::convert::From<T>
pub fn aya::programs::fexit::FExitLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::fexit::FExitLinkId where U: core::convert::Into<T>
pub type aya::programs::fexit::FExitLinkId::Error = core::convert::Infallible
pub fn aya::programs::fexit::FExitLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::fexit::FExitLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::fexit::FExitLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::fexit::FExitLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::fexit::FExitLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::fexit::FExitLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::fexit::FExitLinkId where T: ?core::marker::Sized
pub fn aya::programs::fexit::FExitLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::fexit::FExitLinkId where T: ?core::marker::Sized
pub fn aya::programs::fexit::FExitLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::fexit::FExitLinkId
pub fn aya::programs::fexit::FExitLinkId::from(t: T) -> T
pub mod aya::programs::iter
pub struct aya::programs::iter::Iter
impl aya::programs::iter::Iter
pub fn aya::programs::iter::Iter::attach(&mut self) -> core::result::Result<aya::programs::iter::IterLinkId, aya::programs::ProgramError>
pub fn aya::programs::iter::Iter::load(&mut self, iter_type: &str, btf: &aya_obj::btf::btf::Btf) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::iter::Iter
pub fn aya::programs::iter::Iter::detach(&mut self, link_id: aya::programs::iter::IterLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::iter::Iter::take_link(&mut self, link_id: aya::programs::iter::IterLinkId) -> core::result::Result<aya::programs::iter::IterLink, aya::programs::ProgramError>
impl aya::programs::iter::Iter
pub fn aya::programs::iter::Iter::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::iter::Iter
pub fn aya::programs::iter::Iter::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::iter::Iter
pub fn aya::programs::iter::Iter::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::iter::Iter
pub fn aya::programs::iter::Iter::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::iter::Iter::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::iter::Iter
pub fn aya::programs::iter::Iter::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::iter::Iter
pub fn aya::programs::iter::Iter::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::iter::Iter
pub fn aya::programs::iter::Iter::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::iter::Iter
pub type &'a aya::programs::iter::Iter::Error = aya::programs::ProgramError
pub fn &'a aya::programs::iter::Iter::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::iter::Iter, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::iter::Iter
pub type &'a mut aya::programs::iter::Iter::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::iter::Iter::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::iter::Iter, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::iter::Iter
impl core::marker::Send for aya::programs::iter::Iter
impl core::marker::Sync for aya::programs::iter::Iter
impl core::marker::Unpin for aya::programs::iter::Iter
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::iter::Iter
impl core::panic::unwind_safe::UnwindSafe for aya::programs::iter::Iter
impl<T, U> core::convert::Into<U> for aya::programs::iter::Iter where U: core::convert::From<T>
pub fn aya::programs::iter::Iter::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::iter::Iter where U: core::convert::Into<T>
pub type aya::programs::iter::Iter::Error = core::convert::Infallible
pub fn aya::programs::iter::Iter::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::iter::Iter where U: core::convert::TryFrom<T>
pub type aya::programs::iter::Iter::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::iter::Iter::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::iter::Iter where T: 'static + ?core::marker::Sized
pub fn aya::programs::iter::Iter::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::iter::Iter where T: ?core::marker::Sized
pub fn aya::programs::iter::Iter::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::iter::Iter where T: ?core::marker::Sized
pub fn aya::programs::iter::Iter::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::iter::Iter
pub fn aya::programs::iter::Iter::from(t: T) -> T
pub struct aya::programs::iter::IterFd
impl core::fmt::Debug for aya::programs::iter::IterFd
pub fn aya::programs::iter::IterFd::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl std::os::fd::owned::AsFd for aya::programs::iter::IterFd
pub fn aya::programs::iter::IterFd::as_fd(&self) -> std::os::fd::owned::BorrowedFd<'_>
impl core::marker::Freeze for aya::programs::iter::IterFd
impl core::marker::Send for aya::programs::iter::IterFd
impl core::marker::Sync for aya::programs::iter::IterFd
impl core::marker::Unpin for aya::programs::iter::IterFd
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::iter::IterFd
impl core::panic::unwind_safe::UnwindSafe for aya::programs::iter::IterFd
impl<T, U> core::convert::Into<U> for aya::programs::iter::IterFd where U: core::convert::From<T>
pub fn aya::programs::iter::IterFd::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::iter::IterFd where U: core::convert::Into<T>
pub type aya::programs::iter::IterFd::Error = core::convert::Infallible
pub fn aya::programs::iter::IterFd::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::iter::IterFd where U: core::convert::TryFrom<T>
pub type aya::programs::iter::IterFd::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::iter::IterFd::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::iter::IterFd where T: 'static + ?core::marker::Sized
pub fn aya::programs::iter::IterFd::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::iter::IterFd where T: ?core::marker::Sized
pub fn aya::programs::iter::IterFd::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::iter::IterFd where T: ?core::marker::Sized
pub fn aya::programs::iter::IterFd::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::iter::IterFd
pub fn aya::programs::iter::IterFd::from(t: T) -> T
pub struct aya::programs::iter::IterLink(_)
impl aya::programs::iter::IterLink
pub fn aya::programs::iter::IterLink::into_file(self) -> core::result::Result<std::fs::File, aya::programs::links::LinkError>
impl aya::programs::links::Link for aya::programs::iter::IterLink
pub type aya::programs::iter::IterLink::Id = aya::programs::iter::IterLinkId
pub fn aya::programs::iter::IterLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::iter::IterLink::id(&self) -> Self::Id
impl core::convert::TryFrom<aya::programs::iter::IterLink> for aya::programs::links::FdLink
pub type aya::programs::links::FdLink::Error = aya::programs::links::LinkError
pub fn aya::programs::links::FdLink::try_from(value: aya::programs::iter::IterLink) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::programs::links::FdLink> for aya::programs::iter::IterLink
pub type aya::programs::iter::IterLink::Error = aya::programs::links::LinkError
pub fn aya::programs::iter::IterLink::try_from(fd_link: aya::programs::links::FdLink) -> core::result::Result<Self, Self::Error>
impl core::fmt::Debug for aya::programs::iter::IterLink
pub fn aya::programs::iter::IterLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::iter::IterLink
pub fn aya::programs::iter::IterLink::drop(&mut self)
impl core::marker::Freeze for aya::programs::iter::IterLink
impl core::marker::Send for aya::programs::iter::IterLink
impl core::marker::Sync for aya::programs::iter::IterLink
impl core::marker::Unpin for aya::programs::iter::IterLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::iter::IterLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::iter::IterLink
impl<T, U> core::convert::Into<U> for aya::programs::iter::IterLink where U: core::convert::From<T>
pub fn aya::programs::iter::IterLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::iter::IterLink where U: core::convert::Into<T>
pub type aya::programs::iter::IterLink::Error = core::convert::Infallible
pub fn aya::programs::iter::IterLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::iter::IterLink where U: core::convert::TryFrom<T>
pub type aya::programs::iter::IterLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::iter::IterLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::iter::IterLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::iter::IterLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::iter::IterLink where T: ?core::marker::Sized
pub fn aya::programs::iter::IterLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::iter::IterLink where T: ?core::marker::Sized
pub fn aya::programs::iter::IterLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::iter::IterLink
pub fn aya::programs::iter::IterLink::from(t: T) -> T
pub struct aya::programs::iter::IterLinkId(_)
impl core::cmp::Eq for aya::programs::iter::IterLinkId
impl core::cmp::PartialEq for aya::programs::iter::IterLinkId
pub fn aya::programs::iter::IterLinkId::eq(&self, other: &aya::programs::iter::IterLinkId) -> bool
impl core::fmt::Debug for aya::programs::iter::IterLinkId
pub fn aya::programs::iter::IterLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::iter::IterLinkId
pub fn aya::programs::iter::IterLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::iter::IterLinkId
impl core::marker::Freeze for aya::programs::iter::IterLinkId
impl core::marker::Send for aya::programs::iter::IterLinkId
impl core::marker::Sync for aya::programs::iter::IterLinkId
impl core::marker::Unpin for aya::programs::iter::IterLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::iter::IterLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::iter::IterLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::iter::IterLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::iter::IterLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::iter::IterLinkId where U: core::convert::From<T>
pub fn aya::programs::iter::IterLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::iter::IterLinkId where U: core::convert::Into<T>
pub type aya::programs::iter::IterLinkId::Error = core::convert::Infallible
pub fn aya::programs::iter::IterLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::iter::IterLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::iter::IterLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::iter::IterLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::iter::IterLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::iter::IterLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::iter::IterLinkId where T: ?core::marker::Sized
pub fn aya::programs::iter::IterLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::iter::IterLinkId where T: ?core::marker::Sized
pub fn aya::programs::iter::IterLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::iter::IterLinkId
pub fn aya::programs::iter::IterLinkId::from(t: T) -> T
pub mod aya::programs::kprobe
pub enum aya::programs::kprobe::KProbeError
pub aya::programs::kprobe::KProbeError::FileError
pub aya::programs::kprobe::KProbeError::FileError::filename: std::path::PathBuf
pub aya::programs::kprobe::KProbeError::FileError::io_error: std::io::error::Error
impl core::convert::From<aya::programs::kprobe::KProbeError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya::programs::kprobe::KProbeError) -> Self
impl core::error::Error for aya::programs::kprobe::KProbeError
pub fn aya::programs::kprobe::KProbeError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Debug for aya::programs::kprobe::KProbeError
pub fn aya::programs::kprobe::KProbeError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for aya::programs::kprobe::KProbeError
pub fn aya::programs::kprobe::KProbeError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::kprobe::KProbeError
impl core::marker::Send for aya::programs::kprobe::KProbeError
impl core::marker::Sync for aya::programs::kprobe::KProbeError
impl core::marker::Unpin for aya::programs::kprobe::KProbeError
impl !core::panic::unwind_safe::RefUnwindSafe for aya::programs::kprobe::KProbeError
impl !core::panic::unwind_safe::UnwindSafe for aya::programs::kprobe::KProbeError
impl<T, U> core::convert::Into<U> for aya::programs::kprobe::KProbeError where U: core::convert::From<T>
pub fn aya::programs::kprobe::KProbeError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::kprobe::KProbeError where U: core::convert::Into<T>
pub type aya::programs::kprobe::KProbeError::Error = core::convert::Infallible
pub fn aya::programs::kprobe::KProbeError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::kprobe::KProbeError where U: core::convert::TryFrom<T>
pub type aya::programs::kprobe::KProbeError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::kprobe::KProbeError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for aya::programs::kprobe::KProbeError where T: core::fmt::Display + ?core::marker::Sized
pub fn aya::programs::kprobe::KProbeError::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for aya::programs::kprobe::KProbeError where T: 'static + ?core::marker::Sized
pub fn aya::programs::kprobe::KProbeError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::kprobe::KProbeError where T: ?core::marker::Sized
pub fn aya::programs::kprobe::KProbeError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::kprobe::KProbeError where T: ?core::marker::Sized
pub fn aya::programs::kprobe::KProbeError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::kprobe::KProbeError
pub fn aya::programs::kprobe::KProbeError::from(t: T) -> T
pub struct aya::programs::kprobe::KProbe
impl aya::programs::kprobe::KProbe
pub fn aya::programs::kprobe::KProbe::attach<T: core::convert::AsRef<std::ffi::os_str::OsStr>>(&mut self, fn_name: T, offset: u64) -> core::result::Result<aya::programs::kprobe::KProbeLinkId, aya::programs::ProgramError>
pub fn aya::programs::kprobe::KProbe::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P, kind: aya::programs::ProbeKind) -> core::result::Result<Self, aya::programs::ProgramError>
pub fn aya::programs::kprobe::KProbe::kind(&self) -> aya::programs::ProbeKind
pub fn aya::programs::kprobe::KProbe::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::kprobe::KProbe
pub fn aya::programs::kprobe::KProbe::detach(&mut self, link_id: aya::programs::kprobe::KProbeLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::kprobe::KProbe::take_link(&mut self, link_id: aya::programs::kprobe::KProbeLinkId) -> core::result::Result<aya::programs::kprobe::KProbeLink, aya::programs::ProgramError>
impl aya::programs::kprobe::KProbe
pub fn aya::programs::kprobe::KProbe::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::kprobe::KProbe
pub fn aya::programs::kprobe::KProbe::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::kprobe::KProbe
pub fn aya::programs::kprobe::KProbe::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::kprobe::KProbe::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::kprobe::KProbe
pub fn aya::programs::kprobe::KProbe::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::kprobe::KProbe
pub fn aya::programs::kprobe::KProbe::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::kprobe::KProbe
pub fn aya::programs::kprobe::KProbe::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::kprobe::KProbe
pub type &'a aya::programs::kprobe::KProbe::Error = aya::programs::ProgramError
pub fn &'a aya::programs::kprobe::KProbe::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::kprobe::KProbe, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::kprobe::KProbe
pub type &'a mut aya::programs::kprobe::KProbe::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::kprobe::KProbe::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::kprobe::KProbe, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::kprobe::KProbe
impl core::marker::Send for aya::programs::kprobe::KProbe
impl core::marker::Sync for aya::programs::kprobe::KProbe
impl core::marker::Unpin for aya::programs::kprobe::KProbe
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::kprobe::KProbe
impl core::panic::unwind_safe::UnwindSafe for aya::programs::kprobe::KProbe
impl<T, U> core::convert::Into<U> for aya::programs::kprobe::KProbe where U: core::convert::From<T>
pub fn aya::programs::kprobe::KProbe::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::kprobe::KProbe where U: core::convert::Into<T>
pub type aya::programs::kprobe::KProbe::Error = core::convert::Infallible
pub fn aya::programs::kprobe::KProbe::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::kprobe::KProbe where U: core::convert::TryFrom<T>
pub type aya::programs::kprobe::KProbe::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::kprobe::KProbe::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::kprobe::KProbe where T: 'static + ?core::marker::Sized
pub fn aya::programs::kprobe::KProbe::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::kprobe::KProbe where T: ?core::marker::Sized
pub fn aya::programs::kprobe::KProbe::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::kprobe::KProbe where T: ?core::marker::Sized
pub fn aya::programs::kprobe::KProbe::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::kprobe::KProbe
pub fn aya::programs::kprobe::KProbe::from(t: T) -> T
pub struct aya::programs::kprobe::KProbeLink(_)
impl aya::programs::links::Link for aya::programs::kprobe::KProbeLink
pub type aya::programs::kprobe::KProbeLink::Id = aya::programs::kprobe::KProbeLinkId
pub fn aya::programs::kprobe::KProbeLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::kprobe::KProbeLink::id(&self) -> Self::Id
impl core::convert::TryFrom<aya::programs::kprobe::KProbeLink> for aya::programs::links::FdLink
pub type aya::programs::links::FdLink::Error = aya::programs::links::LinkError
pub fn aya::programs::links::FdLink::try_from(value: aya::programs::kprobe::KProbeLink) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::programs::links::FdLink> for aya::programs::kprobe::KProbeLink
pub type aya::programs::kprobe::KProbeLink::Error = aya::programs::links::LinkError
pub fn aya::programs::kprobe::KProbeLink::try_from(fd_link: aya::programs::links::FdLink) -> core::result::Result<Self, Self::Error>
impl core::fmt::Debug for aya::programs::kprobe::KProbeLink
pub fn aya::programs::kprobe::KProbeLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::kprobe::KProbeLink
pub fn aya::programs::kprobe::KProbeLink::drop(&mut self)
impl core::marker::Freeze for aya::programs::kprobe::KProbeLink
impl core::marker::Send for aya::programs::kprobe::KProbeLink
impl core::marker::Sync for aya::programs::kprobe::KProbeLink
impl core::marker::Unpin for aya::programs::kprobe::KProbeLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::kprobe::KProbeLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::kprobe::KProbeLink
impl<T, U> core::convert::Into<U> for aya::programs::kprobe::KProbeLink where U: core::convert::From<T>
pub fn aya::programs::kprobe::KProbeLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::kprobe::KProbeLink where U: core::convert::Into<T>
pub type aya::programs::kprobe::KProbeLink::Error = core::convert::Infallible
pub fn aya::programs::kprobe::KProbeLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::kprobe::KProbeLink where U: core::convert::TryFrom<T>
pub type aya::programs::kprobe::KProbeLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::kprobe::KProbeLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::kprobe::KProbeLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::kprobe::KProbeLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::kprobe::KProbeLink where T: ?core::marker::Sized
pub fn aya::programs::kprobe::KProbeLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::kprobe::KProbeLink where T: ?core::marker::Sized
pub fn aya::programs::kprobe::KProbeLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::kprobe::KProbeLink
pub fn aya::programs::kprobe::KProbeLink::from(t: T) -> T
pub struct aya::programs::kprobe::KProbeLinkId(_)
impl core::cmp::Eq for aya::programs::kprobe::KProbeLinkId
impl core::cmp::PartialEq for aya::programs::kprobe::KProbeLinkId
pub fn aya::programs::kprobe::KProbeLinkId::eq(&self, other: &aya::programs::kprobe::KProbeLinkId) -> bool
impl core::fmt::Debug for aya::programs::kprobe::KProbeLinkId
pub fn aya::programs::kprobe::KProbeLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::kprobe::KProbeLinkId
pub fn aya::programs::kprobe::KProbeLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::kprobe::KProbeLinkId
impl core::marker::Freeze for aya::programs::kprobe::KProbeLinkId
impl core::marker::Send for aya::programs::kprobe::KProbeLinkId
impl core::marker::Sync for aya::programs::kprobe::KProbeLinkId
impl core::marker::Unpin for aya::programs::kprobe::KProbeLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::kprobe::KProbeLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::kprobe::KProbeLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::kprobe::KProbeLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::kprobe::KProbeLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::kprobe::KProbeLinkId where U: core::convert::From<T>
pub fn aya::programs::kprobe::KProbeLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::kprobe::KProbeLinkId where U: core::convert::Into<T>
pub type aya::programs::kprobe::KProbeLinkId::Error = core::convert::Infallible
pub fn aya::programs::kprobe::KProbeLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::kprobe::KProbeLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::kprobe::KProbeLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::kprobe::KProbeLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::kprobe::KProbeLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::kprobe::KProbeLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::kprobe::KProbeLinkId where T: ?core::marker::Sized
pub fn aya::programs::kprobe::KProbeLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::kprobe::KProbeLinkId where T: ?core::marker::Sized
pub fn aya::programs::kprobe::KProbeLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::kprobe::KProbeLinkId
pub fn aya::programs::kprobe::KProbeLinkId::from(t: T) -> T
pub mod aya::programs::links
pub enum aya::programs::links::CgroupAttachMode
pub aya::programs::links::CgroupAttachMode::AllowMultiple
pub aya::programs::links::CgroupAttachMode::AllowOverride
pub aya::programs::links::CgroupAttachMode::Single
impl core::clone::Clone for aya::programs::links::CgroupAttachMode
pub fn aya::programs::links::CgroupAttachMode::clone(&self) -> aya::programs::links::CgroupAttachMode
impl core::convert::From<aya::programs::links::CgroupAttachMode> for u32
pub fn u32::from(mode: aya::programs::links::CgroupAttachMode) -> Self
impl core::default::Default for aya::programs::links::CgroupAttachMode
pub fn aya::programs::links::CgroupAttachMode::default() -> aya::programs::links::CgroupAttachMode
impl core::fmt::Debug for aya::programs::links::CgroupAttachMode
pub fn aya::programs::links::CgroupAttachMode::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for aya::programs::links::CgroupAttachMode
impl core::marker::Freeze for aya::programs::links::CgroupAttachMode
impl core::marker::Send for aya::programs::links::CgroupAttachMode
impl core::marker::Sync for aya::programs::links::CgroupAttachMode
impl core::marker::Unpin for aya::programs::links::CgroupAttachMode
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::links::CgroupAttachMode
impl core::panic::unwind_safe::UnwindSafe for aya::programs::links::CgroupAttachMode
impl<T, U> core::convert::Into<U> for aya::programs::links::CgroupAttachMode where U: core::convert::From<T>
pub fn aya::programs::links::CgroupAttachMode::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::links::CgroupAttachMode where U: core::convert::Into<T>
pub type aya::programs::links::CgroupAttachMode::Error = core::convert::Infallible
pub fn aya::programs::links::CgroupAttachMode::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::links::CgroupAttachMode where U: core::convert::TryFrom<T>
pub type aya::programs::links::CgroupAttachMode::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::links::CgroupAttachMode::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for aya::programs::links::CgroupAttachMode where T: core::clone::Clone
pub type aya::programs::links::CgroupAttachMode::Owned = T
pub fn aya::programs::links::CgroupAttachMode::clone_into(&self, target: &mut T)
pub fn aya::programs::links::CgroupAttachMode::to_owned(&self) -> T
impl<T> core::any::Any for aya::programs::links::CgroupAttachMode where T: 'static + ?core::marker::Sized
pub fn aya::programs::links::CgroupAttachMode::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::links::CgroupAttachMode where T: ?core::marker::Sized
pub fn aya::programs::links::CgroupAttachMode::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::links::CgroupAttachMode where T: ?core::marker::Sized
pub fn aya::programs::links::CgroupAttachMode::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for aya::programs::links::CgroupAttachMode where T: core::clone::Clone
pub unsafe fn aya::programs::links::CgroupAttachMode::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for aya::programs::links::CgroupAttachMode
pub fn aya::programs::links::CgroupAttachMode::from(t: T) -> T
pub enum aya::programs::links::LinkError
pub aya::programs::links::LinkError::InvalidLink
pub aya::programs::links::LinkError::SyscallError(aya::sys::SyscallError)
impl core::convert::From<aya::sys::SyscallError> for aya::programs::links::LinkError
pub fn aya::programs::links::LinkError::from(source: aya::sys::SyscallError) -> Self
impl core::error::Error for aya::programs::links::LinkError
pub fn aya::programs::links::LinkError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Debug for aya::programs::links::LinkError
pub fn aya::programs::links::LinkError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for aya::programs::links::LinkError
pub fn aya::programs::links::LinkError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::links::LinkError
impl core::marker::Send for aya::programs::links::LinkError
impl core::marker::Sync for aya::programs::links::LinkError
impl core::marker::Unpin for aya::programs::links::LinkError
impl !core::panic::unwind_safe::RefUnwindSafe for aya::programs::links::LinkError
impl !core::panic::unwind_safe::UnwindSafe for aya::programs::links::LinkError
impl<T, U> core::convert::Into<U> for aya::programs::links::LinkError where U: core::convert::From<T>
pub fn aya::programs::links::LinkError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::links::LinkError where U: core::convert::Into<T>
pub type aya::programs::links::LinkError::Error = core::convert::Infallible
pub fn aya::programs::links::LinkError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::links::LinkError where U: core::convert::TryFrom<T>
pub type aya::programs::links::LinkError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::links::LinkError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for aya::programs::links::LinkError where T: core::fmt::Display + ?core::marker::Sized
pub fn aya::programs::links::LinkError::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for aya::programs::links::LinkError where T: 'static + ?core::marker::Sized
pub fn aya::programs::links::LinkError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::links::LinkError where T: ?core::marker::Sized
pub fn aya::programs::links::LinkError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::links::LinkError where T: ?core::marker::Sized
pub fn aya::programs::links::LinkError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::links::LinkError
pub fn aya::programs::links::LinkError::from(t: T) -> T
pub struct aya::programs::links::FdLink
impl aya::programs::links::FdLink
pub fn aya::programs::links::FdLink::pin<P: core::convert::AsRef<std::path::Path>>(self, path: P) -> core::result::Result<aya::programs::links::PinnedLink, aya::pin::PinError>
impl aya::programs::links::Link for aya::programs::links::FdLink
pub type aya::programs::links::FdLink::Id = aya::programs::links::FdLinkId
pub fn aya::programs::links::FdLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::links::FdLink::id(&self) -> Self::Id
impl core::convert::From<aya::programs::extension::ExtensionLink> for aya::programs::links::FdLink
pub fn aya::programs::links::FdLink::from(w: aya::programs::extension::ExtensionLink) -> aya::programs::links::FdLink
impl core::convert::From<aya::programs::fentry::FEntryLink> for aya::programs::links::FdLink
pub fn aya::programs::links::FdLink::from(w: aya::programs::fentry::FEntryLink) -> aya::programs::links::FdLink
impl core::convert::From<aya::programs::fexit::FExitLink> for aya::programs::links::FdLink
pub fn aya::programs::links::FdLink::from(w: aya::programs::fexit::FExitLink) -> aya::programs::links::FdLink
impl core::convert::From<aya::programs::links::FdLink> for aya::programs::extension::ExtensionLink
pub fn aya::programs::extension::ExtensionLink::from(b: aya::programs::links::FdLink) -> aya::programs::extension::ExtensionLink
impl core::convert::From<aya::programs::links::FdLink> for aya::programs::fentry::FEntryLink
pub fn aya::programs::fentry::FEntryLink::from(b: aya::programs::links::FdLink) -> aya::programs::fentry::FEntryLink
impl core::convert::From<aya::programs::links::FdLink> for aya::programs::fexit::FExitLink
pub fn aya::programs::fexit::FExitLink::from(b: aya::programs::links::FdLink) -> aya::programs::fexit::FExitLink
impl core::convert::From<aya::programs::links::FdLink> for aya::programs::lsm::LsmLink
pub fn aya::programs::lsm::LsmLink::from(b: aya::programs::links::FdLink) -> aya::programs::lsm::LsmLink
impl core::convert::From<aya::programs::links::FdLink> for aya::programs::raw_trace_point::RawTracePointLink
pub fn aya::programs::raw_trace_point::RawTracePointLink::from(b: aya::programs::links::FdLink) -> aya::programs::raw_trace_point::RawTracePointLink
impl core::convert::From<aya::programs::links::FdLink> for aya::programs::sk_lookup::SkLookupLink
pub fn aya::programs::sk_lookup::SkLookupLink::from(b: aya::programs::links::FdLink) -> aya::programs::sk_lookup::SkLookupLink
impl core::convert::From<aya::programs::links::FdLink> for aya::programs::tp_btf::BtfTracePointLink
pub fn aya::programs::tp_btf::BtfTracePointLink::from(b: aya::programs::links::FdLink) -> aya::programs::tp_btf::BtfTracePointLink
impl core::convert::From<aya::programs::links::PinnedLink> for aya::programs::links::FdLink
pub fn aya::programs::links::FdLink::from(p: aya::programs::links::PinnedLink) -> Self
impl core::convert::From<aya::programs::lsm::LsmLink> for aya::programs::links::FdLink
pub fn aya::programs::links::FdLink::from(w: aya::programs::lsm::LsmLink) -> aya::programs::links::FdLink
impl core::convert::From<aya::programs::raw_trace_point::RawTracePointLink> for aya::programs::links::FdLink
pub fn aya::programs::links::FdLink::from(w: aya::programs::raw_trace_point::RawTracePointLink) -> aya::programs::links::FdLink
impl core::convert::From<aya::programs::sk_lookup::SkLookupLink> for aya::programs::links::FdLink
pub fn aya::programs::links::FdLink::from(w: aya::programs::sk_lookup::SkLookupLink) -> aya::programs::links::FdLink
impl core::convert::From<aya::programs::tp_btf::BtfTracePointLink> for aya::programs::links::FdLink
pub fn aya::programs::links::FdLink::from(w: aya::programs::tp_btf::BtfTracePointLink) -> aya::programs::links::FdLink
impl core::convert::TryFrom<aya::programs::iter::IterLink> for aya::programs::links::FdLink
pub type aya::programs::links::FdLink::Error = aya::programs::links::LinkError
pub fn aya::programs::links::FdLink::try_from(value: aya::programs::iter::IterLink) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::programs::kprobe::KProbeLink> for aya::programs::links::FdLink
pub type aya::programs::links::FdLink::Error = aya::programs::links::LinkError
pub fn aya::programs::links::FdLink::try_from(value: aya::programs::kprobe::KProbeLink) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::programs::links::FdLink> for aya::programs::iter::IterLink
pub type aya::programs::iter::IterLink::Error = aya::programs::links::LinkError
pub fn aya::programs::iter::IterLink::try_from(fd_link: aya::programs::links::FdLink) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::programs::links::FdLink> for aya::programs::kprobe::KProbeLink
pub type aya::programs::kprobe::KProbeLink::Error = aya::programs::links::LinkError
pub fn aya::programs::kprobe::KProbeLink::try_from(fd_link: aya::programs::links::FdLink) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::programs::links::FdLink> for aya::programs::perf_event::PerfEventLink
pub type aya::programs::perf_event::PerfEventLink::Error = aya::programs::links::LinkError
pub fn aya::programs::perf_event::PerfEventLink::try_from(fd_link: aya::programs::links::FdLink) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::programs::links::FdLink> for aya::programs::tc::SchedClassifierLink
pub type aya::programs::tc::SchedClassifierLink::Error = aya::programs::links::LinkError
pub fn aya::programs::tc::SchedClassifierLink::try_from(fd_link: aya::programs::links::FdLink) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::programs::links::FdLink> for aya::programs::trace_point::TracePointLink
pub type aya::programs::trace_point::TracePointLink::Error = aya::programs::links::LinkError
pub fn aya::programs::trace_point::TracePointLink::try_from(fd_link: aya::programs::links::FdLink) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::programs::links::FdLink> for aya::programs::uprobe::UProbeLink
pub type aya::programs::uprobe::UProbeLink::Error = aya::programs::links::LinkError
pub fn aya::programs::uprobe::UProbeLink::try_from(fd_link: aya::programs::links::FdLink) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::programs::links::FdLink> for aya::programs::xdp::XdpLink
pub type aya::programs::xdp::XdpLink::Error = aya::programs::links::LinkError
pub fn aya::programs::xdp::XdpLink::try_from(fd_link: aya::programs::links::FdLink) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::programs::perf_event::PerfEventLink> for aya::programs::links::FdLink
pub type aya::programs::links::FdLink::Error = aya::programs::links::LinkError
pub fn aya::programs::links::FdLink::try_from(value: aya::programs::perf_event::PerfEventLink) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::programs::tc::SchedClassifierLink> for aya::programs::links::FdLink
pub type aya::programs::links::FdLink::Error = aya::programs::links::LinkError
pub fn aya::programs::links::FdLink::try_from(value: aya::programs::tc::SchedClassifierLink) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::programs::trace_point::TracePointLink> for aya::programs::links::FdLink
pub type aya::programs::links::FdLink::Error = aya::programs::links::LinkError
pub fn aya::programs::links::FdLink::try_from(value: aya::programs::trace_point::TracePointLink) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::programs::uprobe::UProbeLink> for aya::programs::links::FdLink
pub type aya::programs::links::FdLink::Error = aya::programs::links::LinkError
pub fn aya::programs::links::FdLink::try_from(value: aya::programs::uprobe::UProbeLink) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::programs::xdp::XdpLink> for aya::programs::links::FdLink
pub type aya::programs::links::FdLink::Error = aya::programs::links::LinkError
pub fn aya::programs::links::FdLink::try_from(value: aya::programs::xdp::XdpLink) -> core::result::Result<Self, Self::Error>
impl core::fmt::Debug for aya::programs::links::FdLink
pub fn aya::programs::links::FdLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<'a> core::convert::TryFrom<&'a aya::programs::tc::SchedClassifierLink> for &'a aya::programs::links::FdLink
pub type &'a aya::programs::links::FdLink::Error = aya::programs::links::LinkError
pub fn &'a aya::programs::links::FdLink::try_from(value: &'a aya::programs::tc::SchedClassifierLink) -> core::result::Result<Self, Self::Error>
impl core::marker::Freeze for aya::programs::links::FdLink
impl core::marker::Send for aya::programs::links::FdLink
impl core::marker::Sync for aya::programs::links::FdLink
impl core::marker::Unpin for aya::programs::links::FdLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::links::FdLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::links::FdLink
impl<T, U> core::convert::Into<U> for aya::programs::links::FdLink where U: core::convert::From<T>
pub fn aya::programs::links::FdLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::links::FdLink where U: core::convert::Into<T>
pub type aya::programs::links::FdLink::Error = core::convert::Infallible
pub fn aya::programs::links::FdLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::links::FdLink where U: core::convert::TryFrom<T>
pub type aya::programs::links::FdLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::links::FdLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::links::FdLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::links::FdLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::links::FdLink where T: ?core::marker::Sized
pub fn aya::programs::links::FdLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::links::FdLink where T: ?core::marker::Sized
pub fn aya::programs::links::FdLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::links::FdLink
pub fn aya::programs::links::FdLink::from(t: T) -> T
pub struct aya::programs::links::FdLinkId(_)
impl core::cmp::Eq for aya::programs::links::FdLinkId
impl core::cmp::PartialEq for aya::programs::links::FdLinkId
pub fn aya::programs::links::FdLinkId::eq(&self, other: &aya::programs::links::FdLinkId) -> bool
impl core::fmt::Debug for aya::programs::links::FdLinkId
pub fn aya::programs::links::FdLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::links::FdLinkId
pub fn aya::programs::links::FdLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::links::FdLinkId
impl core::marker::Freeze for aya::programs::links::FdLinkId
impl core::marker::Send for aya::programs::links::FdLinkId
impl core::marker::Sync for aya::programs::links::FdLinkId
impl core::marker::Unpin for aya::programs::links::FdLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::links::FdLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::links::FdLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::links::FdLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::links::FdLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::links::FdLinkId where U: core::convert::From<T>
pub fn aya::programs::links::FdLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::links::FdLinkId where U: core::convert::Into<T>
pub type aya::programs::links::FdLinkId::Error = core::convert::Infallible
pub fn aya::programs::links::FdLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::links::FdLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::links::FdLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::links::FdLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::links::FdLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::links::FdLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::links::FdLinkId where T: ?core::marker::Sized
pub fn aya::programs::links::FdLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::links::FdLinkId where T: ?core::marker::Sized
pub fn aya::programs::links::FdLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::links::FdLinkId
pub fn aya::programs::links::FdLinkId::from(t: T) -> T
pub struct aya::programs::links::LinkOrder
impl aya::programs::links::LinkOrder
pub fn aya::programs::links::LinkOrder::after_link<L: aya::programs::MultiProgLink>(link: &L) -> core::result::Result<Self, aya::programs::links::LinkError>
pub fn aya::programs::links::LinkOrder::after_program<P: aya::programs::MultiProgram>(program: &P) -> core::result::Result<Self, aya::programs::ProgramError>
pub fn aya::programs::links::LinkOrder::after_program_id(id: aya::programs::ProgramId) -> Self
pub fn aya::programs::links::LinkOrder::before_link<L: aya::programs::MultiProgLink>(link: &L) -> core::result::Result<Self, aya::programs::links::LinkError>
pub fn aya::programs::links::LinkOrder::before_program<P: aya::programs::MultiProgram>(program: &P) -> core::result::Result<Self, aya::programs::ProgramError>
pub fn aya::programs::links::LinkOrder::before_program_id(id: aya::programs::ProgramId) -> Self
pub fn aya::programs::links::LinkOrder::first() -> Self
pub fn aya::programs::links::LinkOrder::last() -> Self
impl core::default::Default for aya::programs::links::LinkOrder
pub fn aya::programs::links::LinkOrder::default() -> Self
impl core::fmt::Debug for aya::programs::links::LinkOrder
pub fn aya::programs::links::LinkOrder::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::links::LinkOrder
impl core::marker::Send for aya::programs::links::LinkOrder
impl core::marker::Sync for aya::programs::links::LinkOrder
impl core::marker::Unpin for aya::programs::links::LinkOrder
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::links::LinkOrder
impl core::panic::unwind_safe::UnwindSafe for aya::programs::links::LinkOrder
impl<T, U> core::convert::Into<U> for aya::programs::links::LinkOrder where U: core::convert::From<T>
pub fn aya::programs::links::LinkOrder::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::links::LinkOrder where U: core::convert::Into<T>
pub type aya::programs::links::LinkOrder::Error = core::convert::Infallible
pub fn aya::programs::links::LinkOrder::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::links::LinkOrder where U: core::convert::TryFrom<T>
pub type aya::programs::links::LinkOrder::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::links::LinkOrder::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::links::LinkOrder where T: 'static + ?core::marker::Sized
pub fn aya::programs::links::LinkOrder::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::links::LinkOrder where T: ?core::marker::Sized
pub fn aya::programs::links::LinkOrder::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::links::LinkOrder where T: ?core::marker::Sized
pub fn aya::programs::links::LinkOrder::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::links::LinkOrder
pub fn aya::programs::links::LinkOrder::from(t: T) -> T
pub struct aya::programs::links::PinnedLink
impl aya::programs::links::PinnedLink
pub fn aya::programs::links::PinnedLink::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::links::LinkError>
pub fn aya::programs::links::PinnedLink::unpin(self) -> core::result::Result<aya::programs::links::FdLink, std::io::error::Error>
impl core::convert::From<aya::programs::links::PinnedLink> for aya::programs::links::FdLink
pub fn aya::programs::links::FdLink::from(p: aya::programs::links::PinnedLink) -> Self
impl core::fmt::Debug for aya::programs::links::PinnedLink
pub fn aya::programs::links::PinnedLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::links::PinnedLink
impl core::marker::Send for aya::programs::links::PinnedLink
impl core::marker::Sync for aya::programs::links::PinnedLink
impl core::marker::Unpin for aya::programs::links::PinnedLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::links::PinnedLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::links::PinnedLink
impl<T, U> core::convert::Into<U> for aya::programs::links::PinnedLink where U: core::convert::From<T>
pub fn aya::programs::links::PinnedLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::links::PinnedLink where U: core::convert::Into<T>
pub type aya::programs::links::PinnedLink::Error = core::convert::Infallible
pub fn aya::programs::links::PinnedLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::links::PinnedLink where U: core::convert::TryFrom<T>
pub type aya::programs::links::PinnedLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::links::PinnedLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::links::PinnedLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::links::PinnedLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::links::PinnedLink where T: ?core::marker::Sized
pub fn aya::programs::links::PinnedLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::links::PinnedLink where T: ?core::marker::Sized
pub fn aya::programs::links::PinnedLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::links::PinnedLink
pub fn aya::programs::links::PinnedLink::from(t: T) -> T
pub struct aya::programs::links::ProgAttachLink
impl aya::programs::links::Link for aya::programs::links::ProgAttachLink
pub type aya::programs::links::ProgAttachLink::Id = aya::programs::links::ProgAttachLinkId
pub fn aya::programs::links::ProgAttachLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::links::ProgAttachLink::id(&self) -> Self::Id
impl core::convert::From<aya::programs::links::ProgAttachLink> for aya::programs::sk_msg::SkMsgLink
pub fn aya::programs::sk_msg::SkMsgLink::from(b: aya::programs::links::ProgAttachLink) -> aya::programs::sk_msg::SkMsgLink
impl core::convert::From<aya::programs::links::ProgAttachLink> for aya::programs::sk_skb::SkSkbLink
pub fn aya::programs::sk_skb::SkSkbLink::from(b: aya::programs::links::ProgAttachLink) -> aya::programs::sk_skb::SkSkbLink
impl core::convert::From<aya::programs::sk_msg::SkMsgLink> for aya::programs::links::ProgAttachLink
pub fn aya::programs::links::ProgAttachLink::from(w: aya::programs::sk_msg::SkMsgLink) -> aya::programs::links::ProgAttachLink
impl core::convert::From<aya::programs::sk_skb::SkSkbLink> for aya::programs::links::ProgAttachLink
pub fn aya::programs::links::ProgAttachLink::from(w: aya::programs::sk_skb::SkSkbLink) -> aya::programs::links::ProgAttachLink
impl core::fmt::Debug for aya::programs::links::ProgAttachLink
pub fn aya::programs::links::ProgAttachLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::links::ProgAttachLink
impl core::marker::Send for aya::programs::links::ProgAttachLink
impl core::marker::Sync for aya::programs::links::ProgAttachLink
impl core::marker::Unpin for aya::programs::links::ProgAttachLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::links::ProgAttachLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::links::ProgAttachLink
impl<T, U> core::convert::Into<U> for aya::programs::links::ProgAttachLink where U: core::convert::From<T>
pub fn aya::programs::links::ProgAttachLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::links::ProgAttachLink where U: core::convert::Into<T>
pub type aya::programs::links::ProgAttachLink::Error = core::convert::Infallible
pub fn aya::programs::links::ProgAttachLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::links::ProgAttachLink where U: core::convert::TryFrom<T>
pub type aya::programs::links::ProgAttachLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::links::ProgAttachLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::links::ProgAttachLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::links::ProgAttachLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::links::ProgAttachLink where T: ?core::marker::Sized
pub fn aya::programs::links::ProgAttachLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::links::ProgAttachLink where T: ?core::marker::Sized
pub fn aya::programs::links::ProgAttachLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::links::ProgAttachLink
pub fn aya::programs::links::ProgAttachLink::from(t: T) -> T
pub struct aya::programs::links::ProgAttachLinkId(_, _, _)
impl core::cmp::Eq for aya::programs::links::ProgAttachLinkId
impl core::cmp::PartialEq for aya::programs::links::ProgAttachLinkId
pub fn aya::programs::links::ProgAttachLinkId::eq(&self, other: &aya::programs::links::ProgAttachLinkId) -> bool
impl core::fmt::Debug for aya::programs::links::ProgAttachLinkId
pub fn aya::programs::links::ProgAttachLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::links::ProgAttachLinkId
pub fn aya::programs::links::ProgAttachLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::links::ProgAttachLinkId
impl core::marker::Freeze for aya::programs::links::ProgAttachLinkId
impl core::marker::Send for aya::programs::links::ProgAttachLinkId
impl core::marker::Sync for aya::programs::links::ProgAttachLinkId
impl core::marker::Unpin for aya::programs::links::ProgAttachLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::links::ProgAttachLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::links::ProgAttachLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::links::ProgAttachLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::links::ProgAttachLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::links::ProgAttachLinkId where U: core::convert::From<T>
pub fn aya::programs::links::ProgAttachLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::links::ProgAttachLinkId where U: core::convert::Into<T>
pub type aya::programs::links::ProgAttachLinkId::Error = core::convert::Infallible
pub fn aya::programs::links::ProgAttachLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::links::ProgAttachLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::links::ProgAttachLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::links::ProgAttachLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::links::ProgAttachLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::links::ProgAttachLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::links::ProgAttachLinkId where T: ?core::marker::Sized
pub fn aya::programs::links::ProgAttachLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::links::ProgAttachLinkId where T: ?core::marker::Sized
pub fn aya::programs::links::ProgAttachLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::links::ProgAttachLinkId
pub fn aya::programs::links::ProgAttachLinkId::from(t: T) -> T
pub trait aya::programs::links::Link: core::fmt::Debug + 'static
pub type aya::programs::links::Link::Id: core::fmt::Debug + core::hash::Hash + core::cmp::Eq + core::cmp::PartialEq
pub fn aya::programs::links::Link::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::links::Link::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::cgroup_device::CgroupDeviceLink
pub type aya::programs::cgroup_device::CgroupDeviceLink::Id = aya::programs::cgroup_device::CgroupDeviceLinkId
pub fn aya::programs::cgroup_device::CgroupDeviceLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_device::CgroupDeviceLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::cgroup_skb::CgroupSkbLink
pub type aya::programs::cgroup_skb::CgroupSkbLink::Id = aya::programs::cgroup_skb::CgroupSkbLinkId
pub fn aya::programs::cgroup_skb::CgroupSkbLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_skb::CgroupSkbLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::cgroup_sock::CgroupSockLink
pub type aya::programs::cgroup_sock::CgroupSockLink::Id = aya::programs::cgroup_sock::CgroupSockLinkId
pub fn aya::programs::cgroup_sock::CgroupSockLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_sock::CgroupSockLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::cgroup_sock_addr::CgroupSockAddrLink
pub type aya::programs::cgroup_sock_addr::CgroupSockAddrLink::Id = aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::cgroup_sockopt::CgroupSockoptLink
pub type aya::programs::cgroup_sockopt::CgroupSockoptLink::Id = aya::programs::cgroup_sockopt::CgroupSockoptLinkId
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::cgroup_sysctl::CgroupSysctlLink
pub type aya::programs::cgroup_sysctl::CgroupSysctlLink::Id = aya::programs::cgroup_sysctl::CgroupSysctlLinkId
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::extension::ExtensionLink
pub type aya::programs::extension::ExtensionLink::Id = aya::programs::extension::ExtensionLinkId
pub fn aya::programs::extension::ExtensionLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::extension::ExtensionLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::fentry::FEntryLink
pub type aya::programs::fentry::FEntryLink::Id = aya::programs::fentry::FEntryLinkId
pub fn aya::programs::fentry::FEntryLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::fentry::FEntryLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::fexit::FExitLink
pub type aya::programs::fexit::FExitLink::Id = aya::programs::fexit::FExitLinkId
pub fn aya::programs::fexit::FExitLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::fexit::FExitLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::iter::IterLink
pub type aya::programs::iter::IterLink::Id = aya::programs::iter::IterLinkId
pub fn aya::programs::iter::IterLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::iter::IterLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::kprobe::KProbeLink
pub type aya::programs::kprobe::KProbeLink::Id = aya::programs::kprobe::KProbeLinkId
pub fn aya::programs::kprobe::KProbeLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::kprobe::KProbeLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::links::FdLink
pub type aya::programs::links::FdLink::Id = aya::programs::links::FdLinkId
pub fn aya::programs::links::FdLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::links::FdLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::links::ProgAttachLink
pub type aya::programs::links::ProgAttachLink::Id = aya::programs::links::ProgAttachLinkId
pub fn aya::programs::links::ProgAttachLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::links::ProgAttachLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::lirc_mode2::LircLink
pub type aya::programs::lirc_mode2::LircLink::Id = aya::programs::lirc_mode2::LircLinkId
pub fn aya::programs::lirc_mode2::LircLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::lirc_mode2::LircLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::lsm::LsmLink
pub type aya::programs::lsm::LsmLink::Id = aya::programs::lsm::LsmLinkId
pub fn aya::programs::lsm::LsmLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::lsm::LsmLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::perf_attach::PerfLink
pub type aya::programs::perf_attach::PerfLink::Id = aya::programs::perf_attach::PerfLinkId
pub fn aya::programs::perf_attach::PerfLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::perf_attach::PerfLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::perf_event::PerfEventLink
pub type aya::programs::perf_event::PerfEventLink::Id = aya::programs::perf_event::PerfEventLinkId
pub fn aya::programs::perf_event::PerfEventLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::perf_event::PerfEventLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::raw_trace_point::RawTracePointLink
pub type aya::programs::raw_trace_point::RawTracePointLink::Id = aya::programs::raw_trace_point::RawTracePointLinkId
pub fn aya::programs::raw_trace_point::RawTracePointLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::raw_trace_point::RawTracePointLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::sk_lookup::SkLookupLink
pub type aya::programs::sk_lookup::SkLookupLink::Id = aya::programs::sk_lookup::SkLookupLinkId
pub fn aya::programs::sk_lookup::SkLookupLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::sk_lookup::SkLookupLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::sk_msg::SkMsgLink
pub type aya::programs::sk_msg::SkMsgLink::Id = aya::programs::sk_msg::SkMsgLinkId
pub fn aya::programs::sk_msg::SkMsgLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::sk_msg::SkMsgLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::sk_skb::SkSkbLink
pub type aya::programs::sk_skb::SkSkbLink::Id = aya::programs::sk_skb::SkSkbLinkId
pub fn aya::programs::sk_skb::SkSkbLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::sk_skb::SkSkbLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::sock_ops::SockOpsLink
pub type aya::programs::sock_ops::SockOpsLink::Id = aya::programs::sock_ops::SockOpsLinkId
pub fn aya::programs::sock_ops::SockOpsLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::sock_ops::SockOpsLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::socket_filter::SocketFilterLink
pub type aya::programs::socket_filter::SocketFilterLink::Id = aya::programs::socket_filter::SocketFilterLinkId
pub fn aya::programs::socket_filter::SocketFilterLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::socket_filter::SocketFilterLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::tc::SchedClassifierLink
pub type aya::programs::tc::SchedClassifierLink::Id = aya::programs::tc::SchedClassifierLinkId
pub fn aya::programs::tc::SchedClassifierLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::tc::SchedClassifierLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::tp_btf::BtfTracePointLink
pub type aya::programs::tp_btf::BtfTracePointLink::Id = aya::programs::tp_btf::BtfTracePointLinkId
pub fn aya::programs::tp_btf::BtfTracePointLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::tp_btf::BtfTracePointLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::trace_point::TracePointLink
pub type aya::programs::trace_point::TracePointLink::Id = aya::programs::trace_point::TracePointLinkId
pub fn aya::programs::trace_point::TracePointLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::trace_point::TracePointLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::uprobe::UProbeLink
pub type aya::programs::uprobe::UProbeLink::Id = aya::programs::uprobe::UProbeLinkId
pub fn aya::programs::uprobe::UProbeLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::uprobe::UProbeLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::xdp::XdpLink
pub type aya::programs::xdp::XdpLink::Id = aya::programs::xdp::XdpLinkId
pub fn aya::programs::xdp::XdpLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::xdp::XdpLink::id(&self) -> Self::Id
pub mod aya::programs::lirc_mode2
pub struct aya::programs::lirc_mode2::LircLink
impl aya::programs::lirc_mode2::LircLink
pub fn aya::programs::lirc_mode2::LircLink::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::links::Link for aya::programs::lirc_mode2::LircLink
pub type aya::programs::lirc_mode2::LircLink::Id = aya::programs::lirc_mode2::LircLinkId
pub fn aya::programs::lirc_mode2::LircLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::lirc_mode2::LircLink::id(&self) -> Self::Id
impl core::fmt::Debug for aya::programs::lirc_mode2::LircLink
pub fn aya::programs::lirc_mode2::LircLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::lirc_mode2::LircLink
impl core::marker::Send for aya::programs::lirc_mode2::LircLink
impl core::marker::Sync for aya::programs::lirc_mode2::LircLink
impl core::marker::Unpin for aya::programs::lirc_mode2::LircLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::lirc_mode2::LircLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::lirc_mode2::LircLink
impl<T, U> core::convert::Into<U> for aya::programs::lirc_mode2::LircLink where U: core::convert::From<T>
pub fn aya::programs::lirc_mode2::LircLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::lirc_mode2::LircLink where U: core::convert::Into<T>
pub type aya::programs::lirc_mode2::LircLink::Error = core::convert::Infallible
pub fn aya::programs::lirc_mode2::LircLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::lirc_mode2::LircLink where U: core::convert::TryFrom<T>
pub type aya::programs::lirc_mode2::LircLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::lirc_mode2::LircLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::lirc_mode2::LircLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::lirc_mode2::LircLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::lirc_mode2::LircLink where T: ?core::marker::Sized
pub fn aya::programs::lirc_mode2::LircLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::lirc_mode2::LircLink where T: ?core::marker::Sized
pub fn aya::programs::lirc_mode2::LircLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::lirc_mode2::LircLink
pub fn aya::programs::lirc_mode2::LircLink::from(t: T) -> T
pub struct aya::programs::lirc_mode2::LircLinkId(_, _)
impl core::cmp::Eq for aya::programs::lirc_mode2::LircLinkId
impl core::cmp::PartialEq for aya::programs::lirc_mode2::LircLinkId
pub fn aya::programs::lirc_mode2::LircLinkId::eq(&self, other: &aya::programs::lirc_mode2::LircLinkId) -> bool
impl core::fmt::Debug for aya::programs::lirc_mode2::LircLinkId
pub fn aya::programs::lirc_mode2::LircLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::lirc_mode2::LircLinkId
pub fn aya::programs::lirc_mode2::LircLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::lirc_mode2::LircLinkId
impl core::marker::Freeze for aya::programs::lirc_mode2::LircLinkId
impl core::marker::Send for aya::programs::lirc_mode2::LircLinkId
impl core::marker::Sync for aya::programs::lirc_mode2::LircLinkId
impl core::marker::Unpin for aya::programs::lirc_mode2::LircLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::lirc_mode2::LircLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::lirc_mode2::LircLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::lirc_mode2::LircLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::lirc_mode2::LircLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::lirc_mode2::LircLinkId where U: core::convert::From<T>
pub fn aya::programs::lirc_mode2::LircLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::lirc_mode2::LircLinkId where U: core::convert::Into<T>
pub type aya::programs::lirc_mode2::LircLinkId::Error = core::convert::Infallible
pub fn aya::programs::lirc_mode2::LircLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::lirc_mode2::LircLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::lirc_mode2::LircLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::lirc_mode2::LircLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::lirc_mode2::LircLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::lirc_mode2::LircLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::lirc_mode2::LircLinkId where T: ?core::marker::Sized
pub fn aya::programs::lirc_mode2::LircLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::lirc_mode2::LircLinkId where T: ?core::marker::Sized
pub fn aya::programs::lirc_mode2::LircLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::lirc_mode2::LircLinkId
pub fn aya::programs::lirc_mode2::LircLinkId::from(t: T) -> T
pub struct aya::programs::lirc_mode2::LircMode2
impl aya::programs::lirc_mode2::LircMode2
pub fn aya::programs::lirc_mode2::LircMode2::attach<T: std::os::fd::owned::AsFd>(&mut self, lircdev: T) -> core::result::Result<aya::programs::lirc_mode2::LircLinkId, aya::programs::ProgramError>
pub fn aya::programs::lirc_mode2::LircMode2::detach(&mut self, link_id: aya::programs::lirc_mode2::LircLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::lirc_mode2::LircMode2::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::lirc_mode2::LircMode2::query<T: std::os::fd::owned::AsFd>(target_fd: T) -> core::result::Result<alloc::vec::Vec<aya::programs::lirc_mode2::LircLink>, aya::programs::ProgramError>
pub fn aya::programs::lirc_mode2::LircMode2::take_link(&mut self, link_id: aya::programs::lirc_mode2::LircLinkId) -> core::result::Result<aya::programs::lirc_mode2::LircLink, aya::programs::ProgramError>
impl aya::programs::lirc_mode2::LircMode2
pub fn aya::programs::lirc_mode2::LircMode2::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::lirc_mode2::LircMode2
pub fn aya::programs::lirc_mode2::LircMode2::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::lirc_mode2::LircMode2
pub fn aya::programs::lirc_mode2::LircMode2::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::lirc_mode2::LircMode2
pub fn aya::programs::lirc_mode2::LircMode2::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::lirc_mode2::LircMode2::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::lirc_mode2::LircMode2
pub fn aya::programs::lirc_mode2::LircMode2::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::lirc_mode2::LircMode2
pub fn aya::programs::lirc_mode2::LircMode2::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::lirc_mode2::LircMode2
pub fn aya::programs::lirc_mode2::LircMode2::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::lirc_mode2::LircMode2
pub type &'a aya::programs::lirc_mode2::LircMode2::Error = aya::programs::ProgramError
pub fn &'a aya::programs::lirc_mode2::LircMode2::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::lirc_mode2::LircMode2, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::lirc_mode2::LircMode2
pub type &'a mut aya::programs::lirc_mode2::LircMode2::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::lirc_mode2::LircMode2::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::lirc_mode2::LircMode2, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::lirc_mode2::LircMode2
impl core::marker::Send for aya::programs::lirc_mode2::LircMode2
impl core::marker::Sync for aya::programs::lirc_mode2::LircMode2
impl core::marker::Unpin for aya::programs::lirc_mode2::LircMode2
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::lirc_mode2::LircMode2
impl core::panic::unwind_safe::UnwindSafe for aya::programs::lirc_mode2::LircMode2
impl<T, U> core::convert::Into<U> for aya::programs::lirc_mode2::LircMode2 where U: core::convert::From<T>
pub fn aya::programs::lirc_mode2::LircMode2::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::lirc_mode2::LircMode2 where U: core::convert::Into<T>
pub type aya::programs::lirc_mode2::LircMode2::Error = core::convert::Infallible
pub fn aya::programs::lirc_mode2::LircMode2::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::lirc_mode2::LircMode2 where U: core::convert::TryFrom<T>
pub type aya::programs::lirc_mode2::LircMode2::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::lirc_mode2::LircMode2::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::lirc_mode2::LircMode2 where T: 'static + ?core::marker::Sized
pub fn aya::programs::lirc_mode2::LircMode2::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::lirc_mode2::LircMode2 where T: ?core::marker::Sized
pub fn aya::programs::lirc_mode2::LircMode2::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::lirc_mode2::LircMode2 where T: ?core::marker::Sized
pub fn aya::programs::lirc_mode2::LircMode2::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::lirc_mode2::LircMode2
pub fn aya::programs::lirc_mode2::LircMode2::from(t: T) -> T
pub mod aya::programs::lsm
pub struct aya::programs::lsm::Lsm
impl aya::programs::lsm::Lsm
pub fn aya::programs::lsm::Lsm::attach(&mut self) -> core::result::Result<aya::programs::lsm::LsmLinkId, aya::programs::ProgramError>
pub fn aya::programs::lsm::Lsm::load(&mut self, lsm_hook_name: &str, btf: &aya_obj::btf::btf::Btf) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::lsm::Lsm
pub fn aya::programs::lsm::Lsm::detach(&mut self, link_id: aya::programs::lsm::LsmLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::lsm::Lsm::take_link(&mut self, link_id: aya::programs::lsm::LsmLinkId) -> core::result::Result<aya::programs::lsm::LsmLink, aya::programs::ProgramError>
impl aya::programs::lsm::Lsm
pub fn aya::programs::lsm::Lsm::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::lsm::Lsm
pub fn aya::programs::lsm::Lsm::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::lsm::Lsm
pub fn aya::programs::lsm::Lsm::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::lsm::Lsm
pub fn aya::programs::lsm::Lsm::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::lsm::Lsm::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::lsm::Lsm
pub fn aya::programs::lsm::Lsm::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::lsm::Lsm
pub fn aya::programs::lsm::Lsm::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::lsm::Lsm
pub fn aya::programs::lsm::Lsm::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::lsm::Lsm
pub type &'a aya::programs::lsm::Lsm::Error = aya::programs::ProgramError
pub fn &'a aya::programs::lsm::Lsm::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::lsm::Lsm, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::lsm::Lsm
pub type &'a mut aya::programs::lsm::Lsm::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::lsm::Lsm::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::lsm::Lsm, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::lsm::Lsm
impl core::marker::Send for aya::programs::lsm::Lsm
impl core::marker::Sync for aya::programs::lsm::Lsm
impl core::marker::Unpin for aya::programs::lsm::Lsm
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::lsm::Lsm
impl core::panic::unwind_safe::UnwindSafe for aya::programs::lsm::Lsm
impl<T, U> core::convert::Into<U> for aya::programs::lsm::Lsm where U: core::convert::From<T>
pub fn aya::programs::lsm::Lsm::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::lsm::Lsm where U: core::convert::Into<T>
pub type aya::programs::lsm::Lsm::Error = core::convert::Infallible
pub fn aya::programs::lsm::Lsm::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::lsm::Lsm where U: core::convert::TryFrom<T>
pub type aya::programs::lsm::Lsm::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::lsm::Lsm::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::lsm::Lsm where T: 'static + ?core::marker::Sized
pub fn aya::programs::lsm::Lsm::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::lsm::Lsm where T: ?core::marker::Sized
pub fn aya::programs::lsm::Lsm::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::lsm::Lsm where T: ?core::marker::Sized
pub fn aya::programs::lsm::Lsm::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::lsm::Lsm
pub fn aya::programs::lsm::Lsm::from(t: T) -> T
pub struct aya::programs::lsm::LsmLink(_)
impl aya::programs::links::Link for aya::programs::lsm::LsmLink
pub type aya::programs::lsm::LsmLink::Id = aya::programs::lsm::LsmLinkId
pub fn aya::programs::lsm::LsmLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::lsm::LsmLink::id(&self) -> Self::Id
impl core::convert::From<aya::programs::links::FdLink> for aya::programs::lsm::LsmLink
pub fn aya::programs::lsm::LsmLink::from(b: aya::programs::links::FdLink) -> aya::programs::lsm::LsmLink
impl core::convert::From<aya::programs::lsm::LsmLink> for aya::programs::links::FdLink
pub fn aya::programs::links::FdLink::from(w: aya::programs::lsm::LsmLink) -> aya::programs::links::FdLink
impl core::fmt::Debug for aya::programs::lsm::LsmLink
pub fn aya::programs::lsm::LsmLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::lsm::LsmLink
pub fn aya::programs::lsm::LsmLink::drop(&mut self)
impl core::marker::Freeze for aya::programs::lsm::LsmLink
impl core::marker::Send for aya::programs::lsm::LsmLink
impl core::marker::Sync for aya::programs::lsm::LsmLink
impl core::marker::Unpin for aya::programs::lsm::LsmLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::lsm::LsmLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::lsm::LsmLink
impl<T, U> core::convert::Into<U> for aya::programs::lsm::LsmLink where U: core::convert::From<T>
pub fn aya::programs::lsm::LsmLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::lsm::LsmLink where U: core::convert::Into<T>
pub type aya::programs::lsm::LsmLink::Error = core::convert::Infallible
pub fn aya::programs::lsm::LsmLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::lsm::LsmLink where U: core::convert::TryFrom<T>
pub type aya::programs::lsm::LsmLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::lsm::LsmLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::lsm::LsmLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::lsm::LsmLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::lsm::LsmLink where T: ?core::marker::Sized
pub fn aya::programs::lsm::LsmLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::lsm::LsmLink where T: ?core::marker::Sized
pub fn aya::programs::lsm::LsmLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::lsm::LsmLink
pub fn aya::programs::lsm::LsmLink::from(t: T) -> T
pub struct aya::programs::lsm::LsmLinkId(_)
impl core::cmp::Eq for aya::programs::lsm::LsmLinkId
impl core::cmp::PartialEq for aya::programs::lsm::LsmLinkId
pub fn aya::programs::lsm::LsmLinkId::eq(&self, other: &aya::programs::lsm::LsmLinkId) -> bool
impl core::fmt::Debug for aya::programs::lsm::LsmLinkId
pub fn aya::programs::lsm::LsmLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::lsm::LsmLinkId
pub fn aya::programs::lsm::LsmLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::lsm::LsmLinkId
impl core::marker::Freeze for aya::programs::lsm::LsmLinkId
impl core::marker::Send for aya::programs::lsm::LsmLinkId
impl core::marker::Sync for aya::programs::lsm::LsmLinkId
impl core::marker::Unpin for aya::programs::lsm::LsmLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::lsm::LsmLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::lsm::LsmLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::lsm::LsmLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::lsm::LsmLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::lsm::LsmLinkId where U: core::convert::From<T>
pub fn aya::programs::lsm::LsmLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::lsm::LsmLinkId where U: core::convert::Into<T>
pub type aya::programs::lsm::LsmLinkId::Error = core::convert::Infallible
pub fn aya::programs::lsm::LsmLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::lsm::LsmLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::lsm::LsmLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::lsm::LsmLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::lsm::LsmLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::lsm::LsmLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::lsm::LsmLinkId where T: ?core::marker::Sized
pub fn aya::programs::lsm::LsmLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::lsm::LsmLinkId where T: ?core::marker::Sized
pub fn aya::programs::lsm::LsmLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::lsm::LsmLinkId
pub fn aya::programs::lsm::LsmLinkId::from(t: T) -> T
pub mod aya::programs::perf_attach
pub struct aya::programs::perf_attach::PerfLink
impl aya::programs::links::Link for aya::programs::perf_attach::PerfLink
pub type aya::programs::perf_attach::PerfLink::Id = aya::programs::perf_attach::PerfLinkId
pub fn aya::programs::perf_attach::PerfLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::perf_attach::PerfLink::id(&self) -> Self::Id
impl core::fmt::Debug for aya::programs::perf_attach::PerfLink
pub fn aya::programs::perf_attach::PerfLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::perf_attach::PerfLink
impl core::marker::Send for aya::programs::perf_attach::PerfLink
impl core::marker::Sync for aya::programs::perf_attach::PerfLink
impl core::marker::Unpin for aya::programs::perf_attach::PerfLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::perf_attach::PerfLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::perf_attach::PerfLink
impl<T, U> core::convert::Into<U> for aya::programs::perf_attach::PerfLink where U: core::convert::From<T>
pub fn aya::programs::perf_attach::PerfLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::perf_attach::PerfLink where U: core::convert::Into<T>
pub type aya::programs::perf_attach::PerfLink::Error = core::convert::Infallible
pub fn aya::programs::perf_attach::PerfLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::perf_attach::PerfLink where U: core::convert::TryFrom<T>
pub type aya::programs::perf_attach::PerfLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::perf_attach::PerfLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::perf_attach::PerfLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::perf_attach::PerfLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::perf_attach::PerfLink where T: ?core::marker::Sized
pub fn aya::programs::perf_attach::PerfLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::perf_attach::PerfLink where T: ?core::marker::Sized
pub fn aya::programs::perf_attach::PerfLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::perf_attach::PerfLink
pub fn aya::programs::perf_attach::PerfLink::from(t: T) -> T
pub struct aya::programs::perf_attach::PerfLinkId(_)
impl core::cmp::Eq for aya::programs::perf_attach::PerfLinkId
impl core::cmp::PartialEq for aya::programs::perf_attach::PerfLinkId
pub fn aya::programs::perf_attach::PerfLinkId::eq(&self, other: &aya::programs::perf_attach::PerfLinkId) -> bool
impl core::fmt::Debug for aya::programs::perf_attach::PerfLinkId
pub fn aya::programs::perf_attach::PerfLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::perf_attach::PerfLinkId
pub fn aya::programs::perf_attach::PerfLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::perf_attach::PerfLinkId
impl core::marker::Freeze for aya::programs::perf_attach::PerfLinkId
impl core::marker::Send for aya::programs::perf_attach::PerfLinkId
impl core::marker::Sync for aya::programs::perf_attach::PerfLinkId
impl core::marker::Unpin for aya::programs::perf_attach::PerfLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::perf_attach::PerfLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::perf_attach::PerfLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::perf_attach::PerfLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::perf_attach::PerfLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::perf_attach::PerfLinkId where U: core::convert::From<T>
pub fn aya::programs::perf_attach::PerfLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::perf_attach::PerfLinkId where U: core::convert::Into<T>
pub type aya::programs::perf_attach::PerfLinkId::Error = core::convert::Infallible
pub fn aya::programs::perf_attach::PerfLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::perf_attach::PerfLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::perf_attach::PerfLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::perf_attach::PerfLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::perf_attach::PerfLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::perf_attach::PerfLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::perf_attach::PerfLinkId where T: ?core::marker::Sized
pub fn aya::programs::perf_attach::PerfLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::perf_attach::PerfLinkId where T: ?core::marker::Sized
pub fn aya::programs::perf_attach::PerfLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::perf_attach::PerfLinkId
pub fn aya::programs::perf_attach::PerfLinkId::from(t: T) -> T
pub mod aya::programs::perf_event
pub use aya::programs::perf_event::perf_hw_cache_id
pub use aya::programs::perf_event::perf_hw_cache_op_id
pub use aya::programs::perf_event::perf_hw_cache_op_result_id
pub use aya::programs::perf_event::perf_hw_id
pub use aya::programs::perf_event::perf_sw_ids
pub enum aya::programs::perf_event::PerfEventScope
pub aya::programs::perf_event::PerfEventScope::AllProcessesOneCpu
pub aya::programs::perf_event::PerfEventScope::AllProcessesOneCpu::cpu: u32
pub aya::programs::perf_event::PerfEventScope::CallingProcessAnyCpu
pub aya::programs::perf_event::PerfEventScope::CallingProcessOneCpu
pub aya::programs::perf_event::PerfEventScope::CallingProcessOneCpu::cpu: u32
pub aya::programs::perf_event::PerfEventScope::OneProcessAnyCpu
pub aya::programs::perf_event::PerfEventScope::OneProcessAnyCpu::pid: u32
pub aya::programs::perf_event::PerfEventScope::OneProcessOneCpu
pub aya::programs::perf_event::PerfEventScope::OneProcessOneCpu::cpu: u32
pub aya::programs::perf_event::PerfEventScope::OneProcessOneCpu::pid: u32
impl core::clone::Clone for aya::programs::perf_event::PerfEventScope
pub fn aya::programs::perf_event::PerfEventScope::clone(&self) -> aya::programs::perf_event::PerfEventScope
impl core::fmt::Debug for aya::programs::perf_event::PerfEventScope
pub fn aya::programs::perf_event::PerfEventScope::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::perf_event::PerfEventScope
impl core::marker::Send for aya::programs::perf_event::PerfEventScope
impl core::marker::Sync for aya::programs::perf_event::PerfEventScope
impl core::marker::Unpin for aya::programs::perf_event::PerfEventScope
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::perf_event::PerfEventScope
impl core::panic::unwind_safe::UnwindSafe for aya::programs::perf_event::PerfEventScope
impl<T, U> core::convert::Into<U> for aya::programs::perf_event::PerfEventScope where U: core::convert::From<T>
pub fn aya::programs::perf_event::PerfEventScope::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::perf_event::PerfEventScope where U: core::convert::Into<T>
pub type aya::programs::perf_event::PerfEventScope::Error = core::convert::Infallible
pub fn aya::programs::perf_event::PerfEventScope::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::perf_event::PerfEventScope where U: core::convert::TryFrom<T>
pub type aya::programs::perf_event::PerfEventScope::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::perf_event::PerfEventScope::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for aya::programs::perf_event::PerfEventScope where T: core::clone::Clone
pub type aya::programs::perf_event::PerfEventScope::Owned = T
pub fn aya::programs::perf_event::PerfEventScope::clone_into(&self, target: &mut T)
pub fn aya::programs::perf_event::PerfEventScope::to_owned(&self) -> T
impl<T> core::any::Any for aya::programs::perf_event::PerfEventScope where T: 'static + ?core::marker::Sized
pub fn aya::programs::perf_event::PerfEventScope::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::perf_event::PerfEventScope where T: ?core::marker::Sized
pub fn aya::programs::perf_event::PerfEventScope::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::perf_event::PerfEventScope where T: ?core::marker::Sized
pub fn aya::programs::perf_event::PerfEventScope::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for aya::programs::perf_event::PerfEventScope where T: core::clone::Clone
pub unsafe fn aya::programs::perf_event::PerfEventScope::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for aya::programs::perf_event::PerfEventScope
pub fn aya::programs::perf_event::PerfEventScope::from(t: T) -> T
#[repr(u32)] pub enum aya::programs::perf_event::PerfTypeId
pub aya::programs::perf_event::PerfTypeId::Breakpoint = 5
pub aya::programs::perf_event::PerfTypeId::Hardware = 0
pub aya::programs::perf_event::PerfTypeId::HwCache = 3
pub aya::programs::perf_event::PerfTypeId::Raw = 4
pub aya::programs::perf_event::PerfTypeId::Software = 1
pub aya::programs::perf_event::PerfTypeId::TracePoint = 2
impl core::clone::Clone for aya::programs::perf_event::PerfTypeId
pub fn aya::programs::perf_event::PerfTypeId::clone(&self) -> aya::programs::perf_event::PerfTypeId
impl core::fmt::Debug for aya::programs::perf_event::PerfTypeId
pub fn aya::programs::perf_event::PerfTypeId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::perf_event::PerfTypeId
impl core::marker::Send for aya::programs::perf_event::PerfTypeId
impl core::marker::Sync for aya::programs::perf_event::PerfTypeId
impl core::marker::Unpin for aya::programs::perf_event::PerfTypeId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::perf_event::PerfTypeId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::perf_event::PerfTypeId
impl<T, U> core::convert::Into<U> for aya::programs::perf_event::PerfTypeId where U: core::convert::From<T>
pub fn aya::programs::perf_event::PerfTypeId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::perf_event::PerfTypeId where U: core::convert::Into<T>
pub type aya::programs::perf_event::PerfTypeId::Error = core::convert::Infallible
pub fn aya::programs::perf_event::PerfTypeId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::perf_event::PerfTypeId where U: core::convert::TryFrom<T>
pub type aya::programs::perf_event::PerfTypeId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::perf_event::PerfTypeId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for aya::programs::perf_event::PerfTypeId where T: core::clone::Clone
pub type aya::programs::perf_event::PerfTypeId::Owned = T
pub fn aya::programs::perf_event::PerfTypeId::clone_into(&self, target: &mut T)
pub fn aya::programs::perf_event::PerfTypeId::to_owned(&self) -> T
impl<T> core::any::Any for aya::programs::perf_event::PerfTypeId where T: 'static + ?core::marker::Sized
pub fn aya::programs::perf_event::PerfTypeId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::perf_event::PerfTypeId where T: ?core::marker::Sized
pub fn aya::programs::perf_event::PerfTypeId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::perf_event::PerfTypeId where T: ?core::marker::Sized
pub fn aya::programs::perf_event::PerfTypeId::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for aya::programs::perf_event::PerfTypeId where T: core::clone::Clone
pub unsafe fn aya::programs::perf_event::PerfTypeId::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for aya::programs::perf_event::PerfTypeId
pub fn aya::programs::perf_event::PerfTypeId::from(t: T) -> T
pub enum aya::programs::perf_event::SamplePolicy
pub aya::programs::perf_event::SamplePolicy::Frequency(u64)
pub aya::programs::perf_event::SamplePolicy::Period(u64)
impl core::clone::Clone for aya::programs::perf_event::SamplePolicy
pub fn aya::programs::perf_event::SamplePolicy::clone(&self) -> aya::programs::perf_event::SamplePolicy
impl core::fmt::Debug for aya::programs::perf_event::SamplePolicy
pub fn aya::programs::perf_event::SamplePolicy::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::perf_event::SamplePolicy
impl core::marker::Send for aya::programs::perf_event::SamplePolicy
impl core::marker::Sync for aya::programs::perf_event::SamplePolicy
impl core::marker::Unpin for aya::programs::perf_event::SamplePolicy
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::perf_event::SamplePolicy
impl core::panic::unwind_safe::UnwindSafe for aya::programs::perf_event::SamplePolicy
impl<T, U> core::convert::Into<U> for aya::programs::perf_event::SamplePolicy where U: core::convert::From<T>
pub fn aya::programs::perf_event::SamplePolicy::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::perf_event::SamplePolicy where U: core::convert::Into<T>
pub type aya::programs::perf_event::SamplePolicy::Error = core::convert::Infallible
pub fn aya::programs::perf_event::SamplePolicy::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::perf_event::SamplePolicy where U: core::convert::TryFrom<T>
pub type aya::programs::perf_event::SamplePolicy::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::perf_event::SamplePolicy::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for aya::programs::perf_event::SamplePolicy where T: core::clone::Clone
pub type aya::programs::perf_event::SamplePolicy::Owned = T
pub fn aya::programs::perf_event::SamplePolicy::clone_into(&self, target: &mut T)
pub fn aya::programs::perf_event::SamplePolicy::to_owned(&self) -> T
impl<T> core::any::Any for aya::programs::perf_event::SamplePolicy where T: 'static + ?core::marker::Sized
pub fn aya::programs::perf_event::SamplePolicy::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::perf_event::SamplePolicy where T: ?core::marker::Sized
pub fn aya::programs::perf_event::SamplePolicy::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::perf_event::SamplePolicy where T: ?core::marker::Sized
pub fn aya::programs::perf_event::SamplePolicy::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for aya::programs::perf_event::SamplePolicy where T: core::clone::Clone
pub unsafe fn aya::programs::perf_event::SamplePolicy::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for aya::programs::perf_event::SamplePolicy
pub fn aya::programs::perf_event::SamplePolicy::from(t: T) -> T
pub struct aya::programs::perf_event::PerfEvent
impl aya::programs::perf_event::PerfEvent
pub fn aya::programs::perf_event::PerfEvent::attach(&mut self, perf_type: aya::programs::perf_event::PerfTypeId, config: u64, scope: aya::programs::perf_event::PerfEventScope, sample_policy: aya::programs::perf_event::SamplePolicy, inherit: bool) -> core::result::Result<aya::programs::perf_event::PerfEventLinkId, aya::programs::ProgramError>
pub fn aya::programs::perf_event::PerfEvent::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::perf_event::PerfEvent
pub fn aya::programs::perf_event::PerfEvent::detach(&mut self, link_id: aya::programs::perf_event::PerfEventLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::perf_event::PerfEvent::take_link(&mut self, link_id: aya::programs::perf_event::PerfEventLinkId) -> core::result::Result<aya::programs::perf_event::PerfEventLink, aya::programs::ProgramError>
impl aya::programs::perf_event::PerfEvent
pub fn aya::programs::perf_event::PerfEvent::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::perf_event::PerfEvent
pub fn aya::programs::perf_event::PerfEvent::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::perf_event::PerfEvent
pub fn aya::programs::perf_event::PerfEvent::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::perf_event::PerfEvent
pub fn aya::programs::perf_event::PerfEvent::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::perf_event::PerfEvent::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::perf_event::PerfEvent
pub fn aya::programs::perf_event::PerfEvent::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::perf_event::PerfEvent
pub fn aya::programs::perf_event::PerfEvent::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::perf_event::PerfEvent
pub fn aya::programs::perf_event::PerfEvent::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::perf_event::PerfEvent
pub type &'a aya::programs::perf_event::PerfEvent::Error = aya::programs::ProgramError
pub fn &'a aya::programs::perf_event::PerfEvent::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::perf_event::PerfEvent, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::perf_event::PerfEvent
pub type &'a mut aya::programs::perf_event::PerfEvent::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::perf_event::PerfEvent::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::perf_event::PerfEvent, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::perf_event::PerfEvent
impl core::marker::Send for aya::programs::perf_event::PerfEvent
impl core::marker::Sync for aya::programs::perf_event::PerfEvent
impl core::marker::Unpin for aya::programs::perf_event::PerfEvent
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::perf_event::PerfEvent
impl core::panic::unwind_safe::UnwindSafe for aya::programs::perf_event::PerfEvent
impl<T, U> core::convert::Into<U> for aya::programs::perf_event::PerfEvent where U: core::convert::From<T>
pub fn aya::programs::perf_event::PerfEvent::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::perf_event::PerfEvent where U: core::convert::Into<T>
pub type aya::programs::perf_event::PerfEvent::Error = core::convert::Infallible
pub fn aya::programs::perf_event::PerfEvent::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::perf_event::PerfEvent where U: core::convert::TryFrom<T>
pub type aya::programs::perf_event::PerfEvent::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::perf_event::PerfEvent::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::perf_event::PerfEvent where T: 'static + ?core::marker::Sized
pub fn aya::programs::perf_event::PerfEvent::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::perf_event::PerfEvent where T: ?core::marker::Sized
pub fn aya::programs::perf_event::PerfEvent::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::perf_event::PerfEvent where T: ?core::marker::Sized
pub fn aya::programs::perf_event::PerfEvent::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::perf_event::PerfEvent
pub fn aya::programs::perf_event::PerfEvent::from(t: T) -> T
pub struct aya::programs::perf_event::PerfEventLink(_)
impl aya::programs::links::Link for aya::programs::perf_event::PerfEventLink
pub type aya::programs::perf_event::PerfEventLink::Id = aya::programs::perf_event::PerfEventLinkId
pub fn aya::programs::perf_event::PerfEventLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::perf_event::PerfEventLink::id(&self) -> Self::Id
impl core::convert::TryFrom<aya::programs::links::FdLink> for aya::programs::perf_event::PerfEventLink
pub type aya::programs::perf_event::PerfEventLink::Error = aya::programs::links::LinkError
pub fn aya::programs::perf_event::PerfEventLink::try_from(fd_link: aya::programs::links::FdLink) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::programs::perf_event::PerfEventLink> for aya::programs::links::FdLink
pub type aya::programs::links::FdLink::Error = aya::programs::links::LinkError
pub fn aya::programs::links::FdLink::try_from(value: aya::programs::perf_event::PerfEventLink) -> core::result::Result<Self, Self::Error>
impl core::fmt::Debug for aya::programs::perf_event::PerfEventLink
pub fn aya::programs::perf_event::PerfEventLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::perf_event::PerfEventLink
pub fn aya::programs::perf_event::PerfEventLink::drop(&mut self)
impl core::marker::Freeze for aya::programs::perf_event::PerfEventLink
impl core::marker::Send for aya::programs::perf_event::PerfEventLink
impl core::marker::Sync for aya::programs::perf_event::PerfEventLink
impl core::marker::Unpin for aya::programs::perf_event::PerfEventLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::perf_event::PerfEventLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::perf_event::PerfEventLink
impl<T, U> core::convert::Into<U> for aya::programs::perf_event::PerfEventLink where U: core::convert::From<T>
pub fn aya::programs::perf_event::PerfEventLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::perf_event::PerfEventLink where U: core::convert::Into<T>
pub type aya::programs::perf_event::PerfEventLink::Error = core::convert::Infallible
pub fn aya::programs::perf_event::PerfEventLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::perf_event::PerfEventLink where U: core::convert::TryFrom<T>
pub type aya::programs::perf_event::PerfEventLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::perf_event::PerfEventLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::perf_event::PerfEventLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::perf_event::PerfEventLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::perf_event::PerfEventLink where T: ?core::marker::Sized
pub fn aya::programs::perf_event::PerfEventLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::perf_event::PerfEventLink where T: ?core::marker::Sized
pub fn aya::programs::perf_event::PerfEventLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::perf_event::PerfEventLink
pub fn aya::programs::perf_event::PerfEventLink::from(t: T) -> T
pub struct aya::programs::perf_event::PerfEventLinkId(_)
impl core::cmp::Eq for aya::programs::perf_event::PerfEventLinkId
impl core::cmp::PartialEq for aya::programs::perf_event::PerfEventLinkId
pub fn aya::programs::perf_event::PerfEventLinkId::eq(&self, other: &aya::programs::perf_event::PerfEventLinkId) -> bool
impl core::fmt::Debug for aya::programs::perf_event::PerfEventLinkId
pub fn aya::programs::perf_event::PerfEventLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::perf_event::PerfEventLinkId
pub fn aya::programs::perf_event::PerfEventLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::perf_event::PerfEventLinkId
impl core::marker::Freeze for aya::programs::perf_event::PerfEventLinkId
impl core::marker::Send for aya::programs::perf_event::PerfEventLinkId
impl core::marker::Sync for aya::programs::perf_event::PerfEventLinkId
impl core::marker::Unpin for aya::programs::perf_event::PerfEventLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::perf_event::PerfEventLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::perf_event::PerfEventLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::perf_event::PerfEventLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::perf_event::PerfEventLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::perf_event::PerfEventLinkId where U: core::convert::From<T>
pub fn aya::programs::perf_event::PerfEventLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::perf_event::PerfEventLinkId where U: core::convert::Into<T>
pub type aya::programs::perf_event::PerfEventLinkId::Error = core::convert::Infallible
pub fn aya::programs::perf_event::PerfEventLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::perf_event::PerfEventLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::perf_event::PerfEventLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::perf_event::PerfEventLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::perf_event::PerfEventLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::perf_event::PerfEventLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::perf_event::PerfEventLinkId where T: ?core::marker::Sized
pub fn aya::programs::perf_event::PerfEventLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::perf_event::PerfEventLinkId where T: ?core::marker::Sized
pub fn aya::programs::perf_event::PerfEventLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::perf_event::PerfEventLinkId
pub fn aya::programs::perf_event::PerfEventLinkId::from(t: T) -> T
pub mod aya::programs::raw_trace_point
pub struct aya::programs::raw_trace_point::RawTracePoint
impl aya::programs::raw_trace_point::RawTracePoint
pub fn aya::programs::raw_trace_point::RawTracePoint::attach(&mut self, tp_name: &str) -> core::result::Result<aya::programs::raw_trace_point::RawTracePointLinkId, aya::programs::ProgramError>
pub fn aya::programs::raw_trace_point::RawTracePoint::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::raw_trace_point::RawTracePoint
pub fn aya::programs::raw_trace_point::RawTracePoint::detach(&mut self, link_id: aya::programs::raw_trace_point::RawTracePointLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::raw_trace_point::RawTracePoint::take_link(&mut self, link_id: aya::programs::raw_trace_point::RawTracePointLinkId) -> core::result::Result<aya::programs::raw_trace_point::RawTracePointLink, aya::programs::ProgramError>
impl aya::programs::raw_trace_point::RawTracePoint
pub fn aya::programs::raw_trace_point::RawTracePoint::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::raw_trace_point::RawTracePoint
pub fn aya::programs::raw_trace_point::RawTracePoint::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::raw_trace_point::RawTracePoint
pub fn aya::programs::raw_trace_point::RawTracePoint::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::raw_trace_point::RawTracePoint
pub fn aya::programs::raw_trace_point::RawTracePoint::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::raw_trace_point::RawTracePoint::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::raw_trace_point::RawTracePoint
pub fn aya::programs::raw_trace_point::RawTracePoint::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::raw_trace_point::RawTracePoint
pub fn aya::programs::raw_trace_point::RawTracePoint::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::raw_trace_point::RawTracePoint
pub fn aya::programs::raw_trace_point::RawTracePoint::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::raw_trace_point::RawTracePoint
pub type &'a aya::programs::raw_trace_point::RawTracePoint::Error = aya::programs::ProgramError
pub fn &'a aya::programs::raw_trace_point::RawTracePoint::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::raw_trace_point::RawTracePoint, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::raw_trace_point::RawTracePoint
pub type &'a mut aya::programs::raw_trace_point::RawTracePoint::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::raw_trace_point::RawTracePoint::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::raw_trace_point::RawTracePoint, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::raw_trace_point::RawTracePoint
impl core::marker::Send for aya::programs::raw_trace_point::RawTracePoint
impl core::marker::Sync for aya::programs::raw_trace_point::RawTracePoint
impl core::marker::Unpin for aya::programs::raw_trace_point::RawTracePoint
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::raw_trace_point::RawTracePoint
impl core::panic::unwind_safe::UnwindSafe for aya::programs::raw_trace_point::RawTracePoint
impl<T, U> core::convert::Into<U> for aya::programs::raw_trace_point::RawTracePoint where U: core::convert::From<T>
pub fn aya::programs::raw_trace_point::RawTracePoint::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::raw_trace_point::RawTracePoint where U: core::convert::Into<T>
pub type aya::programs::raw_trace_point::RawTracePoint::Error = core::convert::Infallible
pub fn aya::programs::raw_trace_point::RawTracePoint::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::raw_trace_point::RawTracePoint where U: core::convert::TryFrom<T>
pub type aya::programs::raw_trace_point::RawTracePoint::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::raw_trace_point::RawTracePoint::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::raw_trace_point::RawTracePoint where T: 'static + ?core::marker::Sized
pub fn aya::programs::raw_trace_point::RawTracePoint::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::raw_trace_point::RawTracePoint where T: ?core::marker::Sized
pub fn aya::programs::raw_trace_point::RawTracePoint::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::raw_trace_point::RawTracePoint where T: ?core::marker::Sized
pub fn aya::programs::raw_trace_point::RawTracePoint::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::raw_trace_point::RawTracePoint
pub fn aya::programs::raw_trace_point::RawTracePoint::from(t: T) -> T
pub struct aya::programs::raw_trace_point::RawTracePointLink(_)
impl aya::programs::links::Link for aya::programs::raw_trace_point::RawTracePointLink
pub type aya::programs::raw_trace_point::RawTracePointLink::Id = aya::programs::raw_trace_point::RawTracePointLinkId
pub fn aya::programs::raw_trace_point::RawTracePointLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::raw_trace_point::RawTracePointLink::id(&self) -> Self::Id
impl core::convert::From<aya::programs::links::FdLink> for aya::programs::raw_trace_point::RawTracePointLink
pub fn aya::programs::raw_trace_point::RawTracePointLink::from(b: aya::programs::links::FdLink) -> aya::programs::raw_trace_point::RawTracePointLink
impl core::convert::From<aya::programs::raw_trace_point::RawTracePointLink> for aya::programs::links::FdLink
pub fn aya::programs::links::FdLink::from(w: aya::programs::raw_trace_point::RawTracePointLink) -> aya::programs::links::FdLink
impl core::fmt::Debug for aya::programs::raw_trace_point::RawTracePointLink
pub fn aya::programs::raw_trace_point::RawTracePointLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::raw_trace_point::RawTracePointLink
pub fn aya::programs::raw_trace_point::RawTracePointLink::drop(&mut self)
impl core::marker::Freeze for aya::programs::raw_trace_point::RawTracePointLink
impl core::marker::Send for aya::programs::raw_trace_point::RawTracePointLink
impl core::marker::Sync for aya::programs::raw_trace_point::RawTracePointLink
impl core::marker::Unpin for aya::programs::raw_trace_point::RawTracePointLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::raw_trace_point::RawTracePointLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::raw_trace_point::RawTracePointLink
impl<T, U> core::convert::Into<U> for aya::programs::raw_trace_point::RawTracePointLink where U: core::convert::From<T>
pub fn aya::programs::raw_trace_point::RawTracePointLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::raw_trace_point::RawTracePointLink where U: core::convert::Into<T>
pub type aya::programs::raw_trace_point::RawTracePointLink::Error = core::convert::Infallible
pub fn aya::programs::raw_trace_point::RawTracePointLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::raw_trace_point::RawTracePointLink where U: core::convert::TryFrom<T>
pub type aya::programs::raw_trace_point::RawTracePointLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::raw_trace_point::RawTracePointLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::raw_trace_point::RawTracePointLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::raw_trace_point::RawTracePointLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::raw_trace_point::RawTracePointLink where T: ?core::marker::Sized
pub fn aya::programs::raw_trace_point::RawTracePointLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::raw_trace_point::RawTracePointLink where T: ?core::marker::Sized
pub fn aya::programs::raw_trace_point::RawTracePointLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::raw_trace_point::RawTracePointLink
pub fn aya::programs::raw_trace_point::RawTracePointLink::from(t: T) -> T
pub struct aya::programs::raw_trace_point::RawTracePointLinkId(_)
impl core::cmp::Eq for aya::programs::raw_trace_point::RawTracePointLinkId
impl core::cmp::PartialEq for aya::programs::raw_trace_point::RawTracePointLinkId
pub fn aya::programs::raw_trace_point::RawTracePointLinkId::eq(&self, other: &aya::programs::raw_trace_point::RawTracePointLinkId) -> bool
impl core::fmt::Debug for aya::programs::raw_trace_point::RawTracePointLinkId
pub fn aya::programs::raw_trace_point::RawTracePointLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::raw_trace_point::RawTracePointLinkId
pub fn aya::programs::raw_trace_point::RawTracePointLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::raw_trace_point::RawTracePointLinkId
impl core::marker::Freeze for aya::programs::raw_trace_point::RawTracePointLinkId
impl core::marker::Send for aya::programs::raw_trace_point::RawTracePointLinkId
impl core::marker::Sync for aya::programs::raw_trace_point::RawTracePointLinkId
impl core::marker::Unpin for aya::programs::raw_trace_point::RawTracePointLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::raw_trace_point::RawTracePointLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::raw_trace_point::RawTracePointLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::raw_trace_point::RawTracePointLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::raw_trace_point::RawTracePointLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::raw_trace_point::RawTracePointLinkId where U: core::convert::From<T>
pub fn aya::programs::raw_trace_point::RawTracePointLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::raw_trace_point::RawTracePointLinkId where U: core::convert::Into<T>
pub type aya::programs::raw_trace_point::RawTracePointLinkId::Error = core::convert::Infallible
pub fn aya::programs::raw_trace_point::RawTracePointLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::raw_trace_point::RawTracePointLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::raw_trace_point::RawTracePointLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::raw_trace_point::RawTracePointLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::raw_trace_point::RawTracePointLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::raw_trace_point::RawTracePointLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::raw_trace_point::RawTracePointLinkId where T: ?core::marker::Sized
pub fn aya::programs::raw_trace_point::RawTracePointLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::raw_trace_point::RawTracePointLinkId where T: ?core::marker::Sized
pub fn aya::programs::raw_trace_point::RawTracePointLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::raw_trace_point::RawTracePointLinkId
pub fn aya::programs::raw_trace_point::RawTracePointLinkId::from(t: T) -> T
pub mod aya::programs::sk_lookup
pub struct aya::programs::sk_lookup::SkLookup
impl aya::programs::sk_lookup::SkLookup
pub fn aya::programs::sk_lookup::SkLookup::attach<T: std::os::fd::owned::AsFd>(&mut self, netns: T) -> core::result::Result<aya::programs::sk_lookup::SkLookupLinkId, aya::programs::ProgramError>
pub fn aya::programs::sk_lookup::SkLookup::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::sk_lookup::SkLookup
pub fn aya::programs::sk_lookup::SkLookup::detach(&mut self, link_id: aya::programs::sk_lookup::SkLookupLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::sk_lookup::SkLookup::take_link(&mut self, link_id: aya::programs::sk_lookup::SkLookupLinkId) -> core::result::Result<aya::programs::sk_lookup::SkLookupLink, aya::programs::ProgramError>
impl aya::programs::sk_lookup::SkLookup
pub fn aya::programs::sk_lookup::SkLookup::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::sk_lookup::SkLookup
pub fn aya::programs::sk_lookup::SkLookup::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::sk_lookup::SkLookup
pub fn aya::programs::sk_lookup::SkLookup::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::sk_lookup::SkLookup
pub fn aya::programs::sk_lookup::SkLookup::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::sk_lookup::SkLookup::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::sk_lookup::SkLookup
pub fn aya::programs::sk_lookup::SkLookup::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::sk_lookup::SkLookup
pub fn aya::programs::sk_lookup::SkLookup::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::sk_lookup::SkLookup
pub fn aya::programs::sk_lookup::SkLookup::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::sk_lookup::SkLookup
pub type &'a aya::programs::sk_lookup::SkLookup::Error = aya::programs::ProgramError
pub fn &'a aya::programs::sk_lookup::SkLookup::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::sk_lookup::SkLookup, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::sk_lookup::SkLookup
pub type &'a mut aya::programs::sk_lookup::SkLookup::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::sk_lookup::SkLookup::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::sk_lookup::SkLookup, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::sk_lookup::SkLookup
impl core::marker::Send for aya::programs::sk_lookup::SkLookup
impl core::marker::Sync for aya::programs::sk_lookup::SkLookup
impl core::marker::Unpin for aya::programs::sk_lookup::SkLookup
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::sk_lookup::SkLookup
impl core::panic::unwind_safe::UnwindSafe for aya::programs::sk_lookup::SkLookup
impl<T, U> core::convert::Into<U> for aya::programs::sk_lookup::SkLookup where U: core::convert::From<T>
pub fn aya::programs::sk_lookup::SkLookup::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::sk_lookup::SkLookup where U: core::convert::Into<T>
pub type aya::programs::sk_lookup::SkLookup::Error = core::convert::Infallible
pub fn aya::programs::sk_lookup::SkLookup::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::sk_lookup::SkLookup where U: core::convert::TryFrom<T>
pub type aya::programs::sk_lookup::SkLookup::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::sk_lookup::SkLookup::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::sk_lookup::SkLookup where T: 'static + ?core::marker::Sized
pub fn aya::programs::sk_lookup::SkLookup::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::sk_lookup::SkLookup where T: ?core::marker::Sized
pub fn aya::programs::sk_lookup::SkLookup::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::sk_lookup::SkLookup where T: ?core::marker::Sized
pub fn aya::programs::sk_lookup::SkLookup::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::sk_lookup::SkLookup
pub fn aya::programs::sk_lookup::SkLookup::from(t: T) -> T
pub struct aya::programs::sk_lookup::SkLookupLink(_)
impl aya::programs::links::Link for aya::programs::sk_lookup::SkLookupLink
pub type aya::programs::sk_lookup::SkLookupLink::Id = aya::programs::sk_lookup::SkLookupLinkId
pub fn aya::programs::sk_lookup::SkLookupLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::sk_lookup::SkLookupLink::id(&self) -> Self::Id
impl core::convert::From<aya::programs::links::FdLink> for aya::programs::sk_lookup::SkLookupLink
pub fn aya::programs::sk_lookup::SkLookupLink::from(b: aya::programs::links::FdLink) -> aya::programs::sk_lookup::SkLookupLink
impl core::convert::From<aya::programs::sk_lookup::SkLookupLink> for aya::programs::links::FdLink
pub fn aya::programs::links::FdLink::from(w: aya::programs::sk_lookup::SkLookupLink) -> aya::programs::links::FdLink
impl core::fmt::Debug for aya::programs::sk_lookup::SkLookupLink
pub fn aya::programs::sk_lookup::SkLookupLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::sk_lookup::SkLookupLink
pub fn aya::programs::sk_lookup::SkLookupLink::drop(&mut self)
impl core::marker::Freeze for aya::programs::sk_lookup::SkLookupLink
impl core::marker::Send for aya::programs::sk_lookup::SkLookupLink
impl core::marker::Sync for aya::programs::sk_lookup::SkLookupLink
impl core::marker::Unpin for aya::programs::sk_lookup::SkLookupLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::sk_lookup::SkLookupLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::sk_lookup::SkLookupLink
impl<T, U> core::convert::Into<U> for aya::programs::sk_lookup::SkLookupLink where U: core::convert::From<T>
pub fn aya::programs::sk_lookup::SkLookupLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::sk_lookup::SkLookupLink where U: core::convert::Into<T>
pub type aya::programs::sk_lookup::SkLookupLink::Error = core::convert::Infallible
pub fn aya::programs::sk_lookup::SkLookupLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::sk_lookup::SkLookupLink where U: core::convert::TryFrom<T>
pub type aya::programs::sk_lookup::SkLookupLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::sk_lookup::SkLookupLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::sk_lookup::SkLookupLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::sk_lookup::SkLookupLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::sk_lookup::SkLookupLink where T: ?core::marker::Sized
pub fn aya::programs::sk_lookup::SkLookupLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::sk_lookup::SkLookupLink where T: ?core::marker::Sized
pub fn aya::programs::sk_lookup::SkLookupLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::sk_lookup::SkLookupLink
pub fn aya::programs::sk_lookup::SkLookupLink::from(t: T) -> T
pub struct aya::programs::sk_lookup::SkLookupLinkId(_)
impl core::cmp::Eq for aya::programs::sk_lookup::SkLookupLinkId
impl core::cmp::PartialEq for aya::programs::sk_lookup::SkLookupLinkId
pub fn aya::programs::sk_lookup::SkLookupLinkId::eq(&self, other: &aya::programs::sk_lookup::SkLookupLinkId) -> bool
impl core::fmt::Debug for aya::programs::sk_lookup::SkLookupLinkId
pub fn aya::programs::sk_lookup::SkLookupLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::sk_lookup::SkLookupLinkId
pub fn aya::programs::sk_lookup::SkLookupLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::sk_lookup::SkLookupLinkId
impl core::marker::Freeze for aya::programs::sk_lookup::SkLookupLinkId
impl core::marker::Send for aya::programs::sk_lookup::SkLookupLinkId
impl core::marker::Sync for aya::programs::sk_lookup::SkLookupLinkId
impl core::marker::Unpin for aya::programs::sk_lookup::SkLookupLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::sk_lookup::SkLookupLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::sk_lookup::SkLookupLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::sk_lookup::SkLookupLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::sk_lookup::SkLookupLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::sk_lookup::SkLookupLinkId where U: core::convert::From<T>
pub fn aya::programs::sk_lookup::SkLookupLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::sk_lookup::SkLookupLinkId where U: core::convert::Into<T>
pub type aya::programs::sk_lookup::SkLookupLinkId::Error = core::convert::Infallible
pub fn aya::programs::sk_lookup::SkLookupLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::sk_lookup::SkLookupLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::sk_lookup::SkLookupLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::sk_lookup::SkLookupLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::sk_lookup::SkLookupLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::sk_lookup::SkLookupLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::sk_lookup::SkLookupLinkId where T: ?core::marker::Sized
pub fn aya::programs::sk_lookup::SkLookupLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::sk_lookup::SkLookupLinkId where T: ?core::marker::Sized
pub fn aya::programs::sk_lookup::SkLookupLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::sk_lookup::SkLookupLinkId
pub fn aya::programs::sk_lookup::SkLookupLinkId::from(t: T) -> T
pub mod aya::programs::sk_msg
pub struct aya::programs::sk_msg::SkMsg
impl aya::programs::sk_msg::SkMsg
pub fn aya::programs::sk_msg::SkMsg::attach(&mut self, map: &aya::maps::sock::SockMapFd) -> core::result::Result<aya::programs::sk_msg::SkMsgLinkId, aya::programs::ProgramError>
pub fn aya::programs::sk_msg::SkMsg::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::sk_msg::SkMsg
pub fn aya::programs::sk_msg::SkMsg::detach(&mut self, link_id: aya::programs::sk_msg::SkMsgLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::sk_msg::SkMsg::take_link(&mut self, link_id: aya::programs::sk_msg::SkMsgLinkId) -> core::result::Result<aya::programs::sk_msg::SkMsgLink, aya::programs::ProgramError>
impl aya::programs::sk_msg::SkMsg
pub fn aya::programs::sk_msg::SkMsg::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::sk_msg::SkMsg
pub fn aya::programs::sk_msg::SkMsg::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::sk_msg::SkMsg
pub fn aya::programs::sk_msg::SkMsg::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::sk_msg::SkMsg
pub fn aya::programs::sk_msg::SkMsg::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::sk_msg::SkMsg::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::sk_msg::SkMsg
pub fn aya::programs::sk_msg::SkMsg::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::sk_msg::SkMsg
pub fn aya::programs::sk_msg::SkMsg::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::sk_msg::SkMsg
pub fn aya::programs::sk_msg::SkMsg::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::sk_msg::SkMsg
pub type &'a aya::programs::sk_msg::SkMsg::Error = aya::programs::ProgramError
pub fn &'a aya::programs::sk_msg::SkMsg::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::sk_msg::SkMsg, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::sk_msg::SkMsg
pub type &'a mut aya::programs::sk_msg::SkMsg::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::sk_msg::SkMsg::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::sk_msg::SkMsg, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::sk_msg::SkMsg
impl core::marker::Send for aya::programs::sk_msg::SkMsg
impl core::marker::Sync for aya::programs::sk_msg::SkMsg
impl core::marker::Unpin for aya::programs::sk_msg::SkMsg
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::sk_msg::SkMsg
impl core::panic::unwind_safe::UnwindSafe for aya::programs::sk_msg::SkMsg
impl<T, U> core::convert::Into<U> for aya::programs::sk_msg::SkMsg where U: core::convert::From<T>
pub fn aya::programs::sk_msg::SkMsg::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::sk_msg::SkMsg where U: core::convert::Into<T>
pub type aya::programs::sk_msg::SkMsg::Error = core::convert::Infallible
pub fn aya::programs::sk_msg::SkMsg::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::sk_msg::SkMsg where U: core::convert::TryFrom<T>
pub type aya::programs::sk_msg::SkMsg::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::sk_msg::SkMsg::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::sk_msg::SkMsg where T: 'static + ?core::marker::Sized
pub fn aya::programs::sk_msg::SkMsg::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::sk_msg::SkMsg where T: ?core::marker::Sized
pub fn aya::programs::sk_msg::SkMsg::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::sk_msg::SkMsg where T: ?core::marker::Sized
pub fn aya::programs::sk_msg::SkMsg::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::sk_msg::SkMsg
pub fn aya::programs::sk_msg::SkMsg::from(t: T) -> T
pub struct aya::programs::sk_msg::SkMsgLink(_)
impl aya::programs::links::Link for aya::programs::sk_msg::SkMsgLink
pub type aya::programs::sk_msg::SkMsgLink::Id = aya::programs::sk_msg::SkMsgLinkId
pub fn aya::programs::sk_msg::SkMsgLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::sk_msg::SkMsgLink::id(&self) -> Self::Id
impl core::convert::From<aya::programs::links::ProgAttachLink> for aya::programs::sk_msg::SkMsgLink
pub fn aya::programs::sk_msg::SkMsgLink::from(b: aya::programs::links::ProgAttachLink) -> aya::programs::sk_msg::SkMsgLink
impl core::convert::From<aya::programs::sk_msg::SkMsgLink> for aya::programs::links::ProgAttachLink
pub fn aya::programs::links::ProgAttachLink::from(w: aya::programs::sk_msg::SkMsgLink) -> aya::programs::links::ProgAttachLink
impl core::fmt::Debug for aya::programs::sk_msg::SkMsgLink
pub fn aya::programs::sk_msg::SkMsgLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::sk_msg::SkMsgLink
pub fn aya::programs::sk_msg::SkMsgLink::drop(&mut self)
impl core::marker::Freeze for aya::programs::sk_msg::SkMsgLink
impl core::marker::Send for aya::programs::sk_msg::SkMsgLink
impl core::marker::Sync for aya::programs::sk_msg::SkMsgLink
impl core::marker::Unpin for aya::programs::sk_msg::SkMsgLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::sk_msg::SkMsgLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::sk_msg::SkMsgLink
impl<T, U> core::convert::Into<U> for aya::programs::sk_msg::SkMsgLink where U: core::convert::From<T>
pub fn aya::programs::sk_msg::SkMsgLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::sk_msg::SkMsgLink where U: core::convert::Into<T>
pub type aya::programs::sk_msg::SkMsgLink::Error = core::convert::Infallible
pub fn aya::programs::sk_msg::SkMsgLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::sk_msg::SkMsgLink where U: core::convert::TryFrom<T>
pub type aya::programs::sk_msg::SkMsgLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::sk_msg::SkMsgLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::sk_msg::SkMsgLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::sk_msg::SkMsgLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::sk_msg::SkMsgLink where T: ?core::marker::Sized
pub fn aya::programs::sk_msg::SkMsgLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::sk_msg::SkMsgLink where T: ?core::marker::Sized
pub fn aya::programs::sk_msg::SkMsgLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::sk_msg::SkMsgLink
pub fn aya::programs::sk_msg::SkMsgLink::from(t: T) -> T
pub struct aya::programs::sk_msg::SkMsgLinkId(_)
impl core::cmp::Eq for aya::programs::sk_msg::SkMsgLinkId
impl core::cmp::PartialEq for aya::programs::sk_msg::SkMsgLinkId
pub fn aya::programs::sk_msg::SkMsgLinkId::eq(&self, other: &aya::programs::sk_msg::SkMsgLinkId) -> bool
impl core::fmt::Debug for aya::programs::sk_msg::SkMsgLinkId
pub fn aya::programs::sk_msg::SkMsgLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::sk_msg::SkMsgLinkId
pub fn aya::programs::sk_msg::SkMsgLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::sk_msg::SkMsgLinkId
impl core::marker::Freeze for aya::programs::sk_msg::SkMsgLinkId
impl core::marker::Send for aya::programs::sk_msg::SkMsgLinkId
impl core::marker::Sync for aya::programs::sk_msg::SkMsgLinkId
impl core::marker::Unpin for aya::programs::sk_msg::SkMsgLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::sk_msg::SkMsgLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::sk_msg::SkMsgLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::sk_msg::SkMsgLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::sk_msg::SkMsgLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::sk_msg::SkMsgLinkId where U: core::convert::From<T>
pub fn aya::programs::sk_msg::SkMsgLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::sk_msg::SkMsgLinkId where U: core::convert::Into<T>
pub type aya::programs::sk_msg::SkMsgLinkId::Error = core::convert::Infallible
pub fn aya::programs::sk_msg::SkMsgLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::sk_msg::SkMsgLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::sk_msg::SkMsgLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::sk_msg::SkMsgLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::sk_msg::SkMsgLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::sk_msg::SkMsgLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::sk_msg::SkMsgLinkId where T: ?core::marker::Sized
pub fn aya::programs::sk_msg::SkMsgLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::sk_msg::SkMsgLinkId where T: ?core::marker::Sized
pub fn aya::programs::sk_msg::SkMsgLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::sk_msg::SkMsgLinkId
pub fn aya::programs::sk_msg::SkMsgLinkId::from(t: T) -> T
pub mod aya::programs::sk_skb
pub enum aya::programs::sk_skb::SkSkbKind
pub aya::programs::sk_skb::SkSkbKind::StreamParser
pub aya::programs::sk_skb::SkSkbKind::StreamVerdict
impl core::clone::Clone for aya::programs::sk_skb::SkSkbKind
pub fn aya::programs::sk_skb::SkSkbKind::clone(&self) -> aya::programs::sk_skb::SkSkbKind
impl core::fmt::Debug for aya::programs::sk_skb::SkSkbKind
pub fn aya::programs::sk_skb::SkSkbKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for aya::programs::sk_skb::SkSkbKind
impl core::marker::Freeze for aya::programs::sk_skb::SkSkbKind
impl core::marker::Send for aya::programs::sk_skb::SkSkbKind
impl core::marker::Sync for aya::programs::sk_skb::SkSkbKind
impl core::marker::Unpin for aya::programs::sk_skb::SkSkbKind
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::sk_skb::SkSkbKind
impl core::panic::unwind_safe::UnwindSafe for aya::programs::sk_skb::SkSkbKind
impl<T, U> core::convert::Into<U> for aya::programs::sk_skb::SkSkbKind where U: core::convert::From<T>
pub fn aya::programs::sk_skb::SkSkbKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::sk_skb::SkSkbKind where U: core::convert::Into<T>
pub type aya::programs::sk_skb::SkSkbKind::Error = core::convert::Infallible
pub fn aya::programs::sk_skb::SkSkbKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::sk_skb::SkSkbKind where U: core::convert::TryFrom<T>
pub type aya::programs::sk_skb::SkSkbKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::sk_skb::SkSkbKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for aya::programs::sk_skb::SkSkbKind where T: core::clone::Clone
pub type aya::programs::sk_skb::SkSkbKind::Owned = T
pub fn aya::programs::sk_skb::SkSkbKind::clone_into(&self, target: &mut T)
pub fn aya::programs::sk_skb::SkSkbKind::to_owned(&self) -> T
impl<T> core::any::Any for aya::programs::sk_skb::SkSkbKind where T: 'static + ?core::marker::Sized
pub fn aya::programs::sk_skb::SkSkbKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::sk_skb::SkSkbKind where T: ?core::marker::Sized
pub fn aya::programs::sk_skb::SkSkbKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::sk_skb::SkSkbKind where T: ?core::marker::Sized
pub fn aya::programs::sk_skb::SkSkbKind::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for aya::programs::sk_skb::SkSkbKind where T: core::clone::Clone
pub unsafe fn aya::programs::sk_skb::SkSkbKind::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for aya::programs::sk_skb::SkSkbKind
pub fn aya::programs::sk_skb::SkSkbKind::from(t: T) -> T
pub struct aya::programs::sk_skb::SkSkb
impl aya::programs::sk_skb::SkSkb
pub fn aya::programs::sk_skb::SkSkb::attach(&mut self, map: &aya::maps::sock::SockMapFd) -> core::result::Result<aya::programs::sk_skb::SkSkbLinkId, aya::programs::ProgramError>
pub fn aya::programs::sk_skb::SkSkb::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P, kind: aya::programs::sk_skb::SkSkbKind) -> core::result::Result<Self, aya::programs::ProgramError>
pub fn aya::programs::sk_skb::SkSkb::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::sk_skb::SkSkb
pub fn aya::programs::sk_skb::SkSkb::detach(&mut self, link_id: aya::programs::sk_skb::SkSkbLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::sk_skb::SkSkb::take_link(&mut self, link_id: aya::programs::sk_skb::SkSkbLinkId) -> core::result::Result<aya::programs::sk_skb::SkSkbLink, aya::programs::ProgramError>
impl aya::programs::sk_skb::SkSkb
pub fn aya::programs::sk_skb::SkSkb::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::sk_skb::SkSkb
pub fn aya::programs::sk_skb::SkSkb::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::sk_skb::SkSkb
pub fn aya::programs::sk_skb::SkSkb::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::sk_skb::SkSkb::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::sk_skb::SkSkb
pub fn aya::programs::sk_skb::SkSkb::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::sk_skb::SkSkb
pub fn aya::programs::sk_skb::SkSkb::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::sk_skb::SkSkb
pub fn aya::programs::sk_skb::SkSkb::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::sk_skb::SkSkb
pub type &'a aya::programs::sk_skb::SkSkb::Error = aya::programs::ProgramError
pub fn &'a aya::programs::sk_skb::SkSkb::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::sk_skb::SkSkb, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::sk_skb::SkSkb
pub type &'a mut aya::programs::sk_skb::SkSkb::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::sk_skb::SkSkb::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::sk_skb::SkSkb, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::sk_skb::SkSkb
impl core::marker::Send for aya::programs::sk_skb::SkSkb
impl core::marker::Sync for aya::programs::sk_skb::SkSkb
impl core::marker::Unpin for aya::programs::sk_skb::SkSkb
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::sk_skb::SkSkb
impl core::panic::unwind_safe::UnwindSafe for aya::programs::sk_skb::SkSkb
impl<T, U> core::convert::Into<U> for aya::programs::sk_skb::SkSkb where U: core::convert::From<T>
pub fn aya::programs::sk_skb::SkSkb::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::sk_skb::SkSkb where U: core::convert::Into<T>
pub type aya::programs::sk_skb::SkSkb::Error = core::convert::Infallible
pub fn aya::programs::sk_skb::SkSkb::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::sk_skb::SkSkb where U: core::convert::TryFrom<T>
pub type aya::programs::sk_skb::SkSkb::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::sk_skb::SkSkb::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::sk_skb::SkSkb where T: 'static + ?core::marker::Sized
pub fn aya::programs::sk_skb::SkSkb::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::sk_skb::SkSkb where T: ?core::marker::Sized
pub fn aya::programs::sk_skb::SkSkb::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::sk_skb::SkSkb where T: ?core::marker::Sized
pub fn aya::programs::sk_skb::SkSkb::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::sk_skb::SkSkb
pub fn aya::programs::sk_skb::SkSkb::from(t: T) -> T
pub struct aya::programs::sk_skb::SkSkbLink(_)
impl aya::programs::links::Link for aya::programs::sk_skb::SkSkbLink
pub type aya::programs::sk_skb::SkSkbLink::Id = aya::programs::sk_skb::SkSkbLinkId
pub fn aya::programs::sk_skb::SkSkbLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::sk_skb::SkSkbLink::id(&self) -> Self::Id
impl core::convert::From<aya::programs::links::ProgAttachLink> for aya::programs::sk_skb::SkSkbLink
pub fn aya::programs::sk_skb::SkSkbLink::from(b: aya::programs::links::ProgAttachLink) -> aya::programs::sk_skb::SkSkbLink
impl core::convert::From<aya::programs::sk_skb::SkSkbLink> for aya::programs::links::ProgAttachLink
pub fn aya::programs::links::ProgAttachLink::from(w: aya::programs::sk_skb::SkSkbLink) -> aya::programs::links::ProgAttachLink
impl core::fmt::Debug for aya::programs::sk_skb::SkSkbLink
pub fn aya::programs::sk_skb::SkSkbLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::sk_skb::SkSkbLink
pub fn aya::programs::sk_skb::SkSkbLink::drop(&mut self)
impl core::marker::Freeze for aya::programs::sk_skb::SkSkbLink
impl core::marker::Send for aya::programs::sk_skb::SkSkbLink
impl core::marker::Sync for aya::programs::sk_skb::SkSkbLink
impl core::marker::Unpin for aya::programs::sk_skb::SkSkbLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::sk_skb::SkSkbLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::sk_skb::SkSkbLink
impl<T, U> core::convert::Into<U> for aya::programs::sk_skb::SkSkbLink where U: core::convert::From<T>
pub fn aya::programs::sk_skb::SkSkbLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::sk_skb::SkSkbLink where U: core::convert::Into<T>
pub type aya::programs::sk_skb::SkSkbLink::Error = core::convert::Infallible
pub fn aya::programs::sk_skb::SkSkbLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::sk_skb::SkSkbLink where U: core::convert::TryFrom<T>
pub type aya::programs::sk_skb::SkSkbLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::sk_skb::SkSkbLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::sk_skb::SkSkbLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::sk_skb::SkSkbLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::sk_skb::SkSkbLink where T: ?core::marker::Sized
pub fn aya::programs::sk_skb::SkSkbLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::sk_skb::SkSkbLink where T: ?core::marker::Sized
pub fn aya::programs::sk_skb::SkSkbLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::sk_skb::SkSkbLink
pub fn aya::programs::sk_skb::SkSkbLink::from(t: T) -> T
pub struct aya::programs::sk_skb::SkSkbLinkId(_)
impl core::cmp::Eq for aya::programs::sk_skb::SkSkbLinkId
impl core::cmp::PartialEq for aya::programs::sk_skb::SkSkbLinkId
pub fn aya::programs::sk_skb::SkSkbLinkId::eq(&self, other: &aya::programs::sk_skb::SkSkbLinkId) -> bool
impl core::fmt::Debug for aya::programs::sk_skb::SkSkbLinkId
pub fn aya::programs::sk_skb::SkSkbLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::sk_skb::SkSkbLinkId
pub fn aya::programs::sk_skb::SkSkbLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::sk_skb::SkSkbLinkId
impl core::marker::Freeze for aya::programs::sk_skb::SkSkbLinkId
impl core::marker::Send for aya::programs::sk_skb::SkSkbLinkId
impl core::marker::Sync for aya::programs::sk_skb::SkSkbLinkId
impl core::marker::Unpin for aya::programs::sk_skb::SkSkbLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::sk_skb::SkSkbLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::sk_skb::SkSkbLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::sk_skb::SkSkbLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::sk_skb::SkSkbLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::sk_skb::SkSkbLinkId where U: core::convert::From<T>
pub fn aya::programs::sk_skb::SkSkbLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::sk_skb::SkSkbLinkId where U: core::convert::Into<T>
pub type aya::programs::sk_skb::SkSkbLinkId::Error = core::convert::Infallible
pub fn aya::programs::sk_skb::SkSkbLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::sk_skb::SkSkbLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::sk_skb::SkSkbLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::sk_skb::SkSkbLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::sk_skb::SkSkbLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::sk_skb::SkSkbLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::sk_skb::SkSkbLinkId where T: ?core::marker::Sized
pub fn aya::programs::sk_skb::SkSkbLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::sk_skb::SkSkbLinkId where T: ?core::marker::Sized
pub fn aya::programs::sk_skb::SkSkbLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::sk_skb::SkSkbLinkId
pub fn aya::programs::sk_skb::SkSkbLinkId::from(t: T) -> T
pub mod aya::programs::sock_ops
pub struct aya::programs::sock_ops::SockOps
impl aya::programs::sock_ops::SockOps
pub fn aya::programs::sock_ops::SockOps::attach<T: std::os::fd::owned::AsFd>(&mut self, cgroup: T, mode: aya::programs::links::CgroupAttachMode) -> core::result::Result<aya::programs::sock_ops::SockOpsLinkId, aya::programs::ProgramError>
pub fn aya::programs::sock_ops::SockOps::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::sock_ops::SockOps
pub fn aya::programs::sock_ops::SockOps::detach(&mut self, link_id: aya::programs::sock_ops::SockOpsLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::sock_ops::SockOps::take_link(&mut self, link_id: aya::programs::sock_ops::SockOpsLinkId) -> core::result::Result<aya::programs::sock_ops::SockOpsLink, aya::programs::ProgramError>
impl aya::programs::sock_ops::SockOps
pub fn aya::programs::sock_ops::SockOps::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::sock_ops::SockOps
pub fn aya::programs::sock_ops::SockOps::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::sock_ops::SockOps
pub fn aya::programs::sock_ops::SockOps::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::sock_ops::SockOps
pub fn aya::programs::sock_ops::SockOps::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::sock_ops::SockOps::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::sock_ops::SockOps
pub fn aya::programs::sock_ops::SockOps::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::sock_ops::SockOps
pub fn aya::programs::sock_ops::SockOps::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::sock_ops::SockOps
pub fn aya::programs::sock_ops::SockOps::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::sock_ops::SockOps
pub type &'a aya::programs::sock_ops::SockOps::Error = aya::programs::ProgramError
pub fn &'a aya::programs::sock_ops::SockOps::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::sock_ops::SockOps, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::sock_ops::SockOps
pub type &'a mut aya::programs::sock_ops::SockOps::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::sock_ops::SockOps::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::sock_ops::SockOps, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::sock_ops::SockOps
impl core::marker::Send for aya::programs::sock_ops::SockOps
impl core::marker::Sync for aya::programs::sock_ops::SockOps
impl core::marker::Unpin for aya::programs::sock_ops::SockOps
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::sock_ops::SockOps
impl core::panic::unwind_safe::UnwindSafe for aya::programs::sock_ops::SockOps
impl<T, U> core::convert::Into<U> for aya::programs::sock_ops::SockOps where U: core::convert::From<T>
pub fn aya::programs::sock_ops::SockOps::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::sock_ops::SockOps where U: core::convert::Into<T>
pub type aya::programs::sock_ops::SockOps::Error = core::convert::Infallible
pub fn aya::programs::sock_ops::SockOps::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::sock_ops::SockOps where U: core::convert::TryFrom<T>
pub type aya::programs::sock_ops::SockOps::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::sock_ops::SockOps::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::sock_ops::SockOps where T: 'static + ?core::marker::Sized
pub fn aya::programs::sock_ops::SockOps::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::sock_ops::SockOps where T: ?core::marker::Sized
pub fn aya::programs::sock_ops::SockOps::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::sock_ops::SockOps where T: ?core::marker::Sized
pub fn aya::programs::sock_ops::SockOps::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::sock_ops::SockOps
pub fn aya::programs::sock_ops::SockOps::from(t: T) -> T
pub struct aya::programs::sock_ops::SockOpsLink(_)
impl aya::programs::links::Link for aya::programs::sock_ops::SockOpsLink
pub type aya::programs::sock_ops::SockOpsLink::Id = aya::programs::sock_ops::SockOpsLinkId
pub fn aya::programs::sock_ops::SockOpsLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::sock_ops::SockOpsLink::id(&self) -> Self::Id
impl core::fmt::Debug for aya::programs::sock_ops::SockOpsLink
pub fn aya::programs::sock_ops::SockOpsLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::sock_ops::SockOpsLink
pub fn aya::programs::sock_ops::SockOpsLink::drop(&mut self)
impl core::marker::Freeze for aya::programs::sock_ops::SockOpsLink
impl core::marker::Send for aya::programs::sock_ops::SockOpsLink
impl core::marker::Sync for aya::programs::sock_ops::SockOpsLink
impl core::marker::Unpin for aya::programs::sock_ops::SockOpsLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::sock_ops::SockOpsLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::sock_ops::SockOpsLink
impl<T, U> core::convert::Into<U> for aya::programs::sock_ops::SockOpsLink where U: core::convert::From<T>
pub fn aya::programs::sock_ops::SockOpsLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::sock_ops::SockOpsLink where U: core::convert::Into<T>
pub type aya::programs::sock_ops::SockOpsLink::Error = core::convert::Infallible
pub fn aya::programs::sock_ops::SockOpsLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::sock_ops::SockOpsLink where U: core::convert::TryFrom<T>
pub type aya::programs::sock_ops::SockOpsLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::sock_ops::SockOpsLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::sock_ops::SockOpsLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::sock_ops::SockOpsLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::sock_ops::SockOpsLink where T: ?core::marker::Sized
pub fn aya::programs::sock_ops::SockOpsLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::sock_ops::SockOpsLink where T: ?core::marker::Sized
pub fn aya::programs::sock_ops::SockOpsLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::sock_ops::SockOpsLink
pub fn aya::programs::sock_ops::SockOpsLink::from(t: T) -> T
pub struct aya::programs::sock_ops::SockOpsLinkId(_)
impl core::cmp::Eq for aya::programs::sock_ops::SockOpsLinkId
impl core::cmp::PartialEq for aya::programs::sock_ops::SockOpsLinkId
pub fn aya::programs::sock_ops::SockOpsLinkId::eq(&self, other: &aya::programs::sock_ops::SockOpsLinkId) -> bool
impl core::fmt::Debug for aya::programs::sock_ops::SockOpsLinkId
pub fn aya::programs::sock_ops::SockOpsLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::sock_ops::SockOpsLinkId
pub fn aya::programs::sock_ops::SockOpsLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::sock_ops::SockOpsLinkId
impl core::marker::Freeze for aya::programs::sock_ops::SockOpsLinkId
impl core::marker::Send for aya::programs::sock_ops::SockOpsLinkId
impl core::marker::Sync for aya::programs::sock_ops::SockOpsLinkId
impl core::marker::Unpin for aya::programs::sock_ops::SockOpsLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::sock_ops::SockOpsLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::sock_ops::SockOpsLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::sock_ops::SockOpsLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::sock_ops::SockOpsLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::sock_ops::SockOpsLinkId where U: core::convert::From<T>
pub fn aya::programs::sock_ops::SockOpsLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::sock_ops::SockOpsLinkId where U: core::convert::Into<T>
pub type aya::programs::sock_ops::SockOpsLinkId::Error = core::convert::Infallible
pub fn aya::programs::sock_ops::SockOpsLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::sock_ops::SockOpsLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::sock_ops::SockOpsLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::sock_ops::SockOpsLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::sock_ops::SockOpsLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::sock_ops::SockOpsLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::sock_ops::SockOpsLinkId where T: ?core::marker::Sized
pub fn aya::programs::sock_ops::SockOpsLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::sock_ops::SockOpsLinkId where T: ?core::marker::Sized
pub fn aya::programs::sock_ops::SockOpsLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::sock_ops::SockOpsLinkId
pub fn aya::programs::sock_ops::SockOpsLinkId::from(t: T) -> T
pub mod aya::programs::socket_filter
pub enum aya::programs::socket_filter::SocketFilterError
pub aya::programs::socket_filter::SocketFilterError::SoAttachEbpfError
pub aya::programs::socket_filter::SocketFilterError::SoAttachEbpfError::io_error: std::io::error::Error
impl core::convert::From<aya::programs::socket_filter::SocketFilterError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya::programs::socket_filter::SocketFilterError) -> Self
impl core::error::Error for aya::programs::socket_filter::SocketFilterError
pub fn aya::programs::socket_filter::SocketFilterError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Debug for aya::programs::socket_filter::SocketFilterError
pub fn aya::programs::socket_filter::SocketFilterError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for aya::programs::socket_filter::SocketFilterError
pub fn aya::programs::socket_filter::SocketFilterError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::socket_filter::SocketFilterError
impl core::marker::Send for aya::programs::socket_filter::SocketFilterError
impl core::marker::Sync for aya::programs::socket_filter::SocketFilterError
impl core::marker::Unpin for aya::programs::socket_filter::SocketFilterError
impl !core::panic::unwind_safe::RefUnwindSafe for aya::programs::socket_filter::SocketFilterError
impl !core::panic::unwind_safe::UnwindSafe for aya::programs::socket_filter::SocketFilterError
impl<T, U> core::convert::Into<U> for aya::programs::socket_filter::SocketFilterError where U: core::convert::From<T>
pub fn aya::programs::socket_filter::SocketFilterError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::socket_filter::SocketFilterError where U: core::convert::Into<T>
pub type aya::programs::socket_filter::SocketFilterError::Error = core::convert::Infallible
pub fn aya::programs::socket_filter::SocketFilterError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::socket_filter::SocketFilterError where U: core::convert::TryFrom<T>
pub type aya::programs::socket_filter::SocketFilterError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::socket_filter::SocketFilterError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for aya::programs::socket_filter::SocketFilterError where T: core::fmt::Display + ?core::marker::Sized
pub fn aya::programs::socket_filter::SocketFilterError::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for aya::programs::socket_filter::SocketFilterError where T: 'static + ?core::marker::Sized
pub fn aya::programs::socket_filter::SocketFilterError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::socket_filter::SocketFilterError where T: ?core::marker::Sized
pub fn aya::programs::socket_filter::SocketFilterError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::socket_filter::SocketFilterError where T: ?core::marker::Sized
pub fn aya::programs::socket_filter::SocketFilterError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::socket_filter::SocketFilterError
pub fn aya::programs::socket_filter::SocketFilterError::from(t: T) -> T
pub struct aya::programs::socket_filter::SocketFilter
impl aya::programs::socket_filter::SocketFilter
pub fn aya::programs::socket_filter::SocketFilter::attach<T: std::os::fd::owned::AsFd>(&mut self, socket: T) -> core::result::Result<aya::programs::socket_filter::SocketFilterLinkId, aya::programs::ProgramError>
pub fn aya::programs::socket_filter::SocketFilter::detach(&mut self, link_id: aya::programs::socket_filter::SocketFilterLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::socket_filter::SocketFilter::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::socket_filter::SocketFilter::take_link(&mut self, link_id: aya::programs::socket_filter::SocketFilterLinkId) -> core::result::Result<aya::programs::socket_filter::SocketFilterLink, aya::programs::ProgramError>
impl aya::programs::socket_filter::SocketFilter
pub fn aya::programs::socket_filter::SocketFilter::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::socket_filter::SocketFilter
pub fn aya::programs::socket_filter::SocketFilter::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::socket_filter::SocketFilter
pub fn aya::programs::socket_filter::SocketFilter::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::socket_filter::SocketFilter
pub fn aya::programs::socket_filter::SocketFilter::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::socket_filter::SocketFilter::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::socket_filter::SocketFilter
pub fn aya::programs::socket_filter::SocketFilter::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::socket_filter::SocketFilter
pub fn aya::programs::socket_filter::SocketFilter::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::socket_filter::SocketFilter
pub fn aya::programs::socket_filter::SocketFilter::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::socket_filter::SocketFilter
pub type &'a aya::programs::socket_filter::SocketFilter::Error = aya::programs::ProgramError
pub fn &'a aya::programs::socket_filter::SocketFilter::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::socket_filter::SocketFilter, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::socket_filter::SocketFilter
pub type &'a mut aya::programs::socket_filter::SocketFilter::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::socket_filter::SocketFilter::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::socket_filter::SocketFilter, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::socket_filter::SocketFilter
impl core::marker::Send for aya::programs::socket_filter::SocketFilter
impl core::marker::Sync for aya::programs::socket_filter::SocketFilter
impl core::marker::Unpin for aya::programs::socket_filter::SocketFilter
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::socket_filter::SocketFilter
impl core::panic::unwind_safe::UnwindSafe for aya::programs::socket_filter::SocketFilter
impl<T, U> core::convert::Into<U> for aya::programs::socket_filter::SocketFilter where U: core::convert::From<T>
pub fn aya::programs::socket_filter::SocketFilter::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::socket_filter::SocketFilter where U: core::convert::Into<T>
pub type aya::programs::socket_filter::SocketFilter::Error = core::convert::Infallible
pub fn aya::programs::socket_filter::SocketFilter::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::socket_filter::SocketFilter where U: core::convert::TryFrom<T>
pub type aya::programs::socket_filter::SocketFilter::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::socket_filter::SocketFilter::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::socket_filter::SocketFilter where T: 'static + ?core::marker::Sized
pub fn aya::programs::socket_filter::SocketFilter::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::socket_filter::SocketFilter where T: ?core::marker::Sized
pub fn aya::programs::socket_filter::SocketFilter::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::socket_filter::SocketFilter where T: ?core::marker::Sized
pub fn aya::programs::socket_filter::SocketFilter::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::socket_filter::SocketFilter
pub fn aya::programs::socket_filter::SocketFilter::from(t: T) -> T
pub struct aya::programs::socket_filter::SocketFilterLink
impl aya::programs::links::Link for aya::programs::socket_filter::SocketFilterLink
pub type aya::programs::socket_filter::SocketFilterLink::Id = aya::programs::socket_filter::SocketFilterLinkId
pub fn aya::programs::socket_filter::SocketFilterLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::socket_filter::SocketFilterLink::id(&self) -> Self::Id
impl core::fmt::Debug for aya::programs::socket_filter::SocketFilterLink
pub fn aya::programs::socket_filter::SocketFilterLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::socket_filter::SocketFilterLink
impl core::marker::Send for aya::programs::socket_filter::SocketFilterLink
impl core::marker::Sync for aya::programs::socket_filter::SocketFilterLink
impl core::marker::Unpin for aya::programs::socket_filter::SocketFilterLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::socket_filter::SocketFilterLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::socket_filter::SocketFilterLink
impl<T, U> core::convert::Into<U> for aya::programs::socket_filter::SocketFilterLink where U: core::convert::From<T>
pub fn aya::programs::socket_filter::SocketFilterLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::socket_filter::SocketFilterLink where U: core::convert::Into<T>
pub type aya::programs::socket_filter::SocketFilterLink::Error = core::convert::Infallible
pub fn aya::programs::socket_filter::SocketFilterLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::socket_filter::SocketFilterLink where U: core::convert::TryFrom<T>
pub type aya::programs::socket_filter::SocketFilterLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::socket_filter::SocketFilterLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::socket_filter::SocketFilterLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::socket_filter::SocketFilterLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::socket_filter::SocketFilterLink where T: ?core::marker::Sized
pub fn aya::programs::socket_filter::SocketFilterLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::socket_filter::SocketFilterLink where T: ?core::marker::Sized
pub fn aya::programs::socket_filter::SocketFilterLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::socket_filter::SocketFilterLink
pub fn aya::programs::socket_filter::SocketFilterLink::from(t: T) -> T
pub struct aya::programs::socket_filter::SocketFilterLinkId(_, _)
impl core::cmp::Eq for aya::programs::socket_filter::SocketFilterLinkId
impl core::cmp::PartialEq for aya::programs::socket_filter::SocketFilterLinkId
pub fn aya::programs::socket_filter::SocketFilterLinkId::eq(&self, other: &aya::programs::socket_filter::SocketFilterLinkId) -> bool
impl core::fmt::Debug for aya::programs::socket_filter::SocketFilterLinkId
pub fn aya::programs::socket_filter::SocketFilterLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::socket_filter::SocketFilterLinkId
pub fn aya::programs::socket_filter::SocketFilterLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::socket_filter::SocketFilterLinkId
impl core::marker::Freeze for aya::programs::socket_filter::SocketFilterLinkId
impl core::marker::Send for aya::programs::socket_filter::SocketFilterLinkId
impl core::marker::Sync for aya::programs::socket_filter::SocketFilterLinkId
impl core::marker::Unpin for aya::programs::socket_filter::SocketFilterLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::socket_filter::SocketFilterLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::socket_filter::SocketFilterLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::socket_filter::SocketFilterLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::socket_filter::SocketFilterLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::socket_filter::SocketFilterLinkId where U: core::convert::From<T>
pub fn aya::programs::socket_filter::SocketFilterLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::socket_filter::SocketFilterLinkId where U: core::convert::Into<T>
pub type aya::programs::socket_filter::SocketFilterLinkId::Error = core::convert::Infallible
pub fn aya::programs::socket_filter::SocketFilterLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::socket_filter::SocketFilterLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::socket_filter::SocketFilterLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::socket_filter::SocketFilterLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::socket_filter::SocketFilterLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::socket_filter::SocketFilterLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::socket_filter::SocketFilterLinkId where T: ?core::marker::Sized
pub fn aya::programs::socket_filter::SocketFilterLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::socket_filter::SocketFilterLinkId where T: ?core::marker::Sized
pub fn aya::programs::socket_filter::SocketFilterLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::socket_filter::SocketFilterLinkId
pub fn aya::programs::socket_filter::SocketFilterLinkId::from(t: T) -> T
pub mod aya::programs::tc
pub enum aya::programs::tc::TcAttachOptions
pub aya::programs::tc::TcAttachOptions::Netlink(aya::programs::tc::NlOptions)
pub aya::programs::tc::TcAttachOptions::TcxOrder(aya::programs::links::LinkOrder)
impl core::fmt::Debug for aya::programs::tc::TcAttachOptions
pub fn aya::programs::tc::TcAttachOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::tc::TcAttachOptions
impl core::marker::Send for aya::programs::tc::TcAttachOptions
impl core::marker::Sync for aya::programs::tc::TcAttachOptions
impl core::marker::Unpin for aya::programs::tc::TcAttachOptions
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::tc::TcAttachOptions
impl core::panic::unwind_safe::UnwindSafe for aya::programs::tc::TcAttachOptions
impl<T, U> core::convert::Into<U> for aya::programs::tc::TcAttachOptions where U: core::convert::From<T>
pub fn aya::programs::tc::TcAttachOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::tc::TcAttachOptions where U: core::convert::Into<T>
pub type aya::programs::tc::TcAttachOptions::Error = core::convert::Infallible
pub fn aya::programs::tc::TcAttachOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::tc::TcAttachOptions where U: core::convert::TryFrom<T>
pub type aya::programs::tc::TcAttachOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::tc::TcAttachOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::tc::TcAttachOptions where T: 'static + ?core::marker::Sized
pub fn aya::programs::tc::TcAttachOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::tc::TcAttachOptions where T: ?core::marker::Sized
pub fn aya::programs::tc::TcAttachOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::tc::TcAttachOptions where T: ?core::marker::Sized
pub fn aya::programs::tc::TcAttachOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::tc::TcAttachOptions
pub fn aya::programs::tc::TcAttachOptions::from(t: T) -> T
pub enum aya::programs::tc::TcAttachType
pub aya::programs::tc::TcAttachType::Custom(u32)
pub aya::programs::tc::TcAttachType::Egress
pub aya::programs::tc::TcAttachType::Ingress
impl core::clone::Clone for aya::programs::tc::TcAttachType
pub fn aya::programs::tc::TcAttachType::clone(&self) -> aya::programs::tc::TcAttachType
impl core::cmp::Eq for aya::programs::tc::TcAttachType
impl core::cmp::PartialEq for aya::programs::tc::TcAttachType
pub fn aya::programs::tc::TcAttachType::eq(&self, other: &aya::programs::tc::TcAttachType) -> bool
impl core::fmt::Debug for aya::programs::tc::TcAttachType
pub fn aya::programs::tc::TcAttachType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::tc::TcAttachType
pub fn aya::programs::tc::TcAttachType::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::Copy for aya::programs::tc::TcAttachType
impl core::marker::StructuralPartialEq for aya::programs::tc::TcAttachType
impl core::marker::Freeze for aya::programs::tc::TcAttachType
impl core::marker::Send for aya::programs::tc::TcAttachType
impl core::marker::Sync for aya::programs::tc::TcAttachType
impl core::marker::Unpin for aya::programs::tc::TcAttachType
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::tc::TcAttachType
impl core::panic::unwind_safe::UnwindSafe for aya::programs::tc::TcAttachType
impl<Q, K> equivalent::Equivalent<K> for aya::programs::tc::TcAttachType where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::tc::TcAttachType::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::tc::TcAttachType where U: core::convert::From<T>
pub fn aya::programs::tc::TcAttachType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::tc::TcAttachType where U: core::convert::Into<T>
pub type aya::programs::tc::TcAttachType::Error = core::convert::Infallible
pub fn aya::programs::tc::TcAttachType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::tc::TcAttachType where U: core::convert::TryFrom<T>
pub type aya::programs::tc::TcAttachType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::tc::TcAttachType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for aya::programs::tc::TcAttachType where T: core::clone::Clone
pub type aya::programs::tc::TcAttachType::Owned = T
pub fn aya::programs::tc::TcAttachType::clone_into(&self, target: &mut T)
pub fn aya::programs::tc::TcAttachType::to_owned(&self) -> T
impl<T> core::any::Any for aya::programs::tc::TcAttachType where T: 'static + ?core::marker::Sized
pub fn aya::programs::tc::TcAttachType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::tc::TcAttachType where T: ?core::marker::Sized
pub fn aya::programs::tc::TcAttachType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::tc::TcAttachType where T: ?core::marker::Sized
pub fn aya::programs::tc::TcAttachType::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for aya::programs::tc::TcAttachType where T: core::clone::Clone
pub unsafe fn aya::programs::tc::TcAttachType::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for aya::programs::tc::TcAttachType
pub fn aya::programs::tc::TcAttachType::from(t: T) -> T
pub enum aya::programs::tc::TcError
pub aya::programs::tc::TcError::AlreadyAttached
pub aya::programs::tc::TcError::InvalidLinkOperation
pub aya::programs::tc::TcError::InvalidTcxAttach(u32)
pub aya::programs::tc::TcError::NetlinkError
pub aya::programs::tc::TcError::NetlinkError::io_error: std::io::error::Error
impl core::convert::From<aya::programs::tc::TcError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya::programs::tc::TcError) -> Self
impl core::error::Error for aya::programs::tc::TcError
pub fn aya::programs::tc::TcError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Debug for aya::programs::tc::TcError
pub fn aya::programs::tc::TcError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for aya::programs::tc::TcError
pub fn aya::programs::tc::TcError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::tc::TcError
impl core::marker::Send for aya::programs::tc::TcError
impl core::marker::Sync for aya::programs::tc::TcError
impl core::marker::Unpin for aya::programs::tc::TcError
impl !core::panic::unwind_safe::RefUnwindSafe for aya::programs::tc::TcError
impl !core::panic::unwind_safe::UnwindSafe for aya::programs::tc::TcError
impl<T, U> core::convert::Into<U> for aya::programs::tc::TcError where U: core::convert::From<T>
pub fn aya::programs::tc::TcError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::tc::TcError where U: core::convert::Into<T>
pub type aya::programs::tc::TcError::Error = core::convert::Infallible
pub fn aya::programs::tc::TcError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::tc::TcError where U: core::convert::TryFrom<T>
pub type aya::programs::tc::TcError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::tc::TcError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for aya::programs::tc::TcError where T: core::fmt::Display + ?core::marker::Sized
pub fn aya::programs::tc::TcError::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for aya::programs::tc::TcError where T: 'static + ?core::marker::Sized
pub fn aya::programs::tc::TcError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::tc::TcError where T: ?core::marker::Sized
pub fn aya::programs::tc::TcError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::tc::TcError where T: ?core::marker::Sized
pub fn aya::programs::tc::TcError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::tc::TcError
pub fn aya::programs::tc::TcError::from(t: T) -> T
pub struct aya::programs::tc::NlOptions
pub aya::programs::tc::NlOptions::handle: u32
pub aya::programs::tc::NlOptions::priority: u16
impl core::cmp::Eq for aya::programs::tc::NlOptions
impl core::cmp::PartialEq for aya::programs::tc::NlOptions
pub fn aya::programs::tc::NlOptions::eq(&self, other: &aya::programs::tc::NlOptions) -> bool
impl core::default::Default for aya::programs::tc::NlOptions
pub fn aya::programs::tc::NlOptions::default() -> aya::programs::tc::NlOptions
impl core::fmt::Debug for aya::programs::tc::NlOptions
pub fn aya::programs::tc::NlOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::tc::NlOptions
pub fn aya::programs::tc::NlOptions::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::tc::NlOptions
impl core::marker::Freeze for aya::programs::tc::NlOptions
impl core::marker::Send for aya::programs::tc::NlOptions
impl core::marker::Sync for aya::programs::tc::NlOptions
impl core::marker::Unpin for aya::programs::tc::NlOptions
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::tc::NlOptions
impl core::panic::unwind_safe::UnwindSafe for aya::programs::tc::NlOptions
impl<Q, K> equivalent::Equivalent<K> for aya::programs::tc::NlOptions where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::tc::NlOptions::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::tc::NlOptions where U: core::convert::From<T>
pub fn aya::programs::tc::NlOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::tc::NlOptions where U: core::convert::Into<T>
pub type aya::programs::tc::NlOptions::Error = core::convert::Infallible
pub fn aya::programs::tc::NlOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::tc::NlOptions where U: core::convert::TryFrom<T>
pub type aya::programs::tc::NlOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::tc::NlOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::tc::NlOptions where T: 'static + ?core::marker::Sized
pub fn aya::programs::tc::NlOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::tc::NlOptions where T: ?core::marker::Sized
pub fn aya::programs::tc::NlOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::tc::NlOptions where T: ?core::marker::Sized
pub fn aya::programs::tc::NlOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::tc::NlOptions
pub fn aya::programs::tc::NlOptions::from(t: T) -> T
pub struct aya::programs::tc::SchedClassifier
impl aya::programs::tc::SchedClassifier
pub fn aya::programs::tc::SchedClassifier::attach(&mut self, interface: &str, attach_type: aya::programs::tc::TcAttachType) -> core::result::Result<aya::programs::tc::SchedClassifierLinkId, aya::programs::ProgramError>
pub fn aya::programs::tc::SchedClassifier::attach_to_link(&mut self, link: aya::programs::tc::SchedClassifierLink) -> core::result::Result<aya::programs::tc::SchedClassifierLinkId, aya::programs::ProgramError>
pub fn aya::programs::tc::SchedClassifier::attach_with_options(&mut self, interface: &str, attach_type: aya::programs::tc::TcAttachType, options: aya::programs::tc::TcAttachOptions) -> core::result::Result<aya::programs::tc::SchedClassifierLinkId, aya::programs::ProgramError>
pub fn aya::programs::tc::SchedClassifier::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
pub fn aya::programs::tc::SchedClassifier::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::tc::SchedClassifier::query_tcx(interface: &str, attach_type: aya::programs::tc::TcAttachType) -> core::result::Result<(u64, alloc::vec::Vec<aya::programs::ProgramInfo>), aya::programs::ProgramError>
impl aya::programs::tc::SchedClassifier
pub fn aya::programs::tc::SchedClassifier::detach(&mut self, link_id: aya::programs::tc::SchedClassifierLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::tc::SchedClassifier::take_link(&mut self, link_id: aya::programs::tc::SchedClassifierLinkId) -> core::result::Result<aya::programs::tc::SchedClassifierLink, aya::programs::ProgramError>
impl aya::programs::tc::SchedClassifier
pub fn aya::programs::tc::SchedClassifier::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::tc::SchedClassifier
pub fn aya::programs::tc::SchedClassifier::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::tc::SchedClassifier
pub fn aya::programs::tc::SchedClassifier::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::tc::SchedClassifier::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::tc::SchedClassifier
pub fn aya::programs::tc::SchedClassifier::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::MultiProgram for aya::programs::tc::SchedClassifier
pub fn aya::programs::tc::SchedClassifier::fd(&self) -> core::result::Result<std::os::fd::owned::BorrowedFd<'_>, aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::tc::SchedClassifier
pub fn aya::programs::tc::SchedClassifier::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::tc::SchedClassifier
pub fn aya::programs::tc::SchedClassifier::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::tc::SchedClassifier
pub type &'a aya::programs::tc::SchedClassifier::Error = aya::programs::ProgramError
pub fn &'a aya::programs::tc::SchedClassifier::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::tc::SchedClassifier, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::tc::SchedClassifier
pub type &'a mut aya::programs::tc::SchedClassifier::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::tc::SchedClassifier::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::tc::SchedClassifier, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::tc::SchedClassifier
impl core::marker::Send for aya::programs::tc::SchedClassifier
impl core::marker::Sync for aya::programs::tc::SchedClassifier
impl core::marker::Unpin for aya::programs::tc::SchedClassifier
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::tc::SchedClassifier
impl core::panic::unwind_safe::UnwindSafe for aya::programs::tc::SchedClassifier
impl<T, U> core::convert::Into<U> for aya::programs::tc::SchedClassifier where U: core::convert::From<T>
pub fn aya::programs::tc::SchedClassifier::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::tc::SchedClassifier where U: core::convert::Into<T>
pub type aya::programs::tc::SchedClassifier::Error = core::convert::Infallible
pub fn aya::programs::tc::SchedClassifier::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::tc::SchedClassifier where U: core::convert::TryFrom<T>
pub type aya::programs::tc::SchedClassifier::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::tc::SchedClassifier::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::tc::SchedClassifier where T: 'static + ?core::marker::Sized
pub fn aya::programs::tc::SchedClassifier::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::tc::SchedClassifier where T: ?core::marker::Sized
pub fn aya::programs::tc::SchedClassifier::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::tc::SchedClassifier where T: ?core::marker::Sized
pub fn aya::programs::tc::SchedClassifier::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::tc::SchedClassifier
pub fn aya::programs::tc::SchedClassifier::from(t: T) -> T
pub struct aya::programs::tc::SchedClassifierLink(_)
impl aya::programs::tc::SchedClassifierLink
pub fn aya::programs::tc::SchedClassifierLink::attach_type(&self) -> core::result::Result<aya::programs::tc::TcAttachType, aya::programs::ProgramError>
pub fn aya::programs::tc::SchedClassifierLink::attached(if_name: &str, attach_type: aya::programs::tc::TcAttachType, priority: u16, handle: u32) -> core::result::Result<Self, std::io::error::Error>
pub fn aya::programs::tc::SchedClassifierLink::handle(&self) -> core::result::Result<u32, aya::programs::ProgramError>
pub fn aya::programs::tc::SchedClassifierLink::priority(&self) -> core::result::Result<u16, aya::programs::ProgramError>
impl aya::programs::MultiProgLink for aya::programs::tc::SchedClassifierLink
pub fn aya::programs::tc::SchedClassifierLink::fd(&self) -> core::result::Result<std::os::fd::owned::BorrowedFd<'_>, aya::programs::links::LinkError>
impl aya::programs::links::Link for aya::programs::tc::SchedClassifierLink
pub type aya::programs::tc::SchedClassifierLink::Id = aya::programs::tc::SchedClassifierLinkId
pub fn aya::programs::tc::SchedClassifierLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::tc::SchedClassifierLink::id(&self) -> Self::Id
impl core::convert::TryFrom<aya::programs::links::FdLink> for aya::programs::tc::SchedClassifierLink
pub type aya::programs::tc::SchedClassifierLink::Error = aya::programs::links::LinkError
pub fn aya::programs::tc::SchedClassifierLink::try_from(fd_link: aya::programs::links::FdLink) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::programs::tc::SchedClassifierLink> for aya::programs::links::FdLink
pub type aya::programs::links::FdLink::Error = aya::programs::links::LinkError
pub fn aya::programs::links::FdLink::try_from(value: aya::programs::tc::SchedClassifierLink) -> core::result::Result<Self, Self::Error>
impl core::fmt::Debug for aya::programs::tc::SchedClassifierLink
pub fn aya::programs::tc::SchedClassifierLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::tc::SchedClassifierLink
pub fn aya::programs::tc::SchedClassifierLink::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::tc::SchedClassifierLink> for &'a aya::programs::links::FdLink
pub type &'a aya::programs::links::FdLink::Error = aya::programs::links::LinkError
pub fn &'a aya::programs::links::FdLink::try_from(value: &'a aya::programs::tc::SchedClassifierLink) -> core::result::Result<Self, Self::Error>
impl core::marker::Freeze for aya::programs::tc::SchedClassifierLink
impl core::marker::Send for aya::programs::tc::SchedClassifierLink
impl core::marker::Sync for aya::programs::tc::SchedClassifierLink
impl core::marker::Unpin for aya::programs::tc::SchedClassifierLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::tc::SchedClassifierLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::tc::SchedClassifierLink
impl<T, U> core::convert::Into<U> for aya::programs::tc::SchedClassifierLink where U: core::convert::From<T>
pub fn aya::programs::tc::SchedClassifierLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::tc::SchedClassifierLink where U: core::convert::Into<T>
pub type aya::programs::tc::SchedClassifierLink::Error = core::convert::Infallible
pub fn aya::programs::tc::SchedClassifierLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::tc::SchedClassifierLink where U: core::convert::TryFrom<T>
pub type aya::programs::tc::SchedClassifierLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::tc::SchedClassifierLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::tc::SchedClassifierLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::tc::SchedClassifierLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::tc::SchedClassifierLink where T: ?core::marker::Sized
pub fn aya::programs::tc::SchedClassifierLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::tc::SchedClassifierLink where T: ?core::marker::Sized
pub fn aya::programs::tc::SchedClassifierLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::tc::SchedClassifierLink
pub fn aya::programs::tc::SchedClassifierLink::from(t: T) -> T
pub struct aya::programs::tc::SchedClassifierLinkId(_)
impl core::cmp::Eq for aya::programs::tc::SchedClassifierLinkId
impl core::cmp::PartialEq for aya::programs::tc::SchedClassifierLinkId
pub fn aya::programs::tc::SchedClassifierLinkId::eq(&self, other: &aya::programs::tc::SchedClassifierLinkId) -> bool
impl core::fmt::Debug for aya::programs::tc::SchedClassifierLinkId
pub fn aya::programs::tc::SchedClassifierLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::tc::SchedClassifierLinkId
pub fn aya::programs::tc::SchedClassifierLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::tc::SchedClassifierLinkId
impl core::marker::Freeze for aya::programs::tc::SchedClassifierLinkId
impl core::marker::Send for aya::programs::tc::SchedClassifierLinkId
impl core::marker::Sync for aya::programs::tc::SchedClassifierLinkId
impl core::marker::Unpin for aya::programs::tc::SchedClassifierLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::tc::SchedClassifierLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::tc::SchedClassifierLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::tc::SchedClassifierLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::tc::SchedClassifierLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::tc::SchedClassifierLinkId where U: core::convert::From<T>
pub fn aya::programs::tc::SchedClassifierLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::tc::SchedClassifierLinkId where U: core::convert::Into<T>
pub type aya::programs::tc::SchedClassifierLinkId::Error = core::convert::Infallible
pub fn aya::programs::tc::SchedClassifierLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::tc::SchedClassifierLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::tc::SchedClassifierLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::tc::SchedClassifierLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::tc::SchedClassifierLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::tc::SchedClassifierLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::tc::SchedClassifierLinkId where T: ?core::marker::Sized
pub fn aya::programs::tc::SchedClassifierLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::tc::SchedClassifierLinkId where T: ?core::marker::Sized
pub fn aya::programs::tc::SchedClassifierLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::tc::SchedClassifierLinkId
pub fn aya::programs::tc::SchedClassifierLinkId::from(t: T) -> T
pub fn aya::programs::tc::qdisc_add_clsact(if_name: &str) -> core::result::Result<(), std::io::error::Error>
pub fn aya::programs::tc::qdisc_detach_program(if_name: &str, attach_type: aya::programs::tc::TcAttachType, name: &str) -> core::result::Result<(), std::io::error::Error>
pub mod aya::programs::tp_btf
pub struct aya::programs::tp_btf::BtfTracePoint
impl aya::programs::tp_btf::BtfTracePoint
pub fn aya::programs::tp_btf::BtfTracePoint::attach(&mut self) -> core::result::Result<aya::programs::tp_btf::BtfTracePointLinkId, aya::programs::ProgramError>
pub fn aya::programs::tp_btf::BtfTracePoint::load(&mut self, tracepoint: &str, btf: &aya_obj::btf::btf::Btf) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::tp_btf::BtfTracePoint
pub fn aya::programs::tp_btf::BtfTracePoint::detach(&mut self, link_id: aya::programs::tp_btf::BtfTracePointLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::tp_btf::BtfTracePoint::take_link(&mut self, link_id: aya::programs::tp_btf::BtfTracePointLinkId) -> core::result::Result<aya::programs::tp_btf::BtfTracePointLink, aya::programs::ProgramError>
impl aya::programs::tp_btf::BtfTracePoint
pub fn aya::programs::tp_btf::BtfTracePoint::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::tp_btf::BtfTracePoint
pub fn aya::programs::tp_btf::BtfTracePoint::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::tp_btf::BtfTracePoint
pub fn aya::programs::tp_btf::BtfTracePoint::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::tp_btf::BtfTracePoint
pub fn aya::programs::tp_btf::BtfTracePoint::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::tp_btf::BtfTracePoint::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::tp_btf::BtfTracePoint
pub fn aya::programs::tp_btf::BtfTracePoint::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::tp_btf::BtfTracePoint
pub fn aya::programs::tp_btf::BtfTracePoint::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::tp_btf::BtfTracePoint
pub fn aya::programs::tp_btf::BtfTracePoint::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::tp_btf::BtfTracePoint
pub type &'a aya::programs::tp_btf::BtfTracePoint::Error = aya::programs::ProgramError
pub fn &'a aya::programs::tp_btf::BtfTracePoint::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::tp_btf::BtfTracePoint, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::tp_btf::BtfTracePoint
pub type &'a mut aya::programs::tp_btf::BtfTracePoint::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::tp_btf::BtfTracePoint::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::tp_btf::BtfTracePoint, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::tp_btf::BtfTracePoint
impl core::marker::Send for aya::programs::tp_btf::BtfTracePoint
impl core::marker::Sync for aya::programs::tp_btf::BtfTracePoint
impl core::marker::Unpin for aya::programs::tp_btf::BtfTracePoint
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::tp_btf::BtfTracePoint
impl core::panic::unwind_safe::UnwindSafe for aya::programs::tp_btf::BtfTracePoint
impl<T, U> core::convert::Into<U> for aya::programs::tp_btf::BtfTracePoint where U: core::convert::From<T>
pub fn aya::programs::tp_btf::BtfTracePoint::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::tp_btf::BtfTracePoint where U: core::convert::Into<T>
pub type aya::programs::tp_btf::BtfTracePoint::Error = core::convert::Infallible
pub fn aya::programs::tp_btf::BtfTracePoint::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::tp_btf::BtfTracePoint where U: core::convert::TryFrom<T>
pub type aya::programs::tp_btf::BtfTracePoint::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::tp_btf::BtfTracePoint::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::tp_btf::BtfTracePoint where T: 'static + ?core::marker::Sized
pub fn aya::programs::tp_btf::BtfTracePoint::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::tp_btf::BtfTracePoint where T: ?core::marker::Sized
pub fn aya::programs::tp_btf::BtfTracePoint::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::tp_btf::BtfTracePoint where T: ?core::marker::Sized
pub fn aya::programs::tp_btf::BtfTracePoint::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::tp_btf::BtfTracePoint
pub fn aya::programs::tp_btf::BtfTracePoint::from(t: T) -> T
pub struct aya::programs::tp_btf::BtfTracePointLink(_)
impl aya::programs::links::Link for aya::programs::tp_btf::BtfTracePointLink
pub type aya::programs::tp_btf::BtfTracePointLink::Id = aya::programs::tp_btf::BtfTracePointLinkId
pub fn aya::programs::tp_btf::BtfTracePointLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::tp_btf::BtfTracePointLink::id(&self) -> Self::Id
impl core::convert::From<aya::programs::links::FdLink> for aya::programs::tp_btf::BtfTracePointLink
pub fn aya::programs::tp_btf::BtfTracePointLink::from(b: aya::programs::links::FdLink) -> aya::programs::tp_btf::BtfTracePointLink
impl core::convert::From<aya::programs::tp_btf::BtfTracePointLink> for aya::programs::links::FdLink
pub fn aya::programs::links::FdLink::from(w: aya::programs::tp_btf::BtfTracePointLink) -> aya::programs::links::FdLink
impl core::fmt::Debug for aya::programs::tp_btf::BtfTracePointLink
pub fn aya::programs::tp_btf::BtfTracePointLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::tp_btf::BtfTracePointLink
pub fn aya::programs::tp_btf::BtfTracePointLink::drop(&mut self)
impl core::marker::Freeze for aya::programs::tp_btf::BtfTracePointLink
impl core::marker::Send for aya::programs::tp_btf::BtfTracePointLink
impl core::marker::Sync for aya::programs::tp_btf::BtfTracePointLink
impl core::marker::Unpin for aya::programs::tp_btf::BtfTracePointLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::tp_btf::BtfTracePointLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::tp_btf::BtfTracePointLink
impl<T, U> core::convert::Into<U> for aya::programs::tp_btf::BtfTracePointLink where U: core::convert::From<T>
pub fn aya::programs::tp_btf::BtfTracePointLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::tp_btf::BtfTracePointLink where U: core::convert::Into<T>
pub type aya::programs::tp_btf::BtfTracePointLink::Error = core::convert::Infallible
pub fn aya::programs::tp_btf::BtfTracePointLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::tp_btf::BtfTracePointLink where U: core::convert::TryFrom<T>
pub type aya::programs::tp_btf::BtfTracePointLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::tp_btf::BtfTracePointLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::tp_btf::BtfTracePointLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::tp_btf::BtfTracePointLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::tp_btf::BtfTracePointLink where T: ?core::marker::Sized
pub fn aya::programs::tp_btf::BtfTracePointLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::tp_btf::BtfTracePointLink where T: ?core::marker::Sized
pub fn aya::programs::tp_btf::BtfTracePointLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::tp_btf::BtfTracePointLink
pub fn aya::programs::tp_btf::BtfTracePointLink::from(t: T) -> T
pub struct aya::programs::tp_btf::BtfTracePointLinkId(_)
impl core::cmp::Eq for aya::programs::tp_btf::BtfTracePointLinkId
impl core::cmp::PartialEq for aya::programs::tp_btf::BtfTracePointLinkId
pub fn aya::programs::tp_btf::BtfTracePointLinkId::eq(&self, other: &aya::programs::tp_btf::BtfTracePointLinkId) -> bool
impl core::fmt::Debug for aya::programs::tp_btf::BtfTracePointLinkId
pub fn aya::programs::tp_btf::BtfTracePointLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::tp_btf::BtfTracePointLinkId
pub fn aya::programs::tp_btf::BtfTracePointLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::tp_btf::BtfTracePointLinkId
impl core::marker::Freeze for aya::programs::tp_btf::BtfTracePointLinkId
impl core::marker::Send for aya::programs::tp_btf::BtfTracePointLinkId
impl core::marker::Sync for aya::programs::tp_btf::BtfTracePointLinkId
impl core::marker::Unpin for aya::programs::tp_btf::BtfTracePointLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::tp_btf::BtfTracePointLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::tp_btf::BtfTracePointLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::tp_btf::BtfTracePointLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::tp_btf::BtfTracePointLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::tp_btf::BtfTracePointLinkId where U: core::convert::From<T>
pub fn aya::programs::tp_btf::BtfTracePointLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::tp_btf::BtfTracePointLinkId where U: core::convert::Into<T>
pub type aya::programs::tp_btf::BtfTracePointLinkId::Error = core::convert::Infallible
pub fn aya::programs::tp_btf::BtfTracePointLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::tp_btf::BtfTracePointLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::tp_btf::BtfTracePointLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::tp_btf::BtfTracePointLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::tp_btf::BtfTracePointLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::tp_btf::BtfTracePointLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::tp_btf::BtfTracePointLinkId where T: ?core::marker::Sized
pub fn aya::programs::tp_btf::BtfTracePointLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::tp_btf::BtfTracePointLinkId where T: ?core::marker::Sized
pub fn aya::programs::tp_btf::BtfTracePointLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::tp_btf::BtfTracePointLinkId
pub fn aya::programs::tp_btf::BtfTracePointLinkId::from(t: T) -> T
pub mod aya::programs::trace_point
pub enum aya::programs::trace_point::TracePointError
pub aya::programs::trace_point::TracePointError::FileError
pub aya::programs::trace_point::TracePointError::FileError::filename: alloc::string::String
pub aya::programs::trace_point::TracePointError::FileError::io_error: std::io::error::Error
impl core::convert::From<aya::programs::trace_point::TracePointError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya::programs::trace_point::TracePointError) -> Self
impl core::error::Error for aya::programs::trace_point::TracePointError
pub fn aya::programs::trace_point::TracePointError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Debug for aya::programs::trace_point::TracePointError
pub fn aya::programs::trace_point::TracePointError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for aya::programs::trace_point::TracePointError
pub fn aya::programs::trace_point::TracePointError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::trace_point::TracePointError
impl core::marker::Send for aya::programs::trace_point::TracePointError
impl core::marker::Sync for aya::programs::trace_point::TracePointError
impl core::marker::Unpin for aya::programs::trace_point::TracePointError
impl !core::panic::unwind_safe::RefUnwindSafe for aya::programs::trace_point::TracePointError
impl !core::panic::unwind_safe::UnwindSafe for aya::programs::trace_point::TracePointError
impl<T, U> core::convert::Into<U> for aya::programs::trace_point::TracePointError where U: core::convert::From<T>
pub fn aya::programs::trace_point::TracePointError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::trace_point::TracePointError where U: core::convert::Into<T>
pub type aya::programs::trace_point::TracePointError::Error = core::convert::Infallible
pub fn aya::programs::trace_point::TracePointError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::trace_point::TracePointError where U: core::convert::TryFrom<T>
pub type aya::programs::trace_point::TracePointError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::trace_point::TracePointError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for aya::programs::trace_point::TracePointError where T: core::fmt::Display + ?core::marker::Sized
pub fn aya::programs::trace_point::TracePointError::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for aya::programs::trace_point::TracePointError where T: 'static + ?core::marker::Sized
pub fn aya::programs::trace_point::TracePointError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::trace_point::TracePointError where T: ?core::marker::Sized
pub fn aya::programs::trace_point::TracePointError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::trace_point::TracePointError where T: ?core::marker::Sized
pub fn aya::programs::trace_point::TracePointError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::trace_point::TracePointError
pub fn aya::programs::trace_point::TracePointError::from(t: T) -> T
pub struct aya::programs::trace_point::TracePoint
impl aya::programs::trace_point::TracePoint
pub fn aya::programs::trace_point::TracePoint::attach(&mut self, category: &str, name: &str) -> core::result::Result<aya::programs::trace_point::TracePointLinkId, aya::programs::ProgramError>
pub fn aya::programs::trace_point::TracePoint::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::trace_point::TracePoint
pub fn aya::programs::trace_point::TracePoint::detach(&mut self, link_id: aya::programs::trace_point::TracePointLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::trace_point::TracePoint::take_link(&mut self, link_id: aya::programs::trace_point::TracePointLinkId) -> core::result::Result<aya::programs::trace_point::TracePointLink, aya::programs::ProgramError>
impl aya::programs::trace_point::TracePoint
pub fn aya::programs::trace_point::TracePoint::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::trace_point::TracePoint
pub fn aya::programs::trace_point::TracePoint::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::trace_point::TracePoint
pub fn aya::programs::trace_point::TracePoint::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::trace_point::TracePoint
pub fn aya::programs::trace_point::TracePoint::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::trace_point::TracePoint::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::trace_point::TracePoint
pub fn aya::programs::trace_point::TracePoint::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::trace_point::TracePoint
pub fn aya::programs::trace_point::TracePoint::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::trace_point::TracePoint
pub fn aya::programs::trace_point::TracePoint::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::trace_point::TracePoint
pub type &'a aya::programs::trace_point::TracePoint::Error = aya::programs::ProgramError
pub fn &'a aya::programs::trace_point::TracePoint::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::trace_point::TracePoint, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::trace_point::TracePoint
pub type &'a mut aya::programs::trace_point::TracePoint::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::trace_point::TracePoint::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::trace_point::TracePoint, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::trace_point::TracePoint
impl core::marker::Send for aya::programs::trace_point::TracePoint
impl core::marker::Sync for aya::programs::trace_point::TracePoint
impl core::marker::Unpin for aya::programs::trace_point::TracePoint
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::trace_point::TracePoint
impl core::panic::unwind_safe::UnwindSafe for aya::programs::trace_point::TracePoint
impl<T, U> core::convert::Into<U> for aya::programs::trace_point::TracePoint where U: core::convert::From<T>
pub fn aya::programs::trace_point::TracePoint::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::trace_point::TracePoint where U: core::convert::Into<T>
pub type aya::programs::trace_point::TracePoint::Error = core::convert::Infallible
pub fn aya::programs::trace_point::TracePoint::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::trace_point::TracePoint where U: core::convert::TryFrom<T>
pub type aya::programs::trace_point::TracePoint::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::trace_point::TracePoint::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::trace_point::TracePoint where T: 'static + ?core::marker::Sized
pub fn aya::programs::trace_point::TracePoint::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::trace_point::TracePoint where T: ?core::marker::Sized
pub fn aya::programs::trace_point::TracePoint::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::trace_point::TracePoint where T: ?core::marker::Sized
pub fn aya::programs::trace_point::TracePoint::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::trace_point::TracePoint
pub fn aya::programs::trace_point::TracePoint::from(t: T) -> T
pub struct aya::programs::trace_point::TracePointLink(_)
impl aya::programs::links::Link for aya::programs::trace_point::TracePointLink
pub type aya::programs::trace_point::TracePointLink::Id = aya::programs::trace_point::TracePointLinkId
pub fn aya::programs::trace_point::TracePointLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::trace_point::TracePointLink::id(&self) -> Self::Id
impl core::convert::TryFrom<aya::programs::links::FdLink> for aya::programs::trace_point::TracePointLink
pub type aya::programs::trace_point::TracePointLink::Error = aya::programs::links::LinkError
pub fn aya::programs::trace_point::TracePointLink::try_from(fd_link: aya::programs::links::FdLink) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::programs::trace_point::TracePointLink> for aya::programs::links::FdLink
pub type aya::programs::links::FdLink::Error = aya::programs::links::LinkError
pub fn aya::programs::links::FdLink::try_from(value: aya::programs::trace_point::TracePointLink) -> core::result::Result<Self, Self::Error>
impl core::fmt::Debug for aya::programs::trace_point::TracePointLink
pub fn aya::programs::trace_point::TracePointLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::trace_point::TracePointLink
pub fn aya::programs::trace_point::TracePointLink::drop(&mut self)
impl core::marker::Freeze for aya::programs::trace_point::TracePointLink
impl core::marker::Send for aya::programs::trace_point::TracePointLink
impl core::marker::Sync for aya::programs::trace_point::TracePointLink
impl core::marker::Unpin for aya::programs::trace_point::TracePointLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::trace_point::TracePointLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::trace_point::TracePointLink
impl<T, U> core::convert::Into<U> for aya::programs::trace_point::TracePointLink where U: core::convert::From<T>
pub fn aya::programs::trace_point::TracePointLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::trace_point::TracePointLink where U: core::convert::Into<T>
pub type aya::programs::trace_point::TracePointLink::Error = core::convert::Infallible
pub fn aya::programs::trace_point::TracePointLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::trace_point::TracePointLink where U: core::convert::TryFrom<T>
pub type aya::programs::trace_point::TracePointLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::trace_point::TracePointLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::trace_point::TracePointLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::trace_point::TracePointLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::trace_point::TracePointLink where T: ?core::marker::Sized
pub fn aya::programs::trace_point::TracePointLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::trace_point::TracePointLink where T: ?core::marker::Sized
pub fn aya::programs::trace_point::TracePointLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::trace_point::TracePointLink
pub fn aya::programs::trace_point::TracePointLink::from(t: T) -> T
pub struct aya::programs::trace_point::TracePointLinkId(_)
impl core::cmp::Eq for aya::programs::trace_point::TracePointLinkId
impl core::cmp::PartialEq for aya::programs::trace_point::TracePointLinkId
pub fn aya::programs::trace_point::TracePointLinkId::eq(&self, other: &aya::programs::trace_point::TracePointLinkId) -> bool
impl core::fmt::Debug for aya::programs::trace_point::TracePointLinkId
pub fn aya::programs::trace_point::TracePointLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::trace_point::TracePointLinkId
pub fn aya::programs::trace_point::TracePointLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::trace_point::TracePointLinkId
impl core::marker::Freeze for aya::programs::trace_point::TracePointLinkId
impl core::marker::Send for aya::programs::trace_point::TracePointLinkId
impl core::marker::Sync for aya::programs::trace_point::TracePointLinkId
impl core::marker::Unpin for aya::programs::trace_point::TracePointLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::trace_point::TracePointLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::trace_point::TracePointLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::trace_point::TracePointLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::trace_point::TracePointLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::trace_point::TracePointLinkId where U: core::convert::From<T>
pub fn aya::programs::trace_point::TracePointLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::trace_point::TracePointLinkId where U: core::convert::Into<T>
pub type aya::programs::trace_point::TracePointLinkId::Error = core::convert::Infallible
pub fn aya::programs::trace_point::TracePointLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::trace_point::TracePointLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::trace_point::TracePointLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::trace_point::TracePointLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::trace_point::TracePointLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::trace_point::TracePointLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::trace_point::TracePointLinkId where T: ?core::marker::Sized
pub fn aya::programs::trace_point::TracePointLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::trace_point::TracePointLinkId where T: ?core::marker::Sized
pub fn aya::programs::trace_point::TracePointLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::trace_point::TracePointLinkId
pub fn aya::programs::trace_point::TracePointLinkId::from(t: T) -> T
pub mod aya::programs::uprobe
pub enum aya::programs::uprobe::UProbeError
pub aya::programs::uprobe::UProbeError::FileError
pub aya::programs::uprobe::UProbeError::FileError::filename: std::path::PathBuf
pub aya::programs::uprobe::UProbeError::FileError::io_error: std::io::error::Error
pub aya::programs::uprobe::UProbeError::InvalidLdSoCache
pub aya::programs::uprobe::UProbeError::InvalidLdSoCache::io_error: &'static std::io::error::Error
pub aya::programs::uprobe::UProbeError::InvalidTarget
pub aya::programs::uprobe::UProbeError::InvalidTarget::path: std::path::PathBuf
pub aya::programs::uprobe::UProbeError::SymbolError
pub aya::programs::uprobe::UProbeError::SymbolError::error: alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync)>
pub aya::programs::uprobe::UProbeError::SymbolError::symbol: alloc::string::String
impl core::convert::From<aya::programs::uprobe::UProbeError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya::programs::uprobe::UProbeError) -> Self
impl core::error::Error for aya::programs::uprobe::UProbeError
pub fn aya::programs::uprobe::UProbeError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Debug for aya::programs::uprobe::UProbeError
pub fn aya::programs::uprobe::UProbeError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for aya::programs::uprobe::UProbeError
pub fn aya::programs::uprobe::UProbeError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::uprobe::UProbeError
impl core::marker::Send for aya::programs::uprobe::UProbeError
impl core::marker::Sync for aya::programs::uprobe::UProbeError
impl core::marker::Unpin for aya::programs::uprobe::UProbeError
impl !core::panic::unwind_safe::RefUnwindSafe for aya::programs::uprobe::UProbeError
impl !core::panic::unwind_safe::UnwindSafe for aya::programs::uprobe::UProbeError
impl<T, U> core::convert::Into<U> for aya::programs::uprobe::UProbeError where U: core::convert::From<T>
pub fn aya::programs::uprobe::UProbeError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::uprobe::UProbeError where U: core::convert::Into<T>
pub type aya::programs::uprobe::UProbeError::Error = core::convert::Infallible
pub fn aya::programs::uprobe::UProbeError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::uprobe::UProbeError where U: core::convert::TryFrom<T>
pub type aya::programs::uprobe::UProbeError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::uprobe::UProbeError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for aya::programs::uprobe::UProbeError where T: core::fmt::Display + ?core::marker::Sized
pub fn aya::programs::uprobe::UProbeError::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for aya::programs::uprobe::UProbeError where T: 'static + ?core::marker::Sized
pub fn aya::programs::uprobe::UProbeError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::uprobe::UProbeError where T: ?core::marker::Sized
pub fn aya::programs::uprobe::UProbeError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::uprobe::UProbeError where T: ?core::marker::Sized
pub fn aya::programs::uprobe::UProbeError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::uprobe::UProbeError
pub fn aya::programs::uprobe::UProbeError::from(t: T) -> T
pub struct aya::programs::uprobe::UProbe
impl aya::programs::uprobe::UProbe
pub fn aya::programs::uprobe::UProbe::attach<T: core::convert::AsRef<std::path::Path>>(&mut self, fn_name: core::option::Option<&str>, offset: u64, target: T, pid: core::option::Option<libc::unix::pid_t>) -> core::result::Result<aya::programs::uprobe::UProbeLinkId, aya::programs::ProgramError>
pub fn aya::programs::uprobe::UProbe::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P, kind: aya::programs::ProbeKind) -> core::result::Result<Self, aya::programs::ProgramError>
pub fn aya::programs::uprobe::UProbe::kind(&self) -> aya::programs::ProbeKind
pub fn aya::programs::uprobe::UProbe::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::uprobe::UProbe
pub fn aya::programs::uprobe::UProbe::detach(&mut self, link_id: aya::programs::uprobe::UProbeLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::uprobe::UProbe::take_link(&mut self, link_id: aya::programs::uprobe::UProbeLinkId) -> core::result::Result<aya::programs::uprobe::UProbeLink, aya::programs::ProgramError>
impl aya::programs::uprobe::UProbe
pub fn aya::programs::uprobe::UProbe::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::uprobe::UProbe
pub fn aya::programs::uprobe::UProbe::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::uprobe::UProbe
pub fn aya::programs::uprobe::UProbe::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::uprobe::UProbe::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::uprobe::UProbe
pub fn aya::programs::uprobe::UProbe::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::uprobe::UProbe
pub fn aya::programs::uprobe::UProbe::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::uprobe::UProbe
pub fn aya::programs::uprobe::UProbe::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::uprobe::UProbe
pub type &'a aya::programs::uprobe::UProbe::Error = aya::programs::ProgramError
pub fn &'a aya::programs::uprobe::UProbe::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::uprobe::UProbe, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::uprobe::UProbe
pub type &'a mut aya::programs::uprobe::UProbe::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::uprobe::UProbe::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::uprobe::UProbe, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::uprobe::UProbe
impl core::marker::Send for aya::programs::uprobe::UProbe
impl core::marker::Sync for aya::programs::uprobe::UProbe
impl core::marker::Unpin for aya::programs::uprobe::UProbe
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::uprobe::UProbe
impl core::panic::unwind_safe::UnwindSafe for aya::programs::uprobe::UProbe
impl<T, U> core::convert::Into<U> for aya::programs::uprobe::UProbe where U: core::convert::From<T>
pub fn aya::programs::uprobe::UProbe::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::uprobe::UProbe where U: core::convert::Into<T>
pub type aya::programs::uprobe::UProbe::Error = core::convert::Infallible
pub fn aya::programs::uprobe::UProbe::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::uprobe::UProbe where U: core::convert::TryFrom<T>
pub type aya::programs::uprobe::UProbe::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::uprobe::UProbe::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::uprobe::UProbe where T: 'static + ?core::marker::Sized
pub fn aya::programs::uprobe::UProbe::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::uprobe::UProbe where T: ?core::marker::Sized
pub fn aya::programs::uprobe::UProbe::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::uprobe::UProbe where T: ?core::marker::Sized
pub fn aya::programs::uprobe::UProbe::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::uprobe::UProbe
pub fn aya::programs::uprobe::UProbe::from(t: T) -> T
pub struct aya::programs::uprobe::UProbeLink(_)
impl aya::programs::links::Link for aya::programs::uprobe::UProbeLink
pub type aya::programs::uprobe::UProbeLink::Id = aya::programs::uprobe::UProbeLinkId
pub fn aya::programs::uprobe::UProbeLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::uprobe::UProbeLink::id(&self) -> Self::Id
impl core::convert::TryFrom<aya::programs::links::FdLink> for aya::programs::uprobe::UProbeLink
pub type aya::programs::uprobe::UProbeLink::Error = aya::programs::links::LinkError
pub fn aya::programs::uprobe::UProbeLink::try_from(fd_link: aya::programs::links::FdLink) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::programs::uprobe::UProbeLink> for aya::programs::links::FdLink
pub type aya::programs::links::FdLink::Error = aya::programs::links::LinkError
pub fn aya::programs::links::FdLink::try_from(value: aya::programs::uprobe::UProbeLink) -> core::result::Result<Self, Self::Error>
impl core::fmt::Debug for aya::programs::uprobe::UProbeLink
pub fn aya::programs::uprobe::UProbeLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::uprobe::UProbeLink
pub fn aya::programs::uprobe::UProbeLink::drop(&mut self)
impl core::marker::Freeze for aya::programs::uprobe::UProbeLink
impl core::marker::Send for aya::programs::uprobe::UProbeLink
impl core::marker::Sync for aya::programs::uprobe::UProbeLink
impl core::marker::Unpin for aya::programs::uprobe::UProbeLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::uprobe::UProbeLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::uprobe::UProbeLink
impl<T, U> core::convert::Into<U> for aya::programs::uprobe::UProbeLink where U: core::convert::From<T>
pub fn aya::programs::uprobe::UProbeLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::uprobe::UProbeLink where U: core::convert::Into<T>
pub type aya::programs::uprobe::UProbeLink::Error = core::convert::Infallible
pub fn aya::programs::uprobe::UProbeLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::uprobe::UProbeLink where U: core::convert::TryFrom<T>
pub type aya::programs::uprobe::UProbeLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::uprobe::UProbeLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::uprobe::UProbeLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::uprobe::UProbeLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::uprobe::UProbeLink where T: ?core::marker::Sized
pub fn aya::programs::uprobe::UProbeLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::uprobe::UProbeLink where T: ?core::marker::Sized
pub fn aya::programs::uprobe::UProbeLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::uprobe::UProbeLink
pub fn aya::programs::uprobe::UProbeLink::from(t: T) -> T
pub struct aya::programs::uprobe::UProbeLinkId(_)
impl core::cmp::Eq for aya::programs::uprobe::UProbeLinkId
impl core::cmp::PartialEq for aya::programs::uprobe::UProbeLinkId
pub fn aya::programs::uprobe::UProbeLinkId::eq(&self, other: &aya::programs::uprobe::UProbeLinkId) -> bool
impl core::fmt::Debug for aya::programs::uprobe::UProbeLinkId
pub fn aya::programs::uprobe::UProbeLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::uprobe::UProbeLinkId
pub fn aya::programs::uprobe::UProbeLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::uprobe::UProbeLinkId
impl core::marker::Freeze for aya::programs::uprobe::UProbeLinkId
impl core::marker::Send for aya::programs::uprobe::UProbeLinkId
impl core::marker::Sync for aya::programs::uprobe::UProbeLinkId
impl core::marker::Unpin for aya::programs::uprobe::UProbeLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::uprobe::UProbeLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::uprobe::UProbeLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::uprobe::UProbeLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::uprobe::UProbeLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::uprobe::UProbeLinkId where U: core::convert::From<T>
pub fn aya::programs::uprobe::UProbeLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::uprobe::UProbeLinkId where U: core::convert::Into<T>
pub type aya::programs::uprobe::UProbeLinkId::Error = core::convert::Infallible
pub fn aya::programs::uprobe::UProbeLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::uprobe::UProbeLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::uprobe::UProbeLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::uprobe::UProbeLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::uprobe::UProbeLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::uprobe::UProbeLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::uprobe::UProbeLinkId where T: ?core::marker::Sized
pub fn aya::programs::uprobe::UProbeLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::uprobe::UProbeLinkId where T: ?core::marker::Sized
pub fn aya::programs::uprobe::UProbeLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::uprobe::UProbeLinkId
pub fn aya::programs::uprobe::UProbeLinkId::from(t: T) -> T
pub mod aya::programs::xdp
pub enum aya::programs::xdp::XdpError
pub aya::programs::xdp::XdpError::NetlinkError
pub aya::programs::xdp::XdpError::NetlinkError::io_error: std::io::error::Error
impl core::convert::From<aya::programs::xdp::XdpError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya::programs::xdp::XdpError) -> Self
impl core::error::Error for aya::programs::xdp::XdpError
pub fn aya::programs::xdp::XdpError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Debug for aya::programs::xdp::XdpError
pub fn aya::programs::xdp::XdpError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for aya::programs::xdp::XdpError
pub fn aya::programs::xdp::XdpError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::xdp::XdpError
impl core::marker::Send for aya::programs::xdp::XdpError
impl core::marker::Sync for aya::programs::xdp::XdpError
impl core::marker::Unpin for aya::programs::xdp::XdpError
impl !core::panic::unwind_safe::RefUnwindSafe for aya::programs::xdp::XdpError
impl !core::panic::unwind_safe::UnwindSafe for aya::programs::xdp::XdpError
impl<T, U> core::convert::Into<U> for aya::programs::xdp::XdpError where U: core::convert::From<T>
pub fn aya::programs::xdp::XdpError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::xdp::XdpError where U: core::convert::Into<T>
pub type aya::programs::xdp::XdpError::Error = core::convert::Infallible
pub fn aya::programs::xdp::XdpError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::xdp::XdpError where U: core::convert::TryFrom<T>
pub type aya::programs::xdp::XdpError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::xdp::XdpError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for aya::programs::xdp::XdpError where T: core::fmt::Display + ?core::marker::Sized
pub fn aya::programs::xdp::XdpError::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for aya::programs::xdp::XdpError where T: 'static + ?core::marker::Sized
pub fn aya::programs::xdp::XdpError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::xdp::XdpError where T: ?core::marker::Sized
pub fn aya::programs::xdp::XdpError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::xdp::XdpError where T: ?core::marker::Sized
pub fn aya::programs::xdp::XdpError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::xdp::XdpError
pub fn aya::programs::xdp::XdpError::from(t: T) -> T
pub struct aya::programs::xdp::Xdp
impl aya::programs::xdp::Xdp
pub fn aya::programs::xdp::Xdp::attach(&mut self, interface: &str, flags: aya::programs::xdp::XdpFlags) -> core::result::Result<aya::programs::xdp::XdpLinkId, aya::programs::ProgramError>
pub fn aya::programs::xdp::Xdp::attach_to_if_index(&mut self, if_index: u32, flags: aya::programs::xdp::XdpFlags) -> core::result::Result<aya::programs::xdp::XdpLinkId, aya::programs::ProgramError>
pub fn aya::programs::xdp::Xdp::attach_to_link(&mut self, link: aya::programs::xdp::XdpLink) -> core::result::Result<aya::programs::xdp::XdpLinkId, aya::programs::ProgramError>
pub fn aya::programs::xdp::Xdp::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P, attach_type: aya_obj::programs::xdp::XdpAttachType) -> core::result::Result<Self, aya::programs::ProgramError>
pub fn aya::programs::xdp::Xdp::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::xdp::Xdp
pub fn aya::programs::xdp::Xdp::detach(&mut self, link_id: aya::programs::xdp::XdpLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::xdp::Xdp::take_link(&mut self, link_id: aya::programs::xdp::XdpLinkId) -> core::result::Result<aya::programs::xdp::XdpLink, aya::programs::ProgramError>
impl aya::programs::xdp::Xdp
pub fn aya::programs::xdp::Xdp::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::xdp::Xdp
pub fn aya::programs::xdp::Xdp::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::xdp::Xdp
pub fn aya::programs::xdp::Xdp::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::xdp::Xdp::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::xdp::Xdp
pub fn aya::programs::xdp::Xdp::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::xdp::Xdp
pub fn aya::programs::xdp::Xdp::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::xdp::Xdp
pub fn aya::programs::xdp::Xdp::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::xdp::Xdp
pub type &'a aya::programs::xdp::Xdp::Error = aya::programs::ProgramError
pub fn &'a aya::programs::xdp::Xdp::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::xdp::Xdp, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::xdp::Xdp
pub type &'a mut aya::programs::xdp::Xdp::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::xdp::Xdp::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::xdp::Xdp, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::xdp::Xdp
impl core::marker::Send for aya::programs::xdp::Xdp
impl core::marker::Sync for aya::programs::xdp::Xdp
impl core::marker::Unpin for aya::programs::xdp::Xdp
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::xdp::Xdp
impl core::panic::unwind_safe::UnwindSafe for aya::programs::xdp::Xdp
impl<T, U> core::convert::Into<U> for aya::programs::xdp::Xdp where U: core::convert::From<T>
pub fn aya::programs::xdp::Xdp::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::xdp::Xdp where U: core::convert::Into<T>
pub type aya::programs::xdp::Xdp::Error = core::convert::Infallible
pub fn aya::programs::xdp::Xdp::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::xdp::Xdp where U: core::convert::TryFrom<T>
pub type aya::programs::xdp::Xdp::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::xdp::Xdp::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::xdp::Xdp where T: 'static + ?core::marker::Sized
pub fn aya::programs::xdp::Xdp::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::xdp::Xdp where T: ?core::marker::Sized
pub fn aya::programs::xdp::Xdp::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::xdp::Xdp where T: ?core::marker::Sized
pub fn aya::programs::xdp::Xdp::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::xdp::Xdp
pub fn aya::programs::xdp::Xdp::from(t: T) -> T
pub struct aya::programs::xdp::XdpFlags(_)
impl aya::programs::xdp::XdpFlags
pub const aya::programs::xdp::XdpFlags::DRV_MODE: Self
pub const aya::programs::xdp::XdpFlags::HW_MODE: Self
pub const aya::programs::xdp::XdpFlags::REPLACE: Self
pub const aya::programs::xdp::XdpFlags::SKB_MODE: Self
pub const aya::programs::xdp::XdpFlags::UPDATE_IF_NOEXIST: Self
impl aya::programs::xdp::XdpFlags
pub const fn aya::programs::xdp::XdpFlags::all() -> Self
pub const fn aya::programs::xdp::XdpFlags::bits(&self) -> u32
pub const fn aya::programs::xdp::XdpFlags::complement(self) -> Self
pub const fn aya::programs::xdp::XdpFlags::contains(&self, other: Self) -> bool
pub const fn aya::programs::xdp::XdpFlags::difference(self, other: Self) -> Self
pub const fn aya::programs::xdp::XdpFlags::empty() -> Self
pub const fn aya::programs::xdp::XdpFlags::from_bits(bits: u32) -> core::option::Option<Self>
pub const fn aya::programs::xdp::XdpFlags::from_bits_retain(bits: u32) -> Self
pub const fn aya::programs::xdp::XdpFlags::from_bits_truncate(bits: u32) -> Self
pub fn aya::programs::xdp::XdpFlags::from_name(name: &str) -> core::option::Option<Self>
pub fn aya::programs::xdp::XdpFlags::insert(&mut self, other: Self)
pub const fn aya::programs::xdp::XdpFlags::intersection(self, other: Self) -> Self
pub const fn aya::programs::xdp::XdpFlags::intersects(&self, other: Self) -> bool
pub const fn aya::programs::xdp::XdpFlags::is_all(&self) -> bool
pub const fn aya::programs::xdp::XdpFlags::is_empty(&self) -> bool
pub fn aya::programs::xdp::XdpFlags::remove(&mut self, other: Self)
pub fn aya::programs::xdp::XdpFlags::set(&mut self, other: Self, value: bool)
pub const fn aya::programs::xdp::XdpFlags::symmetric_difference(self, other: Self) -> Self
pub fn aya::programs::xdp::XdpFlags::toggle(&mut self, other: Self)
pub const fn aya::programs::xdp::XdpFlags::union(self, other: Self) -> Self
impl aya::programs::xdp::XdpFlags
pub const fn aya::programs::xdp::XdpFlags::iter(&self) -> bitflags::iter::Iter<aya::programs::xdp::XdpFlags>
pub const fn aya::programs::xdp::XdpFlags::iter_names(&self) -> bitflags::iter::IterNames<aya::programs::xdp::XdpFlags>
impl bitflags::traits::Flags for aya::programs::xdp::XdpFlags
pub type aya::programs::xdp::XdpFlags::Bits = u32
pub const aya::programs::xdp::XdpFlags::FLAGS: &'static [bitflags::traits::Flag<aya::programs::xdp::XdpFlags>]
pub fn aya::programs::xdp::XdpFlags::bits(&self) -> u32
pub fn aya::programs::xdp::XdpFlags::from_bits_retain(bits: u32) -> aya::programs::xdp::XdpFlags
impl bitflags::traits::PublicFlags for aya::programs::xdp::XdpFlags
pub type aya::programs::xdp::XdpFlags::Internal = InternalBitFlags
pub type aya::programs::xdp::XdpFlags::Primitive = u32
impl core::clone::Clone for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::clone(&self) -> aya::programs::xdp::XdpFlags
impl core::default::Default for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::default() -> aya::programs::xdp::XdpFlags
impl core::fmt::Binary for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Debug for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::LowerHex for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Octal for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::UpperHex for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::iter::traits::collect::Extend<aya::programs::xdp::XdpFlags> for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::extend<T: core::iter::traits::collect::IntoIterator<Item = Self>>(&mut self, iterator: T)
impl core::iter::traits::collect::FromIterator<aya::programs::xdp::XdpFlags> for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::from_iter<T: core::iter::traits::collect::IntoIterator<Item = Self>>(iterator: T) -> Self
impl core::iter::traits::collect::IntoIterator for aya::programs::xdp::XdpFlags
pub type aya::programs::xdp::XdpFlags::IntoIter = bitflags::iter::Iter<aya::programs::xdp::XdpFlags>
pub type aya::programs::xdp::XdpFlags::Item = aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::into_iter(self) -> Self::IntoIter
impl core::marker::Copy for aya::programs::xdp::XdpFlags
impl core::ops::arith::Sub for aya::programs::xdp::XdpFlags
pub type aya::programs::xdp::XdpFlags::Output = aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::sub(self, other: Self) -> Self
impl core::ops::arith::SubAssign for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::sub_assign(&mut self, other: Self)
impl core::ops::bit::BitAnd for aya::programs::xdp::XdpFlags
pub type aya::programs::xdp::XdpFlags::Output = aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::bitand(self, other: Self) -> Self
impl core::ops::bit::BitAndAssign for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::bitand_assign(&mut self, other: Self)
impl core::ops::bit::BitOr for aya::programs::xdp::XdpFlags
pub type aya::programs::xdp::XdpFlags::Output = aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::bitor(self, other: aya::programs::xdp::XdpFlags) -> Self
impl core::ops::bit::BitOrAssign for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::bitor_assign(&mut self, other: Self)
impl core::ops::bit::BitXor for aya::programs::xdp::XdpFlags
pub type aya::programs::xdp::XdpFlags::Output = aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::bitxor(self, other: Self) -> Self
impl core::ops::bit::BitXorAssign for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::bitxor_assign(&mut self, other: Self)
impl core::ops::bit::Not for aya::programs::xdp::XdpFlags
pub type aya::programs::xdp::XdpFlags::Output = aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::not(self) -> Self
impl core::marker::Freeze for aya::programs::xdp::XdpFlags
impl core::marker::Send for aya::programs::xdp::XdpFlags
impl core::marker::Sync for aya::programs::xdp::XdpFlags
impl core::marker::Unpin for aya::programs::xdp::XdpFlags
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::xdp::XdpFlags
impl core::panic::unwind_safe::UnwindSafe for aya::programs::xdp::XdpFlags
impl<T, U> core::convert::Into<U> for aya::programs::xdp::XdpFlags where U: core::convert::From<T>
pub fn aya::programs::xdp::XdpFlags::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::xdp::XdpFlags where U: core::convert::Into<T>
pub type aya::programs::xdp::XdpFlags::Error = core::convert::Infallible
pub fn aya::programs::xdp::XdpFlags::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::xdp::XdpFlags where U: core::convert::TryFrom<T>
pub type aya::programs::xdp::XdpFlags::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::xdp::XdpFlags::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for aya::programs::xdp::XdpFlags where T: core::clone::Clone
pub type aya::programs::xdp::XdpFlags::Owned = T
pub fn aya::programs::xdp::XdpFlags::clone_into(&self, target: &mut T)
pub fn aya::programs::xdp::XdpFlags::to_owned(&self) -> T
impl<T> core::any::Any for aya::programs::xdp::XdpFlags where T: 'static + ?core::marker::Sized
pub fn aya::programs::xdp::XdpFlags::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::xdp::XdpFlags where T: ?core::marker::Sized
pub fn aya::programs::xdp::XdpFlags::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::xdp::XdpFlags where T: ?core::marker::Sized
pub fn aya::programs::xdp::XdpFlags::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for aya::programs::xdp::XdpFlags where T: core::clone::Clone
pub unsafe fn aya::programs::xdp::XdpFlags::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::from(t: T) -> T
pub struct aya::programs::xdp::XdpLink(_)
impl aya::programs::links::Link for aya::programs::xdp::XdpLink
pub type aya::programs::xdp::XdpLink::Id = aya::programs::xdp::XdpLinkId
pub fn aya::programs::xdp::XdpLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::xdp::XdpLink::id(&self) -> Self::Id
impl core::convert::TryFrom<aya::programs::links::FdLink> for aya::programs::xdp::XdpLink
pub type aya::programs::xdp::XdpLink::Error = aya::programs::links::LinkError
pub fn aya::programs::xdp::XdpLink::try_from(fd_link: aya::programs::links::FdLink) -> core::result::Result<Self, Self::Error>
impl core::convert::TryFrom<aya::programs::xdp::XdpLink> for aya::programs::links::FdLink
pub type aya::programs::links::FdLink::Error = aya::programs::links::LinkError
pub fn aya::programs::links::FdLink::try_from(value: aya::programs::xdp::XdpLink) -> core::result::Result<Self, Self::Error>
impl core::fmt::Debug for aya::programs::xdp::XdpLink
pub fn aya::programs::xdp::XdpLink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::xdp::XdpLink
pub fn aya::programs::xdp::XdpLink::drop(&mut self)
impl core::marker::Freeze for aya::programs::xdp::XdpLink
impl core::marker::Send for aya::programs::xdp::XdpLink
impl core::marker::Sync for aya::programs::xdp::XdpLink
impl core::marker::Unpin for aya::programs::xdp::XdpLink
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::xdp::XdpLink
impl core::panic::unwind_safe::UnwindSafe for aya::programs::xdp::XdpLink
impl<T, U> core::convert::Into<U> for aya::programs::xdp::XdpLink where U: core::convert::From<T>
pub fn aya::programs::xdp::XdpLink::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::xdp::XdpLink where U: core::convert::Into<T>
pub type aya::programs::xdp::XdpLink::Error = core::convert::Infallible
pub fn aya::programs::xdp::XdpLink::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::xdp::XdpLink where U: core::convert::TryFrom<T>
pub type aya::programs::xdp::XdpLink::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::xdp::XdpLink::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::xdp::XdpLink where T: 'static + ?core::marker::Sized
pub fn aya::programs::xdp::XdpLink::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::xdp::XdpLink where T: ?core::marker::Sized
pub fn aya::programs::xdp::XdpLink::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::xdp::XdpLink where T: ?core::marker::Sized
pub fn aya::programs::xdp::XdpLink::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::xdp::XdpLink
pub fn aya::programs::xdp::XdpLink::from(t: T) -> T
pub struct aya::programs::xdp::XdpLinkId(_)
impl core::cmp::Eq for aya::programs::xdp::XdpLinkId
impl core::cmp::PartialEq for aya::programs::xdp::XdpLinkId
pub fn aya::programs::xdp::XdpLinkId::eq(&self, other: &aya::programs::xdp::XdpLinkId) -> bool
impl core::fmt::Debug for aya::programs::xdp::XdpLinkId
pub fn aya::programs::xdp::XdpLinkId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::xdp::XdpLinkId
pub fn aya::programs::xdp::XdpLinkId::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::StructuralPartialEq for aya::programs::xdp::XdpLinkId
impl core::marker::Freeze for aya::programs::xdp::XdpLinkId
impl core::marker::Send for aya::programs::xdp::XdpLinkId
impl core::marker::Sync for aya::programs::xdp::XdpLinkId
impl core::marker::Unpin for aya::programs::xdp::XdpLinkId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::xdp::XdpLinkId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::xdp::XdpLinkId
impl<Q, K> equivalent::Equivalent<K> for aya::programs::xdp::XdpLinkId where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::xdp::XdpLinkId::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::xdp::XdpLinkId where U: core::convert::From<T>
pub fn aya::programs::xdp::XdpLinkId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::xdp::XdpLinkId where U: core::convert::Into<T>
pub type aya::programs::xdp::XdpLinkId::Error = core::convert::Infallible
pub fn aya::programs::xdp::XdpLinkId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::xdp::XdpLinkId where U: core::convert::TryFrom<T>
pub type aya::programs::xdp::XdpLinkId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::xdp::XdpLinkId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::xdp::XdpLinkId where T: 'static + ?core::marker::Sized
pub fn aya::programs::xdp::XdpLinkId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::xdp::XdpLinkId where T: ?core::marker::Sized
pub fn aya::programs::xdp::XdpLinkId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::xdp::XdpLinkId where T: ?core::marker::Sized
pub fn aya::programs::xdp::XdpLinkId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::xdp::XdpLinkId
pub fn aya::programs::xdp::XdpLinkId::from(t: T) -> T
pub enum aya::programs::CgroupAttachMode
pub aya::programs::CgroupAttachMode::AllowMultiple
pub aya::programs::CgroupAttachMode::AllowOverride
pub aya::programs::CgroupAttachMode::Single
impl core::clone::Clone for aya::programs::links::CgroupAttachMode
pub fn aya::programs::links::CgroupAttachMode::clone(&self) -> aya::programs::links::CgroupAttachMode
impl core::convert::From<aya::programs::links::CgroupAttachMode> for u32
pub fn u32::from(mode: aya::programs::links::CgroupAttachMode) -> Self
impl core::default::Default for aya::programs::links::CgroupAttachMode
pub fn aya::programs::links::CgroupAttachMode::default() -> aya::programs::links::CgroupAttachMode
impl core::fmt::Debug for aya::programs::links::CgroupAttachMode
pub fn aya::programs::links::CgroupAttachMode::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for aya::programs::links::CgroupAttachMode
impl core::marker::Freeze for aya::programs::links::CgroupAttachMode
impl core::marker::Send for aya::programs::links::CgroupAttachMode
impl core::marker::Sync for aya::programs::links::CgroupAttachMode
impl core::marker::Unpin for aya::programs::links::CgroupAttachMode
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::links::CgroupAttachMode
impl core::panic::unwind_safe::UnwindSafe for aya::programs::links::CgroupAttachMode
impl<T, U> core::convert::Into<U> for aya::programs::links::CgroupAttachMode where U: core::convert::From<T>
pub fn aya::programs::links::CgroupAttachMode::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::links::CgroupAttachMode where U: core::convert::Into<T>
pub type aya::programs::links::CgroupAttachMode::Error = core::convert::Infallible
pub fn aya::programs::links::CgroupAttachMode::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::links::CgroupAttachMode where U: core::convert::TryFrom<T>
pub type aya::programs::links::CgroupAttachMode::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::links::CgroupAttachMode::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for aya::programs::links::CgroupAttachMode where T: core::clone::Clone
pub type aya::programs::links::CgroupAttachMode::Owned = T
pub fn aya::programs::links::CgroupAttachMode::clone_into(&self, target: &mut T)
pub fn aya::programs::links::CgroupAttachMode::to_owned(&self) -> T
impl<T> core::any::Any for aya::programs::links::CgroupAttachMode where T: 'static + ?core::marker::Sized
pub fn aya::programs::links::CgroupAttachMode::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::links::CgroupAttachMode where T: ?core::marker::Sized
pub fn aya::programs::links::CgroupAttachMode::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::links::CgroupAttachMode where T: ?core::marker::Sized
pub fn aya::programs::links::CgroupAttachMode::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for aya::programs::links::CgroupAttachMode where T: core::clone::Clone
pub unsafe fn aya::programs::links::CgroupAttachMode::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for aya::programs::links::CgroupAttachMode
pub fn aya::programs::links::CgroupAttachMode::from(t: T) -> T
pub enum aya::programs::CgroupSkbAttachType
pub aya::programs::CgroupSkbAttachType::Egress
pub aya::programs::CgroupSkbAttachType::Ingress
impl core::clone::Clone for aya::programs::cgroup_skb::CgroupSkbAttachType
pub fn aya::programs::cgroup_skb::CgroupSkbAttachType::clone(&self) -> aya::programs::cgroup_skb::CgroupSkbAttachType
impl core::fmt::Debug for aya::programs::cgroup_skb::CgroupSkbAttachType
pub fn aya::programs::cgroup_skb::CgroupSkbAttachType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for aya::programs::cgroup_skb::CgroupSkbAttachType
impl core::marker::Freeze for aya::programs::cgroup_skb::CgroupSkbAttachType
impl core::marker::Send for aya::programs::cgroup_skb::CgroupSkbAttachType
impl core::marker::Sync for aya::programs::cgroup_skb::CgroupSkbAttachType
impl core::marker::Unpin for aya::programs::cgroup_skb::CgroupSkbAttachType
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_skb::CgroupSkbAttachType
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_skb::CgroupSkbAttachType
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_skb::CgroupSkbAttachType where U: core::convert::From<T>
pub fn aya::programs::cgroup_skb::CgroupSkbAttachType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_skb::CgroupSkbAttachType where U: core::convert::Into<T>
pub type aya::programs::cgroup_skb::CgroupSkbAttachType::Error = core::convert::Infallible
pub fn aya::programs::cgroup_skb::CgroupSkbAttachType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_skb::CgroupSkbAttachType where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_skb::CgroupSkbAttachType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_skb::CgroupSkbAttachType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for aya::programs::cgroup_skb::CgroupSkbAttachType where T: core::clone::Clone
pub type aya::programs::cgroup_skb::CgroupSkbAttachType::Owned = T
pub fn aya::programs::cgroup_skb::CgroupSkbAttachType::clone_into(&self, target: &mut T)
pub fn aya::programs::cgroup_skb::CgroupSkbAttachType::to_owned(&self) -> T
impl<T> core::any::Any for aya::programs::cgroup_skb::CgroupSkbAttachType where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_skb::CgroupSkbAttachType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_skb::CgroupSkbAttachType where T: ?core::marker::Sized
pub fn aya::programs::cgroup_skb::CgroupSkbAttachType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_skb::CgroupSkbAttachType where T: ?core::marker::Sized
pub fn aya::programs::cgroup_skb::CgroupSkbAttachType::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for aya::programs::cgroup_skb::CgroupSkbAttachType where T: core::clone::Clone
pub unsafe fn aya::programs::cgroup_skb::CgroupSkbAttachType::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for aya::programs::cgroup_skb::CgroupSkbAttachType
pub fn aya::programs::cgroup_skb::CgroupSkbAttachType::from(t: T) -> T
pub enum aya::programs::ExtensionError
pub aya::programs::ExtensionError::NoBTF
impl core::convert::From<aya::programs::extension::ExtensionError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya::programs::extension::ExtensionError) -> Self
impl core::error::Error for aya::programs::extension::ExtensionError
impl core::fmt::Debug for aya::programs::extension::ExtensionError
pub fn aya::programs::extension::ExtensionError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for aya::programs::extension::ExtensionError
pub fn aya::programs::extension::ExtensionError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::extension::ExtensionError
impl core::marker::Send for aya::programs::extension::ExtensionError
impl core::marker::Sync for aya::programs::extension::ExtensionError
impl core::marker::Unpin for aya::programs::extension::ExtensionError
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::extension::ExtensionError
impl core::panic::unwind_safe::UnwindSafe for aya::programs::extension::ExtensionError
impl<T, U> core::convert::Into<U> for aya::programs::extension::ExtensionError where U: core::convert::From<T>
pub fn aya::programs::extension::ExtensionError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::extension::ExtensionError where U: core::convert::Into<T>
pub type aya::programs::extension::ExtensionError::Error = core::convert::Infallible
pub fn aya::programs::extension::ExtensionError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::extension::ExtensionError where U: core::convert::TryFrom<T>
pub type aya::programs::extension::ExtensionError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::extension::ExtensionError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for aya::programs::extension::ExtensionError where T: core::fmt::Display + ?core::marker::Sized
pub fn aya::programs::extension::ExtensionError::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for aya::programs::extension::ExtensionError where T: 'static + ?core::marker::Sized
pub fn aya::programs::extension::ExtensionError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::extension::ExtensionError where T: ?core::marker::Sized
pub fn aya::programs::extension::ExtensionError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::extension::ExtensionError where T: ?core::marker::Sized
pub fn aya::programs::extension::ExtensionError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::extension::ExtensionError
pub fn aya::programs::extension::ExtensionError::from(t: T) -> T
pub enum aya::programs::KProbeError
pub aya::programs::KProbeError::FileError
pub aya::programs::KProbeError::FileError::filename: std::path::PathBuf
pub aya::programs::KProbeError::FileError::io_error: std::io::error::Error
impl core::convert::From<aya::programs::kprobe::KProbeError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya::programs::kprobe::KProbeError) -> Self
impl core::error::Error for aya::programs::kprobe::KProbeError
pub fn aya::programs::kprobe::KProbeError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Debug for aya::programs::kprobe::KProbeError
pub fn aya::programs::kprobe::KProbeError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for aya::programs::kprobe::KProbeError
pub fn aya::programs::kprobe::KProbeError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::kprobe::KProbeError
impl core::marker::Send for aya::programs::kprobe::KProbeError
impl core::marker::Sync for aya::programs::kprobe::KProbeError
impl core::marker::Unpin for aya::programs::kprobe::KProbeError
impl !core::panic::unwind_safe::RefUnwindSafe for aya::programs::kprobe::KProbeError
impl !core::panic::unwind_safe::UnwindSafe for aya::programs::kprobe::KProbeError
impl<T, U> core::convert::Into<U> for aya::programs::kprobe::KProbeError where U: core::convert::From<T>
pub fn aya::programs::kprobe::KProbeError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::kprobe::KProbeError where U: core::convert::Into<T>
pub type aya::programs::kprobe::KProbeError::Error = core::convert::Infallible
pub fn aya::programs::kprobe::KProbeError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::kprobe::KProbeError where U: core::convert::TryFrom<T>
pub type aya::programs::kprobe::KProbeError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::kprobe::KProbeError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for aya::programs::kprobe::KProbeError where T: core::fmt::Display + ?core::marker::Sized
pub fn aya::programs::kprobe::KProbeError::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for aya::programs::kprobe::KProbeError where T: 'static + ?core::marker::Sized
pub fn aya::programs::kprobe::KProbeError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::kprobe::KProbeError where T: ?core::marker::Sized
pub fn aya::programs::kprobe::KProbeError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::kprobe::KProbeError where T: ?core::marker::Sized
pub fn aya::programs::kprobe::KProbeError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::kprobe::KProbeError
pub fn aya::programs::kprobe::KProbeError::from(t: T) -> T
pub enum aya::programs::PerfEventScope
pub aya::programs::PerfEventScope::AllProcessesOneCpu
pub aya::programs::PerfEventScope::AllProcessesOneCpu::cpu: u32
pub aya::programs::PerfEventScope::CallingProcessAnyCpu
pub aya::programs::PerfEventScope::CallingProcessOneCpu
pub aya::programs::PerfEventScope::CallingProcessOneCpu::cpu: u32
pub aya::programs::PerfEventScope::OneProcessAnyCpu
pub aya::programs::PerfEventScope::OneProcessAnyCpu::pid: u32
pub aya::programs::PerfEventScope::OneProcessOneCpu
pub aya::programs::PerfEventScope::OneProcessOneCpu::cpu: u32
pub aya::programs::PerfEventScope::OneProcessOneCpu::pid: u32
impl core::clone::Clone for aya::programs::perf_event::PerfEventScope
pub fn aya::programs::perf_event::PerfEventScope::clone(&self) -> aya::programs::perf_event::PerfEventScope
impl core::fmt::Debug for aya::programs::perf_event::PerfEventScope
pub fn aya::programs::perf_event::PerfEventScope::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::perf_event::PerfEventScope
impl core::marker::Send for aya::programs::perf_event::PerfEventScope
impl core::marker::Sync for aya::programs::perf_event::PerfEventScope
impl core::marker::Unpin for aya::programs::perf_event::PerfEventScope
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::perf_event::PerfEventScope
impl core::panic::unwind_safe::UnwindSafe for aya::programs::perf_event::PerfEventScope
impl<T, U> core::convert::Into<U> for aya::programs::perf_event::PerfEventScope where U: core::convert::From<T>
pub fn aya::programs::perf_event::PerfEventScope::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::perf_event::PerfEventScope where U: core::convert::Into<T>
pub type aya::programs::perf_event::PerfEventScope::Error = core::convert::Infallible
pub fn aya::programs::perf_event::PerfEventScope::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::perf_event::PerfEventScope where U: core::convert::TryFrom<T>
pub type aya::programs::perf_event::PerfEventScope::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::perf_event::PerfEventScope::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for aya::programs::perf_event::PerfEventScope where T: core::clone::Clone
pub type aya::programs::perf_event::PerfEventScope::Owned = T
pub fn aya::programs::perf_event::PerfEventScope::clone_into(&self, target: &mut T)
pub fn aya::programs::perf_event::PerfEventScope::to_owned(&self) -> T
impl<T> core::any::Any for aya::programs::perf_event::PerfEventScope where T: 'static + ?core::marker::Sized
pub fn aya::programs::perf_event::PerfEventScope::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::perf_event::PerfEventScope where T: ?core::marker::Sized
pub fn aya::programs::perf_event::PerfEventScope::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::perf_event::PerfEventScope where T: ?core::marker::Sized
pub fn aya::programs::perf_event::PerfEventScope::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for aya::programs::perf_event::PerfEventScope where T: core::clone::Clone
pub unsafe fn aya::programs::perf_event::PerfEventScope::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for aya::programs::perf_event::PerfEventScope
pub fn aya::programs::perf_event::PerfEventScope::from(t: T) -> T
#[repr(u32)] pub enum aya::programs::PerfTypeId
pub aya::programs::PerfTypeId::Breakpoint = 5
pub aya::programs::PerfTypeId::Hardware = 0
pub aya::programs::PerfTypeId::HwCache = 3
pub aya::programs::PerfTypeId::Raw = 4
pub aya::programs::PerfTypeId::Software = 1
pub aya::programs::PerfTypeId::TracePoint = 2
impl core::clone::Clone for aya::programs::perf_event::PerfTypeId
pub fn aya::programs::perf_event::PerfTypeId::clone(&self) -> aya::programs::perf_event::PerfTypeId
impl core::fmt::Debug for aya::programs::perf_event::PerfTypeId
pub fn aya::programs::perf_event::PerfTypeId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::perf_event::PerfTypeId
impl core::marker::Send for aya::programs::perf_event::PerfTypeId
impl core::marker::Sync for aya::programs::perf_event::PerfTypeId
impl core::marker::Unpin for aya::programs::perf_event::PerfTypeId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::perf_event::PerfTypeId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::perf_event::PerfTypeId
impl<T, U> core::convert::Into<U> for aya::programs::perf_event::PerfTypeId where U: core::convert::From<T>
pub fn aya::programs::perf_event::PerfTypeId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::perf_event::PerfTypeId where U: core::convert::Into<T>
pub type aya::programs::perf_event::PerfTypeId::Error = core::convert::Infallible
pub fn aya::programs::perf_event::PerfTypeId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::perf_event::PerfTypeId where U: core::convert::TryFrom<T>
pub type aya::programs::perf_event::PerfTypeId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::perf_event::PerfTypeId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for aya::programs::perf_event::PerfTypeId where T: core::clone::Clone
pub type aya::programs::perf_event::PerfTypeId::Owned = T
pub fn aya::programs::perf_event::PerfTypeId::clone_into(&self, target: &mut T)
pub fn aya::programs::perf_event::PerfTypeId::to_owned(&self) -> T
impl<T> core::any::Any for aya::programs::perf_event::PerfTypeId where T: 'static + ?core::marker::Sized
pub fn aya::programs::perf_event::PerfTypeId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::perf_event::PerfTypeId where T: ?core::marker::Sized
pub fn aya::programs::perf_event::PerfTypeId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::perf_event::PerfTypeId where T: ?core::marker::Sized
pub fn aya::programs::perf_event::PerfTypeId::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for aya::programs::perf_event::PerfTypeId where T: core::clone::Clone
pub unsafe fn aya::programs::perf_event::PerfTypeId::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for aya::programs::perf_event::PerfTypeId
pub fn aya::programs::perf_event::PerfTypeId::from(t: T) -> T
pub enum aya::programs::ProbeKind
pub aya::programs::ProbeKind::KProbe
pub aya::programs::ProbeKind::KRetProbe
pub aya::programs::ProbeKind::UProbe
pub aya::programs::ProbeKind::URetProbe
impl core::clone::Clone for aya::programs::ProbeKind
pub fn aya::programs::ProbeKind::clone(&self) -> aya::programs::ProbeKind
impl core::fmt::Debug for aya::programs::ProbeKind
pub fn aya::programs::ProbeKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for aya::programs::ProbeKind
impl core::marker::Freeze for aya::programs::ProbeKind
impl core::marker::Send for aya::programs::ProbeKind
impl core::marker::Sync for aya::programs::ProbeKind
impl core::marker::Unpin for aya::programs::ProbeKind
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::ProbeKind
impl core::panic::unwind_safe::UnwindSafe for aya::programs::ProbeKind
impl<T, U> core::convert::Into<U> for aya::programs::ProbeKind where U: core::convert::From<T>
pub fn aya::programs::ProbeKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::ProbeKind where U: core::convert::Into<T>
pub type aya::programs::ProbeKind::Error = core::convert::Infallible
pub fn aya::programs::ProbeKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::ProbeKind where U: core::convert::TryFrom<T>
pub type aya::programs::ProbeKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::ProbeKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for aya::programs::ProbeKind where T: core::clone::Clone
pub type aya::programs::ProbeKind::Owned = T
pub fn aya::programs::ProbeKind::clone_into(&self, target: &mut T)
pub fn aya::programs::ProbeKind::to_owned(&self) -> T
impl<T> core::any::Any for aya::programs::ProbeKind where T: 'static + ?core::marker::Sized
pub fn aya::programs::ProbeKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::ProbeKind where T: ?core::marker::Sized
pub fn aya::programs::ProbeKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::ProbeKind where T: ?core::marker::Sized
pub fn aya::programs::ProbeKind::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for aya::programs::ProbeKind where T: core::clone::Clone
pub unsafe fn aya::programs::ProbeKind::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for aya::programs::ProbeKind
pub fn aya::programs::ProbeKind::from(t: T) -> T
pub enum aya::programs::Program
pub aya::programs::Program::BtfTracePoint(aya::programs::tp_btf::BtfTracePoint)
pub aya::programs::Program::CgroupDevice(aya::programs::cgroup_device::CgroupDevice)
pub aya::programs::Program::CgroupSkb(aya::programs::cgroup_skb::CgroupSkb)
pub aya::programs::Program::CgroupSock(aya::programs::cgroup_sock::CgroupSock)
pub aya::programs::Program::CgroupSockAddr(aya::programs::cgroup_sock_addr::CgroupSockAddr)
pub aya::programs::Program::CgroupSockopt(aya::programs::cgroup_sockopt::CgroupSockopt)
pub aya::programs::Program::CgroupSysctl(aya::programs::cgroup_sysctl::CgroupSysctl)
pub aya::programs::Program::Extension(aya::programs::extension::Extension)
pub aya::programs::Program::FEntry(aya::programs::fentry::FEntry)
pub aya::programs::Program::FExit(aya::programs::fexit::FExit)
pub aya::programs::Program::Iter(aya::programs::iter::Iter)
pub aya::programs::Program::KProbe(aya::programs::kprobe::KProbe)
pub aya::programs::Program::LircMode2(aya::programs::lirc_mode2::LircMode2)
pub aya::programs::Program::Lsm(aya::programs::lsm::Lsm)
pub aya::programs::Program::PerfEvent(aya::programs::perf_event::PerfEvent)
pub aya::programs::Program::RawTracePoint(aya::programs::raw_trace_point::RawTracePoint)
pub aya::programs::Program::SchedClassifier(aya::programs::tc::SchedClassifier)
pub aya::programs::Program::SkLookup(aya::programs::sk_lookup::SkLookup)
pub aya::programs::Program::SkMsg(aya::programs::sk_msg::SkMsg)
pub aya::programs::Program::SkSkb(aya::programs::sk_skb::SkSkb)
pub aya::programs::Program::SockOps(aya::programs::sock_ops::SockOps)
pub aya::programs::Program::SocketFilter(aya::programs::socket_filter::SocketFilter)
pub aya::programs::Program::TracePoint(aya::programs::trace_point::TracePoint)
pub aya::programs::Program::UProbe(aya::programs::uprobe::UProbe)
pub aya::programs::Program::Xdp(aya::programs::xdp::Xdp)
impl aya::programs::Program
pub fn aya::programs::Program::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
pub fn aya::programs::Program::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
pub fn aya::programs::Program::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::Program::prog_type(&self) -> aya::programs::ProgramType
pub fn aya::programs::Program::unload(self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::Program
pub fn aya::programs::Program::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::cgroup_device::CgroupDevice
pub type &'a aya::programs::cgroup_device::CgroupDevice::Error = aya::programs::ProgramError
pub fn &'a aya::programs::cgroup_device::CgroupDevice::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::cgroup_device::CgroupDevice, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::cgroup_skb::CgroupSkb
pub type &'a aya::programs::cgroup_skb::CgroupSkb::Error = aya::programs::ProgramError
pub fn &'a aya::programs::cgroup_skb::CgroupSkb::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::cgroup_skb::CgroupSkb, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::cgroup_sock::CgroupSock
pub type &'a aya::programs::cgroup_sock::CgroupSock::Error = aya::programs::ProgramError
pub fn &'a aya::programs::cgroup_sock::CgroupSock::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::cgroup_sock::CgroupSock, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::cgroup_sock_addr::CgroupSockAddr
pub type &'a aya::programs::cgroup_sock_addr::CgroupSockAddr::Error = aya::programs::ProgramError
pub fn &'a aya::programs::cgroup_sock_addr::CgroupSockAddr::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::cgroup_sock_addr::CgroupSockAddr, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::cgroup_sockopt::CgroupSockopt
pub type &'a aya::programs::cgroup_sockopt::CgroupSockopt::Error = aya::programs::ProgramError
pub fn &'a aya::programs::cgroup_sockopt::CgroupSockopt::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::cgroup_sockopt::CgroupSockopt, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::cgroup_sysctl::CgroupSysctl
pub type &'a aya::programs::cgroup_sysctl::CgroupSysctl::Error = aya::programs::ProgramError
pub fn &'a aya::programs::cgroup_sysctl::CgroupSysctl::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::cgroup_sysctl::CgroupSysctl, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::extension::Extension
pub type &'a aya::programs::extension::Extension::Error = aya::programs::ProgramError
pub fn &'a aya::programs::extension::Extension::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::extension::Extension, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::fentry::FEntry
pub type &'a aya::programs::fentry::FEntry::Error = aya::programs::ProgramError
pub fn &'a aya::programs::fentry::FEntry::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::fentry::FEntry, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::fexit::FExit
pub type &'a aya::programs::fexit::FExit::Error = aya::programs::ProgramError
pub fn &'a aya::programs::fexit::FExit::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::fexit::FExit, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::iter::Iter
pub type &'a aya::programs::iter::Iter::Error = aya::programs::ProgramError
pub fn &'a aya::programs::iter::Iter::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::iter::Iter, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::kprobe::KProbe
pub type &'a aya::programs::kprobe::KProbe::Error = aya::programs::ProgramError
pub fn &'a aya::programs::kprobe::KProbe::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::kprobe::KProbe, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::lirc_mode2::LircMode2
pub type &'a aya::programs::lirc_mode2::LircMode2::Error = aya::programs::ProgramError
pub fn &'a aya::programs::lirc_mode2::LircMode2::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::lirc_mode2::LircMode2, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::lsm::Lsm
pub type &'a aya::programs::lsm::Lsm::Error = aya::programs::ProgramError
pub fn &'a aya::programs::lsm::Lsm::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::lsm::Lsm, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::perf_event::PerfEvent
pub type &'a aya::programs::perf_event::PerfEvent::Error = aya::programs::ProgramError
pub fn &'a aya::programs::perf_event::PerfEvent::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::perf_event::PerfEvent, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::raw_trace_point::RawTracePoint
pub type &'a aya::programs::raw_trace_point::RawTracePoint::Error = aya::programs::ProgramError
pub fn &'a aya::programs::raw_trace_point::RawTracePoint::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::raw_trace_point::RawTracePoint, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::sk_lookup::SkLookup
pub type &'a aya::programs::sk_lookup::SkLookup::Error = aya::programs::ProgramError
pub fn &'a aya::programs::sk_lookup::SkLookup::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::sk_lookup::SkLookup, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::sk_msg::SkMsg
pub type &'a aya::programs::sk_msg::SkMsg::Error = aya::programs::ProgramError
pub fn &'a aya::programs::sk_msg::SkMsg::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::sk_msg::SkMsg, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::sk_skb::SkSkb
pub type &'a aya::programs::sk_skb::SkSkb::Error = aya::programs::ProgramError
pub fn &'a aya::programs::sk_skb::SkSkb::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::sk_skb::SkSkb, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::sock_ops::SockOps
pub type &'a aya::programs::sock_ops::SockOps::Error = aya::programs::ProgramError
pub fn &'a aya::programs::sock_ops::SockOps::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::sock_ops::SockOps, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::socket_filter::SocketFilter
pub type &'a aya::programs::socket_filter::SocketFilter::Error = aya::programs::ProgramError
pub fn &'a aya::programs::socket_filter::SocketFilter::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::socket_filter::SocketFilter, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::tc::SchedClassifier
pub type &'a aya::programs::tc::SchedClassifier::Error = aya::programs::ProgramError
pub fn &'a aya::programs::tc::SchedClassifier::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::tc::SchedClassifier, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::tp_btf::BtfTracePoint
pub type &'a aya::programs::tp_btf::BtfTracePoint::Error = aya::programs::ProgramError
pub fn &'a aya::programs::tp_btf::BtfTracePoint::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::tp_btf::BtfTracePoint, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::trace_point::TracePoint
pub type &'a aya::programs::trace_point::TracePoint::Error = aya::programs::ProgramError
pub fn &'a aya::programs::trace_point::TracePoint::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::trace_point::TracePoint, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::uprobe::UProbe
pub type &'a aya::programs::uprobe::UProbe::Error = aya::programs::ProgramError
pub fn &'a aya::programs::uprobe::UProbe::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::uprobe::UProbe, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::xdp::Xdp
pub type &'a aya::programs::xdp::Xdp::Error = aya::programs::ProgramError
pub fn &'a aya::programs::xdp::Xdp::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::xdp::Xdp, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::cgroup_device::CgroupDevice
pub type &'a mut aya::programs::cgroup_device::CgroupDevice::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::cgroup_device::CgroupDevice::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::cgroup_device::CgroupDevice, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::cgroup_skb::CgroupSkb
pub type &'a mut aya::programs::cgroup_skb::CgroupSkb::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::cgroup_skb::CgroupSkb::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::cgroup_skb::CgroupSkb, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::cgroup_sock::CgroupSock
pub type &'a mut aya::programs::cgroup_sock::CgroupSock::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::cgroup_sock::CgroupSock::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::cgroup_sock::CgroupSock, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::cgroup_sock_addr::CgroupSockAddr
pub type &'a mut aya::programs::cgroup_sock_addr::CgroupSockAddr::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::cgroup_sock_addr::CgroupSockAddr::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::cgroup_sock_addr::CgroupSockAddr, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::cgroup_sockopt::CgroupSockopt
pub type &'a mut aya::programs::cgroup_sockopt::CgroupSockopt::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::cgroup_sockopt::CgroupSockopt::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::cgroup_sockopt::CgroupSockopt, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::cgroup_sysctl::CgroupSysctl
pub type &'a mut aya::programs::cgroup_sysctl::CgroupSysctl::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::cgroup_sysctl::CgroupSysctl::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::cgroup_sysctl::CgroupSysctl, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::extension::Extension
pub type &'a mut aya::programs::extension::Extension::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::extension::Extension::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::extension::Extension, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::fentry::FEntry
pub type &'a mut aya::programs::fentry::FEntry::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::fentry::FEntry::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::fentry::FEntry, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::fexit::FExit
pub type &'a mut aya::programs::fexit::FExit::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::fexit::FExit::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::fexit::FExit, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::iter::Iter
pub type &'a mut aya::programs::iter::Iter::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::iter::Iter::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::iter::Iter, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::kprobe::KProbe
pub type &'a mut aya::programs::kprobe::KProbe::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::kprobe::KProbe::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::kprobe::KProbe, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::lirc_mode2::LircMode2
pub type &'a mut aya::programs::lirc_mode2::LircMode2::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::lirc_mode2::LircMode2::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::lirc_mode2::LircMode2, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::lsm::Lsm
pub type &'a mut aya::programs::lsm::Lsm::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::lsm::Lsm::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::lsm::Lsm, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::perf_event::PerfEvent
pub type &'a mut aya::programs::perf_event::PerfEvent::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::perf_event::PerfEvent::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::perf_event::PerfEvent, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::raw_trace_point::RawTracePoint
pub type &'a mut aya::programs::raw_trace_point::RawTracePoint::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::raw_trace_point::RawTracePoint::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::raw_trace_point::RawTracePoint, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::sk_lookup::SkLookup
pub type &'a mut aya::programs::sk_lookup::SkLookup::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::sk_lookup::SkLookup::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::sk_lookup::SkLookup, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::sk_msg::SkMsg
pub type &'a mut aya::programs::sk_msg::SkMsg::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::sk_msg::SkMsg::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::sk_msg::SkMsg, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::sk_skb::SkSkb
pub type &'a mut aya::programs::sk_skb::SkSkb::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::sk_skb::SkSkb::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::sk_skb::SkSkb, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::sock_ops::SockOps
pub type &'a mut aya::programs::sock_ops::SockOps::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::sock_ops::SockOps::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::sock_ops::SockOps, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::socket_filter::SocketFilter
pub type &'a mut aya::programs::socket_filter::SocketFilter::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::socket_filter::SocketFilter::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::socket_filter::SocketFilter, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::tc::SchedClassifier
pub type &'a mut aya::programs::tc::SchedClassifier::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::tc::SchedClassifier::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::tc::SchedClassifier, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::tp_btf::BtfTracePoint
pub type &'a mut aya::programs::tp_btf::BtfTracePoint::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::tp_btf::BtfTracePoint::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::tp_btf::BtfTracePoint, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::trace_point::TracePoint
pub type &'a mut aya::programs::trace_point::TracePoint::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::trace_point::TracePoint::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::trace_point::TracePoint, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::uprobe::UProbe
pub type &'a mut aya::programs::uprobe::UProbe::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::uprobe::UProbe::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::uprobe::UProbe, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::xdp::Xdp
pub type &'a mut aya::programs::xdp::Xdp::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::xdp::Xdp::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::xdp::Xdp, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::Program
impl core::marker::Send for aya::programs::Program
impl core::marker::Sync for aya::programs::Program
impl core::marker::Unpin for aya::programs::Program
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::Program
impl core::panic::unwind_safe::UnwindSafe for aya::programs::Program
impl<T, U> core::convert::Into<U> for aya::programs::Program where U: core::convert::From<T>
pub fn aya::programs::Program::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::Program where U: core::convert::Into<T>
pub type aya::programs::Program::Error = core::convert::Infallible
pub fn aya::programs::Program::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::Program where U: core::convert::TryFrom<T>
pub type aya::programs::Program::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::Program::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::Program where T: 'static + ?core::marker::Sized
pub fn aya::programs::Program::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::Program where T: ?core::marker::Sized
pub fn aya::programs::Program::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::Program where T: ?core::marker::Sized
pub fn aya::programs::Program::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::Program
pub fn aya::programs::Program::from(t: T) -> T
pub enum aya::programs::ProgramError
pub aya::programs::ProgramError::AlreadyAttached
pub aya::programs::ProgramError::AlreadyLoaded
pub aya::programs::ProgramError::Btf(aya_obj::btf::btf::BtfError)
pub aya::programs::ProgramError::ExtensionError(aya::programs::extension::ExtensionError)
pub aya::programs::ProgramError::IOError(std::io::error::Error)
pub aya::programs::ProgramError::InvalidName
pub aya::programs::ProgramError::InvalidName::name: alloc::string::String
pub aya::programs::ProgramError::KProbeError(aya::programs::kprobe::KProbeError)
pub aya::programs::ProgramError::LoadError
pub aya::programs::ProgramError::LoadError::io_error: std::io::error::Error
pub aya::programs::ProgramError::LoadError::verifier_log: aya_obj::VerifierLog
pub aya::programs::ProgramError::MapError(aya::maps::MapError)
pub aya::programs::ProgramError::NotAttached
pub aya::programs::ProgramError::NotLoaded
pub aya::programs::ProgramError::SocketFilterError(aya::programs::socket_filter::SocketFilterError)
pub aya::programs::ProgramError::SyscallError(aya::sys::SyscallError)
pub aya::programs::ProgramError::TcError(aya::programs::tc::TcError)
pub aya::programs::ProgramError::TracePointError(aya::programs::trace_point::TracePointError)
pub aya::programs::ProgramError::UProbeError(aya::programs::uprobe::UProbeError)
pub aya::programs::ProgramError::UnexpectedProgramType
pub aya::programs::ProgramError::UnknownInterface
pub aya::programs::ProgramError::UnknownInterface::name: alloc::string::String
pub aya::programs::ProgramError::XdpError(aya::programs::xdp::XdpError)
impl core::convert::From<aya::maps::MapError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya::maps::MapError) -> Self
impl core::convert::From<aya::programs::ProgramError> for aya::EbpfError
pub fn aya::EbpfError::from(source: aya::programs::ProgramError) -> Self
impl core::convert::From<aya::programs::extension::ExtensionError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya::programs::extension::ExtensionError) -> Self
impl core::convert::From<aya::programs::kprobe::KProbeError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya::programs::kprobe::KProbeError) -> Self
impl core::convert::From<aya::programs::socket_filter::SocketFilterError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya::programs::socket_filter::SocketFilterError) -> Self
impl core::convert::From<aya::programs::tc::TcError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya::programs::tc::TcError) -> Self
impl core::convert::From<aya::programs::trace_point::TracePointError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya::programs::trace_point::TracePointError) -> Self
impl core::convert::From<aya::programs::uprobe::UProbeError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya::programs::uprobe::UProbeError) -> Self
impl core::convert::From<aya::programs::xdp::XdpError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya::programs::xdp::XdpError) -> Self
impl core::convert::From<aya::sys::SyscallError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya::sys::SyscallError) -> Self
impl core::convert::From<aya_obj::btf::btf::BtfError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya_obj::btf::btf::BtfError) -> Self
impl core::convert::From<std::io::error::Error> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: std::io::error::Error) -> Self
impl core::error::Error for aya::programs::ProgramError
pub fn aya::programs::ProgramError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Debug for aya::programs::ProgramError
pub fn aya::programs::ProgramError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for aya::programs::ProgramError
pub fn aya::programs::ProgramError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::ProgramError
impl core::marker::Send for aya::programs::ProgramError
impl core::marker::Sync for aya::programs::ProgramError
impl core::marker::Unpin for aya::programs::ProgramError
impl !core::panic::unwind_safe::RefUnwindSafe for aya::programs::ProgramError
impl !core::panic::unwind_safe::UnwindSafe for aya::programs::ProgramError
impl<T, U> core::convert::Into<U> for aya::programs::ProgramError where U: core::convert::From<T>
pub fn aya::programs::ProgramError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::ProgramError where U: core::convert::Into<T>
pub type aya::programs::ProgramError::Error = core::convert::Infallible
pub fn aya::programs::ProgramError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::ProgramError where U: core::convert::TryFrom<T>
pub type aya::programs::ProgramError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::ProgramError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for aya::programs::ProgramError where T: core::fmt::Display + ?core::marker::Sized
pub fn aya::programs::ProgramError::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for aya::programs::ProgramError where T: 'static + ?core::marker::Sized
pub fn aya::programs::ProgramError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::ProgramError where T: ?core::marker::Sized
pub fn aya::programs::ProgramError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::ProgramError where T: ?core::marker::Sized
pub fn aya::programs::ProgramError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(t: T) -> T
#[non_exhaustive] pub enum aya::programs::ProgramType
pub aya::programs::ProgramType::CgroupDevice = 15
pub aya::programs::ProgramType::CgroupSkb = 8
pub aya::programs::ProgramType::CgroupSock = 9
pub aya::programs::ProgramType::CgroupSockAddr = 18
pub aya::programs::ProgramType::CgroupSockopt = 25
pub aya::programs::ProgramType::CgroupSysctl = 23
pub aya::programs::ProgramType::Extension = 28
pub aya::programs::ProgramType::FlowDissector = 22
pub aya::programs::ProgramType::KProbe = 2
pub aya::programs::ProgramType::LircMode2 = 20
pub aya::programs::ProgramType::Lsm = 29
pub aya::programs::ProgramType::LwtInput = 10
pub aya::programs::ProgramType::LwtOutput = 11
pub aya::programs::ProgramType::LwtSeg6local = 19
pub aya::programs::ProgramType::LwtXmit = 12
pub aya::programs::ProgramType::Netfilter = 32
pub aya::programs::ProgramType::PerfEvent = 7
pub aya::programs::ProgramType::RawTracePoint = 17
pub aya::programs::ProgramType::RawTracePointWritable = 24
pub aya::programs::ProgramType::SchedAction = 4
pub aya::programs::ProgramType::SchedClassifier = 3
pub aya::programs::ProgramType::SkLookup = 30
pub aya::programs::ProgramType::SkMsg = 16
pub aya::programs::ProgramType::SkReuseport = 21
pub aya::programs::ProgramType::SkSkb = 14
pub aya::programs::ProgramType::SockOps = 13
pub aya::programs::ProgramType::SocketFilter = 1
pub aya::programs::ProgramType::StructOps = 27
pub aya::programs::ProgramType::Syscall = 31
pub aya::programs::ProgramType::TracePoint = 5
pub aya::programs::ProgramType::Tracing = 26
pub aya::programs::ProgramType::Unspecified = 0
pub aya::programs::ProgramType::Xdp = 6
impl core::clone::Clone for aya::programs::ProgramType
pub fn aya::programs::ProgramType::clone(&self) -> aya::programs::ProgramType
impl core::cmp::PartialEq for aya::programs::ProgramType
pub fn aya::programs::ProgramType::eq(&self, other: &aya::programs::ProgramType) -> bool
impl core::convert::TryFrom<aya_obj::generated::linux_bindings_x86_64::bpf_prog_type> for aya::programs::ProgramType
pub type aya::programs::ProgramType::Error = aya::programs::ProgramError
pub fn aya::programs::ProgramType::try_from(prog_type: aya_obj::generated::linux_bindings_x86_64::bpf_prog_type) -> core::result::Result<Self, Self::Error>
impl core::fmt::Debug for aya::programs::ProgramType
pub fn aya::programs::ProgramType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for aya::programs::ProgramType
impl core::marker::StructuralPartialEq for aya::programs::ProgramType
impl core::marker::Freeze for aya::programs::ProgramType
impl core::marker::Send for aya::programs::ProgramType
impl core::marker::Sync for aya::programs::ProgramType
impl core::marker::Unpin for aya::programs::ProgramType
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::ProgramType
impl core::panic::unwind_safe::UnwindSafe for aya::programs::ProgramType
impl<T, U> core::convert::Into<U> for aya::programs::ProgramType where U: core::convert::From<T>
pub fn aya::programs::ProgramType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::ProgramType where U: core::convert::Into<T>
pub type aya::programs::ProgramType::Error = core::convert::Infallible
pub fn aya::programs::ProgramType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::ProgramType where U: core::convert::TryFrom<T>
pub type aya::programs::ProgramType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::ProgramType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for aya::programs::ProgramType where T: core::clone::Clone
pub type aya::programs::ProgramType::Owned = T
pub fn aya::programs::ProgramType::clone_into(&self, target: &mut T)
pub fn aya::programs::ProgramType::to_owned(&self) -> T
impl<T> core::any::Any for aya::programs::ProgramType where T: 'static + ?core::marker::Sized
pub fn aya::programs::ProgramType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::ProgramType where T: ?core::marker::Sized
pub fn aya::programs::ProgramType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::ProgramType where T: ?core::marker::Sized
pub fn aya::programs::ProgramType::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for aya::programs::ProgramType where T: core::clone::Clone
pub unsafe fn aya::programs::ProgramType::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for aya::programs::ProgramType
pub fn aya::programs::ProgramType::from(t: T) -> T
pub enum aya::programs::SamplePolicy
pub aya::programs::SamplePolicy::Frequency(u64)
pub aya::programs::SamplePolicy::Period(u64)
impl core::clone::Clone for aya::programs::perf_event::SamplePolicy
pub fn aya::programs::perf_event::SamplePolicy::clone(&self) -> aya::programs::perf_event::SamplePolicy
impl core::fmt::Debug for aya::programs::perf_event::SamplePolicy
pub fn aya::programs::perf_event::SamplePolicy::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::perf_event::SamplePolicy
impl core::marker::Send for aya::programs::perf_event::SamplePolicy
impl core::marker::Sync for aya::programs::perf_event::SamplePolicy
impl core::marker::Unpin for aya::programs::perf_event::SamplePolicy
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::perf_event::SamplePolicy
impl core::panic::unwind_safe::UnwindSafe for aya::programs::perf_event::SamplePolicy
impl<T, U> core::convert::Into<U> for aya::programs::perf_event::SamplePolicy where U: core::convert::From<T>
pub fn aya::programs::perf_event::SamplePolicy::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::perf_event::SamplePolicy where U: core::convert::Into<T>
pub type aya::programs::perf_event::SamplePolicy::Error = core::convert::Infallible
pub fn aya::programs::perf_event::SamplePolicy::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::perf_event::SamplePolicy where U: core::convert::TryFrom<T>
pub type aya::programs::perf_event::SamplePolicy::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::perf_event::SamplePolicy::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for aya::programs::perf_event::SamplePolicy where T: core::clone::Clone
pub type aya::programs::perf_event::SamplePolicy::Owned = T
pub fn aya::programs::perf_event::SamplePolicy::clone_into(&self, target: &mut T)
pub fn aya::programs::perf_event::SamplePolicy::to_owned(&self) -> T
impl<T> core::any::Any for aya::programs::perf_event::SamplePolicy where T: 'static + ?core::marker::Sized
pub fn aya::programs::perf_event::SamplePolicy::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::perf_event::SamplePolicy where T: ?core::marker::Sized
pub fn aya::programs::perf_event::SamplePolicy::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::perf_event::SamplePolicy where T: ?core::marker::Sized
pub fn aya::programs::perf_event::SamplePolicy::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for aya::programs::perf_event::SamplePolicy where T: core::clone::Clone
pub unsafe fn aya::programs::perf_event::SamplePolicy::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for aya::programs::perf_event::SamplePolicy
pub fn aya::programs::perf_event::SamplePolicy::from(t: T) -> T
pub enum aya::programs::SkSkbKind
pub aya::programs::SkSkbKind::StreamParser
pub aya::programs::SkSkbKind::StreamVerdict
impl core::clone::Clone for aya::programs::sk_skb::SkSkbKind
pub fn aya::programs::sk_skb::SkSkbKind::clone(&self) -> aya::programs::sk_skb::SkSkbKind
impl core::fmt::Debug for aya::programs::sk_skb::SkSkbKind
pub fn aya::programs::sk_skb::SkSkbKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for aya::programs::sk_skb::SkSkbKind
impl core::marker::Freeze for aya::programs::sk_skb::SkSkbKind
impl core::marker::Send for aya::programs::sk_skb::SkSkbKind
impl core::marker::Sync for aya::programs::sk_skb::SkSkbKind
impl core::marker::Unpin for aya::programs::sk_skb::SkSkbKind
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::sk_skb::SkSkbKind
impl core::panic::unwind_safe::UnwindSafe for aya::programs::sk_skb::SkSkbKind
impl<T, U> core::convert::Into<U> for aya::programs::sk_skb::SkSkbKind where U: core::convert::From<T>
pub fn aya::programs::sk_skb::SkSkbKind::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::sk_skb::SkSkbKind where U: core::convert::Into<T>
pub type aya::programs::sk_skb::SkSkbKind::Error = core::convert::Infallible
pub fn aya::programs::sk_skb::SkSkbKind::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::sk_skb::SkSkbKind where U: core::convert::TryFrom<T>
pub type aya::programs::sk_skb::SkSkbKind::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::sk_skb::SkSkbKind::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for aya::programs::sk_skb::SkSkbKind where T: core::clone::Clone
pub type aya::programs::sk_skb::SkSkbKind::Owned = T
pub fn aya::programs::sk_skb::SkSkbKind::clone_into(&self, target: &mut T)
pub fn aya::programs::sk_skb::SkSkbKind::to_owned(&self) -> T
impl<T> core::any::Any for aya::programs::sk_skb::SkSkbKind where T: 'static + ?core::marker::Sized
pub fn aya::programs::sk_skb::SkSkbKind::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::sk_skb::SkSkbKind where T: ?core::marker::Sized
pub fn aya::programs::sk_skb::SkSkbKind::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::sk_skb::SkSkbKind where T: ?core::marker::Sized
pub fn aya::programs::sk_skb::SkSkbKind::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for aya::programs::sk_skb::SkSkbKind where T: core::clone::Clone
pub unsafe fn aya::programs::sk_skb::SkSkbKind::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for aya::programs::sk_skb::SkSkbKind
pub fn aya::programs::sk_skb::SkSkbKind::from(t: T) -> T
pub enum aya::programs::SocketFilterError
pub aya::programs::SocketFilterError::SoAttachEbpfError
pub aya::programs::SocketFilterError::SoAttachEbpfError::io_error: std::io::error::Error
impl core::convert::From<aya::programs::socket_filter::SocketFilterError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya::programs::socket_filter::SocketFilterError) -> Self
impl core::error::Error for aya::programs::socket_filter::SocketFilterError
pub fn aya::programs::socket_filter::SocketFilterError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Debug for aya::programs::socket_filter::SocketFilterError
pub fn aya::programs::socket_filter::SocketFilterError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for aya::programs::socket_filter::SocketFilterError
pub fn aya::programs::socket_filter::SocketFilterError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::socket_filter::SocketFilterError
impl core::marker::Send for aya::programs::socket_filter::SocketFilterError
impl core::marker::Sync for aya::programs::socket_filter::SocketFilterError
impl core::marker::Unpin for aya::programs::socket_filter::SocketFilterError
impl !core::panic::unwind_safe::RefUnwindSafe for aya::programs::socket_filter::SocketFilterError
impl !core::panic::unwind_safe::UnwindSafe for aya::programs::socket_filter::SocketFilterError
impl<T, U> core::convert::Into<U> for aya::programs::socket_filter::SocketFilterError where U: core::convert::From<T>
pub fn aya::programs::socket_filter::SocketFilterError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::socket_filter::SocketFilterError where U: core::convert::Into<T>
pub type aya::programs::socket_filter::SocketFilterError::Error = core::convert::Infallible
pub fn aya::programs::socket_filter::SocketFilterError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::socket_filter::SocketFilterError where U: core::convert::TryFrom<T>
pub type aya::programs::socket_filter::SocketFilterError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::socket_filter::SocketFilterError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for aya::programs::socket_filter::SocketFilterError where T: core::fmt::Display + ?core::marker::Sized
pub fn aya::programs::socket_filter::SocketFilterError::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for aya::programs::socket_filter::SocketFilterError where T: 'static + ?core::marker::Sized
pub fn aya::programs::socket_filter::SocketFilterError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::socket_filter::SocketFilterError where T: ?core::marker::Sized
pub fn aya::programs::socket_filter::SocketFilterError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::socket_filter::SocketFilterError where T: ?core::marker::Sized
pub fn aya::programs::socket_filter::SocketFilterError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::socket_filter::SocketFilterError
pub fn aya::programs::socket_filter::SocketFilterError::from(t: T) -> T
pub enum aya::programs::TcAttachType
pub aya::programs::TcAttachType::Custom(u32)
pub aya::programs::TcAttachType::Egress
pub aya::programs::TcAttachType::Ingress
impl core::clone::Clone for aya::programs::tc::TcAttachType
pub fn aya::programs::tc::TcAttachType::clone(&self) -> aya::programs::tc::TcAttachType
impl core::cmp::Eq for aya::programs::tc::TcAttachType
impl core::cmp::PartialEq for aya::programs::tc::TcAttachType
pub fn aya::programs::tc::TcAttachType::eq(&self, other: &aya::programs::tc::TcAttachType) -> bool
impl core::fmt::Debug for aya::programs::tc::TcAttachType
pub fn aya::programs::tc::TcAttachType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for aya::programs::tc::TcAttachType
pub fn aya::programs::tc::TcAttachType::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::Copy for aya::programs::tc::TcAttachType
impl core::marker::StructuralPartialEq for aya::programs::tc::TcAttachType
impl core::marker::Freeze for aya::programs::tc::TcAttachType
impl core::marker::Send for aya::programs::tc::TcAttachType
impl core::marker::Sync for aya::programs::tc::TcAttachType
impl core::marker::Unpin for aya::programs::tc::TcAttachType
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::tc::TcAttachType
impl core::panic::unwind_safe::UnwindSafe for aya::programs::tc::TcAttachType
impl<Q, K> equivalent::Equivalent<K> for aya::programs::tc::TcAttachType where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::programs::tc::TcAttachType::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::programs::tc::TcAttachType where U: core::convert::From<T>
pub fn aya::programs::tc::TcAttachType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::tc::TcAttachType where U: core::convert::Into<T>
pub type aya::programs::tc::TcAttachType::Error = core::convert::Infallible
pub fn aya::programs::tc::TcAttachType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::tc::TcAttachType where U: core::convert::TryFrom<T>
pub type aya::programs::tc::TcAttachType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::tc::TcAttachType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for aya::programs::tc::TcAttachType where T: core::clone::Clone
pub type aya::programs::tc::TcAttachType::Owned = T
pub fn aya::programs::tc::TcAttachType::clone_into(&self, target: &mut T)
pub fn aya::programs::tc::TcAttachType::to_owned(&self) -> T
impl<T> core::any::Any for aya::programs::tc::TcAttachType where T: 'static + ?core::marker::Sized
pub fn aya::programs::tc::TcAttachType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::tc::TcAttachType where T: ?core::marker::Sized
pub fn aya::programs::tc::TcAttachType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::tc::TcAttachType where T: ?core::marker::Sized
pub fn aya::programs::tc::TcAttachType::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for aya::programs::tc::TcAttachType where T: core::clone::Clone
pub unsafe fn aya::programs::tc::TcAttachType::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for aya::programs::tc::TcAttachType
pub fn aya::programs::tc::TcAttachType::from(t: T) -> T
pub enum aya::programs::TcError
pub aya::programs::TcError::AlreadyAttached
pub aya::programs::TcError::InvalidLinkOperation
pub aya::programs::TcError::InvalidTcxAttach(u32)
pub aya::programs::TcError::NetlinkError
pub aya::programs::TcError::NetlinkError::io_error: std::io::error::Error
impl core::convert::From<aya::programs::tc::TcError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya::programs::tc::TcError) -> Self
impl core::error::Error for aya::programs::tc::TcError
pub fn aya::programs::tc::TcError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Debug for aya::programs::tc::TcError
pub fn aya::programs::tc::TcError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for aya::programs::tc::TcError
pub fn aya::programs::tc::TcError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::tc::TcError
impl core::marker::Send for aya::programs::tc::TcError
impl core::marker::Sync for aya::programs::tc::TcError
impl core::marker::Unpin for aya::programs::tc::TcError
impl !core::panic::unwind_safe::RefUnwindSafe for aya::programs::tc::TcError
impl !core::panic::unwind_safe::UnwindSafe for aya::programs::tc::TcError
impl<T, U> core::convert::Into<U> for aya::programs::tc::TcError where U: core::convert::From<T>
pub fn aya::programs::tc::TcError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::tc::TcError where U: core::convert::Into<T>
pub type aya::programs::tc::TcError::Error = core::convert::Infallible
pub fn aya::programs::tc::TcError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::tc::TcError where U: core::convert::TryFrom<T>
pub type aya::programs::tc::TcError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::tc::TcError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for aya::programs::tc::TcError where T: core::fmt::Display + ?core::marker::Sized
pub fn aya::programs::tc::TcError::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for aya::programs::tc::TcError where T: 'static + ?core::marker::Sized
pub fn aya::programs::tc::TcError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::tc::TcError where T: ?core::marker::Sized
pub fn aya::programs::tc::TcError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::tc::TcError where T: ?core::marker::Sized
pub fn aya::programs::tc::TcError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::tc::TcError
pub fn aya::programs::tc::TcError::from(t: T) -> T
pub enum aya::programs::TracePointError
pub aya::programs::TracePointError::FileError
pub aya::programs::TracePointError::FileError::filename: alloc::string::String
pub aya::programs::TracePointError::FileError::io_error: std::io::error::Error
impl core::convert::From<aya::programs::trace_point::TracePointError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya::programs::trace_point::TracePointError) -> Self
impl core::error::Error for aya::programs::trace_point::TracePointError
pub fn aya::programs::trace_point::TracePointError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Debug for aya::programs::trace_point::TracePointError
pub fn aya::programs::trace_point::TracePointError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for aya::programs::trace_point::TracePointError
pub fn aya::programs::trace_point::TracePointError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::trace_point::TracePointError
impl core::marker::Send for aya::programs::trace_point::TracePointError
impl core::marker::Sync for aya::programs::trace_point::TracePointError
impl core::marker::Unpin for aya::programs::trace_point::TracePointError
impl !core::panic::unwind_safe::RefUnwindSafe for aya::programs::trace_point::TracePointError
impl !core::panic::unwind_safe::UnwindSafe for aya::programs::trace_point::TracePointError
impl<T, U> core::convert::Into<U> for aya::programs::trace_point::TracePointError where U: core::convert::From<T>
pub fn aya::programs::trace_point::TracePointError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::trace_point::TracePointError where U: core::convert::Into<T>
pub type aya::programs::trace_point::TracePointError::Error = core::convert::Infallible
pub fn aya::programs::trace_point::TracePointError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::trace_point::TracePointError where U: core::convert::TryFrom<T>
pub type aya::programs::trace_point::TracePointError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::trace_point::TracePointError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for aya::programs::trace_point::TracePointError where T: core::fmt::Display + ?core::marker::Sized
pub fn aya::programs::trace_point::TracePointError::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for aya::programs::trace_point::TracePointError where T: 'static + ?core::marker::Sized
pub fn aya::programs::trace_point::TracePointError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::trace_point::TracePointError where T: ?core::marker::Sized
pub fn aya::programs::trace_point::TracePointError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::trace_point::TracePointError where T: ?core::marker::Sized
pub fn aya::programs::trace_point::TracePointError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::trace_point::TracePointError
pub fn aya::programs::trace_point::TracePointError::from(t: T) -> T
pub enum aya::programs::UProbeError
pub aya::programs::UProbeError::FileError
pub aya::programs::UProbeError::FileError::filename: std::path::PathBuf
pub aya::programs::UProbeError::FileError::io_error: std::io::error::Error
pub aya::programs::UProbeError::InvalidLdSoCache
pub aya::programs::UProbeError::InvalidLdSoCache::io_error: &'static std::io::error::Error
pub aya::programs::UProbeError::InvalidTarget
pub aya::programs::UProbeError::InvalidTarget::path: std::path::PathBuf
pub aya::programs::UProbeError::SymbolError
pub aya::programs::UProbeError::SymbolError::error: alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync)>
pub aya::programs::UProbeError::SymbolError::symbol: alloc::string::String
impl core::convert::From<aya::programs::uprobe::UProbeError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya::programs::uprobe::UProbeError) -> Self
impl core::error::Error for aya::programs::uprobe::UProbeError
pub fn aya::programs::uprobe::UProbeError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Debug for aya::programs::uprobe::UProbeError
pub fn aya::programs::uprobe::UProbeError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for aya::programs::uprobe::UProbeError
pub fn aya::programs::uprobe::UProbeError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::uprobe::UProbeError
impl core::marker::Send for aya::programs::uprobe::UProbeError
impl core::marker::Sync for aya::programs::uprobe::UProbeError
impl core::marker::Unpin for aya::programs::uprobe::UProbeError
impl !core::panic::unwind_safe::RefUnwindSafe for aya::programs::uprobe::UProbeError
impl !core::panic::unwind_safe::UnwindSafe for aya::programs::uprobe::UProbeError
impl<T, U> core::convert::Into<U> for aya::programs::uprobe::UProbeError where U: core::convert::From<T>
pub fn aya::programs::uprobe::UProbeError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::uprobe::UProbeError where U: core::convert::Into<T>
pub type aya::programs::uprobe::UProbeError::Error = core::convert::Infallible
pub fn aya::programs::uprobe::UProbeError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::uprobe::UProbeError where U: core::convert::TryFrom<T>
pub type aya::programs::uprobe::UProbeError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::uprobe::UProbeError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for aya::programs::uprobe::UProbeError where T: core::fmt::Display + ?core::marker::Sized
pub fn aya::programs::uprobe::UProbeError::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for aya::programs::uprobe::UProbeError where T: 'static + ?core::marker::Sized
pub fn aya::programs::uprobe::UProbeError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::uprobe::UProbeError where T: ?core::marker::Sized
pub fn aya::programs::uprobe::UProbeError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::uprobe::UProbeError where T: ?core::marker::Sized
pub fn aya::programs::uprobe::UProbeError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::uprobe::UProbeError
pub fn aya::programs::uprobe::UProbeError::from(t: T) -> T
pub enum aya::programs::XdpError
pub aya::programs::XdpError::NetlinkError
pub aya::programs::XdpError::NetlinkError::io_error: std::io::error::Error
impl core::convert::From<aya::programs::xdp::XdpError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya::programs::xdp::XdpError) -> Self
impl core::error::Error for aya::programs::xdp::XdpError
pub fn aya::programs::xdp::XdpError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Debug for aya::programs::xdp::XdpError
pub fn aya::programs::xdp::XdpError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for aya::programs::xdp::XdpError
pub fn aya::programs::xdp::XdpError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::xdp::XdpError
impl core::marker::Send for aya::programs::xdp::XdpError
impl core::marker::Sync for aya::programs::xdp::XdpError
impl core::marker::Unpin for aya::programs::xdp::XdpError
impl !core::panic::unwind_safe::RefUnwindSafe for aya::programs::xdp::XdpError
impl !core::panic::unwind_safe::UnwindSafe for aya::programs::xdp::XdpError
impl<T, U> core::convert::Into<U> for aya::programs::xdp::XdpError where U: core::convert::From<T>
pub fn aya::programs::xdp::XdpError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::xdp::XdpError where U: core::convert::Into<T>
pub type aya::programs::xdp::XdpError::Error = core::convert::Infallible
pub fn aya::programs::xdp::XdpError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::xdp::XdpError where U: core::convert::TryFrom<T>
pub type aya::programs::xdp::XdpError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::xdp::XdpError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for aya::programs::xdp::XdpError where T: core::fmt::Display + ?core::marker::Sized
pub fn aya::programs::xdp::XdpError::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for aya::programs::xdp::XdpError where T: 'static + ?core::marker::Sized
pub fn aya::programs::xdp::XdpError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::xdp::XdpError where T: ?core::marker::Sized
pub fn aya::programs::xdp::XdpError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::xdp::XdpError where T: ?core::marker::Sized
pub fn aya::programs::xdp::XdpError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::xdp::XdpError
pub fn aya::programs::xdp::XdpError::from(t: T) -> T
pub struct aya::programs::BtfTracePoint
impl aya::programs::tp_btf::BtfTracePoint
pub fn aya::programs::tp_btf::BtfTracePoint::attach(&mut self) -> core::result::Result<aya::programs::tp_btf::BtfTracePointLinkId, aya::programs::ProgramError>
pub fn aya::programs::tp_btf::BtfTracePoint::load(&mut self, tracepoint: &str, btf: &aya_obj::btf::btf::Btf) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::tp_btf::BtfTracePoint
pub fn aya::programs::tp_btf::BtfTracePoint::detach(&mut self, link_id: aya::programs::tp_btf::BtfTracePointLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::tp_btf::BtfTracePoint::take_link(&mut self, link_id: aya::programs::tp_btf::BtfTracePointLinkId) -> core::result::Result<aya::programs::tp_btf::BtfTracePointLink, aya::programs::ProgramError>
impl aya::programs::tp_btf::BtfTracePoint
pub fn aya::programs::tp_btf::BtfTracePoint::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::tp_btf::BtfTracePoint
pub fn aya::programs::tp_btf::BtfTracePoint::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::tp_btf::BtfTracePoint
pub fn aya::programs::tp_btf::BtfTracePoint::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::tp_btf::BtfTracePoint
pub fn aya::programs::tp_btf::BtfTracePoint::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::tp_btf::BtfTracePoint::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::tp_btf::BtfTracePoint
pub fn aya::programs::tp_btf::BtfTracePoint::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::tp_btf::BtfTracePoint
pub fn aya::programs::tp_btf::BtfTracePoint::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::tp_btf::BtfTracePoint
pub fn aya::programs::tp_btf::BtfTracePoint::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::tp_btf::BtfTracePoint
pub type &'a aya::programs::tp_btf::BtfTracePoint::Error = aya::programs::ProgramError
pub fn &'a aya::programs::tp_btf::BtfTracePoint::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::tp_btf::BtfTracePoint, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::tp_btf::BtfTracePoint
pub type &'a mut aya::programs::tp_btf::BtfTracePoint::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::tp_btf::BtfTracePoint::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::tp_btf::BtfTracePoint, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::tp_btf::BtfTracePoint
impl core::marker::Send for aya::programs::tp_btf::BtfTracePoint
impl core::marker::Sync for aya::programs::tp_btf::BtfTracePoint
impl core::marker::Unpin for aya::programs::tp_btf::BtfTracePoint
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::tp_btf::BtfTracePoint
impl core::panic::unwind_safe::UnwindSafe for aya::programs::tp_btf::BtfTracePoint
impl<T, U> core::convert::Into<U> for aya::programs::tp_btf::BtfTracePoint where U: core::convert::From<T>
pub fn aya::programs::tp_btf::BtfTracePoint::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::tp_btf::BtfTracePoint where U: core::convert::Into<T>
pub type aya::programs::tp_btf::BtfTracePoint::Error = core::convert::Infallible
pub fn aya::programs::tp_btf::BtfTracePoint::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::tp_btf::BtfTracePoint where U: core::convert::TryFrom<T>
pub type aya::programs::tp_btf::BtfTracePoint::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::tp_btf::BtfTracePoint::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::tp_btf::BtfTracePoint where T: 'static + ?core::marker::Sized
pub fn aya::programs::tp_btf::BtfTracePoint::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::tp_btf::BtfTracePoint where T: ?core::marker::Sized
pub fn aya::programs::tp_btf::BtfTracePoint::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::tp_btf::BtfTracePoint where T: ?core::marker::Sized
pub fn aya::programs::tp_btf::BtfTracePoint::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::tp_btf::BtfTracePoint
pub fn aya::programs::tp_btf::BtfTracePoint::from(t: T) -> T
pub struct aya::programs::CgroupDevice
impl aya::programs::cgroup_device::CgroupDevice
pub fn aya::programs::cgroup_device::CgroupDevice::attach<T: std::os::fd::owned::AsFd>(&mut self, cgroup: T, mode: aya::programs::links::CgroupAttachMode) -> core::result::Result<aya::programs::cgroup_device::CgroupDeviceLinkId, aya::programs::ProgramError>
pub fn aya::programs::cgroup_device::CgroupDevice::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_device::CgroupDevice::query<T: std::os::fd::owned::AsFd>(target_fd: T) -> core::result::Result<alloc::vec::Vec<aya::programs::cgroup_device::CgroupDeviceLink>, aya::programs::ProgramError>
impl aya::programs::cgroup_device::CgroupDevice
pub fn aya::programs::cgroup_device::CgroupDevice::detach(&mut self, link_id: aya::programs::cgroup_device::CgroupDeviceLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_device::CgroupDevice::take_link(&mut self, link_id: aya::programs::cgroup_device::CgroupDeviceLinkId) -> core::result::Result<aya::programs::cgroup_device::CgroupDeviceLink, aya::programs::ProgramError>
impl aya::programs::cgroup_device::CgroupDevice
pub fn aya::programs::cgroup_device::CgroupDevice::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::cgroup_device::CgroupDevice
pub fn aya::programs::cgroup_device::CgroupDevice::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::cgroup_device::CgroupDevice
pub fn aya::programs::cgroup_device::CgroupDevice::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::cgroup_device::CgroupDevice
pub fn aya::programs::cgroup_device::CgroupDevice::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::cgroup_device::CgroupDevice::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::cgroup_device::CgroupDevice
pub fn aya::programs::cgroup_device::CgroupDevice::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::cgroup_device::CgroupDevice
pub fn aya::programs::cgroup_device::CgroupDevice::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::cgroup_device::CgroupDevice
pub fn aya::programs::cgroup_device::CgroupDevice::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::cgroup_device::CgroupDevice
pub type &'a aya::programs::cgroup_device::CgroupDevice::Error = aya::programs::ProgramError
pub fn &'a aya::programs::cgroup_device::CgroupDevice::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::cgroup_device::CgroupDevice, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::cgroup_device::CgroupDevice
pub type &'a mut aya::programs::cgroup_device::CgroupDevice::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::cgroup_device::CgroupDevice::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::cgroup_device::CgroupDevice, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::cgroup_device::CgroupDevice
impl core::marker::Send for aya::programs::cgroup_device::CgroupDevice
impl core::marker::Sync for aya::programs::cgroup_device::CgroupDevice
impl core::marker::Unpin for aya::programs::cgroup_device::CgroupDevice
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_device::CgroupDevice
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_device::CgroupDevice
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_device::CgroupDevice where U: core::convert::From<T>
pub fn aya::programs::cgroup_device::CgroupDevice::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_device::CgroupDevice where U: core::convert::Into<T>
pub type aya::programs::cgroup_device::CgroupDevice::Error = core::convert::Infallible
pub fn aya::programs::cgroup_device::CgroupDevice::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_device::CgroupDevice where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_device::CgroupDevice::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_device::CgroupDevice::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::cgroup_device::CgroupDevice where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_device::CgroupDevice::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_device::CgroupDevice where T: ?core::marker::Sized
pub fn aya::programs::cgroup_device::CgroupDevice::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_device::CgroupDevice where T: ?core::marker::Sized
pub fn aya::programs::cgroup_device::CgroupDevice::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::cgroup_device::CgroupDevice
pub fn aya::programs::cgroup_device::CgroupDevice::from(t: T) -> T
pub struct aya::programs::CgroupSkb
impl aya::programs::cgroup_skb::CgroupSkb
pub fn aya::programs::cgroup_skb::CgroupSkb::attach<T: std::os::fd::owned::AsFd>(&mut self, cgroup: T, attach_type: aya::programs::cgroup_skb::CgroupSkbAttachType, mode: aya::programs::links::CgroupAttachMode) -> core::result::Result<aya::programs::cgroup_skb::CgroupSkbLinkId, aya::programs::ProgramError>
pub fn aya::programs::cgroup_skb::CgroupSkb::expected_attach_type(&self) -> &core::option::Option<aya::programs::cgroup_skb::CgroupSkbAttachType>
pub fn aya::programs::cgroup_skb::CgroupSkb::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P, expected_attach_type: aya::programs::cgroup_skb::CgroupSkbAttachType) -> core::result::Result<Self, aya::programs::ProgramError>
pub fn aya::programs::cgroup_skb::CgroupSkb::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::cgroup_skb::CgroupSkb
pub fn aya::programs::cgroup_skb::CgroupSkb::detach(&mut self, link_id: aya::programs::cgroup_skb::CgroupSkbLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_skb::CgroupSkb::take_link(&mut self, link_id: aya::programs::cgroup_skb::CgroupSkbLinkId) -> core::result::Result<aya::programs::cgroup_skb::CgroupSkbLink, aya::programs::ProgramError>
impl aya::programs::cgroup_skb::CgroupSkb
pub fn aya::programs::cgroup_skb::CgroupSkb::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::cgroup_skb::CgroupSkb
pub fn aya::programs::cgroup_skb::CgroupSkb::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::cgroup_skb::CgroupSkb
pub fn aya::programs::cgroup_skb::CgroupSkb::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::cgroup_skb::CgroupSkb::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::cgroup_skb::CgroupSkb
pub fn aya::programs::cgroup_skb::CgroupSkb::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::cgroup_skb::CgroupSkb
pub fn aya::programs::cgroup_skb::CgroupSkb::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::cgroup_skb::CgroupSkb
pub fn aya::programs::cgroup_skb::CgroupSkb::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::cgroup_skb::CgroupSkb
pub type &'a aya::programs::cgroup_skb::CgroupSkb::Error = aya::programs::ProgramError
pub fn &'a aya::programs::cgroup_skb::CgroupSkb::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::cgroup_skb::CgroupSkb, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::cgroup_skb::CgroupSkb
pub type &'a mut aya::programs::cgroup_skb::CgroupSkb::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::cgroup_skb::CgroupSkb::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::cgroup_skb::CgroupSkb, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::cgroup_skb::CgroupSkb
impl core::marker::Send for aya::programs::cgroup_skb::CgroupSkb
impl core::marker::Sync for aya::programs::cgroup_skb::CgroupSkb
impl core::marker::Unpin for aya::programs::cgroup_skb::CgroupSkb
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_skb::CgroupSkb
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_skb::CgroupSkb
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_skb::CgroupSkb where U: core::convert::From<T>
pub fn aya::programs::cgroup_skb::CgroupSkb::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_skb::CgroupSkb where U: core::convert::Into<T>
pub type aya::programs::cgroup_skb::CgroupSkb::Error = core::convert::Infallible
pub fn aya::programs::cgroup_skb::CgroupSkb::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_skb::CgroupSkb where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_skb::CgroupSkb::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_skb::CgroupSkb::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::cgroup_skb::CgroupSkb where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_skb::CgroupSkb::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_skb::CgroupSkb where T: ?core::marker::Sized
pub fn aya::programs::cgroup_skb::CgroupSkb::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_skb::CgroupSkb where T: ?core::marker::Sized
pub fn aya::programs::cgroup_skb::CgroupSkb::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::cgroup_skb::CgroupSkb
pub fn aya::programs::cgroup_skb::CgroupSkb::from(t: T) -> T
pub struct aya::programs::CgroupSock
impl aya::programs::cgroup_sock::CgroupSock
pub fn aya::programs::cgroup_sock::CgroupSock::attach<T: std::os::fd::owned::AsFd>(&mut self, cgroup: T, mode: aya::programs::links::CgroupAttachMode) -> core::result::Result<aya::programs::cgroup_sock::CgroupSockLinkId, aya::programs::ProgramError>
pub fn aya::programs::cgroup_sock::CgroupSock::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P, attach_type: aya_obj::programs::cgroup_sock::CgroupSockAttachType) -> core::result::Result<Self, aya::programs::ProgramError>
pub fn aya::programs::cgroup_sock::CgroupSock::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::cgroup_sock::CgroupSock
pub fn aya::programs::cgroup_sock::CgroupSock::detach(&mut self, link_id: aya::programs::cgroup_sock::CgroupSockLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_sock::CgroupSock::take_link(&mut self, link_id: aya::programs::cgroup_sock::CgroupSockLinkId) -> core::result::Result<aya::programs::cgroup_sock::CgroupSockLink, aya::programs::ProgramError>
impl aya::programs::cgroup_sock::CgroupSock
pub fn aya::programs::cgroup_sock::CgroupSock::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::cgroup_sock::CgroupSock
pub fn aya::programs::cgroup_sock::CgroupSock::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::cgroup_sock::CgroupSock
pub fn aya::programs::cgroup_sock::CgroupSock::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::cgroup_sock::CgroupSock::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::cgroup_sock::CgroupSock
pub fn aya::programs::cgroup_sock::CgroupSock::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::cgroup_sock::CgroupSock
pub fn aya::programs::cgroup_sock::CgroupSock::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::cgroup_sock::CgroupSock
pub fn aya::programs::cgroup_sock::CgroupSock::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::cgroup_sock::CgroupSock
pub type &'a aya::programs::cgroup_sock::CgroupSock::Error = aya::programs::ProgramError
pub fn &'a aya::programs::cgroup_sock::CgroupSock::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::cgroup_sock::CgroupSock, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::cgroup_sock::CgroupSock
pub type &'a mut aya::programs::cgroup_sock::CgroupSock::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::cgroup_sock::CgroupSock::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::cgroup_sock::CgroupSock, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::cgroup_sock::CgroupSock
impl core::marker::Send for aya::programs::cgroup_sock::CgroupSock
impl core::marker::Sync for aya::programs::cgroup_sock::CgroupSock
impl core::marker::Unpin for aya::programs::cgroup_sock::CgroupSock
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_sock::CgroupSock
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_sock::CgroupSock
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_sock::CgroupSock where U: core::convert::From<T>
pub fn aya::programs::cgroup_sock::CgroupSock::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_sock::CgroupSock where U: core::convert::Into<T>
pub type aya::programs::cgroup_sock::CgroupSock::Error = core::convert::Infallible
pub fn aya::programs::cgroup_sock::CgroupSock::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_sock::CgroupSock where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_sock::CgroupSock::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_sock::CgroupSock::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::cgroup_sock::CgroupSock where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_sock::CgroupSock::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_sock::CgroupSock where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sock::CgroupSock::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_sock::CgroupSock where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sock::CgroupSock::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::cgroup_sock::CgroupSock
pub fn aya::programs::cgroup_sock::CgroupSock::from(t: T) -> T
pub struct aya::programs::CgroupSockAddr
impl aya::programs::cgroup_sock_addr::CgroupSockAddr
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::attach<T: std::os::fd::owned::AsFd>(&mut self, cgroup: T, mode: aya::programs::links::CgroupAttachMode) -> core::result::Result<aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId, aya::programs::ProgramError>
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P, attach_type: aya_obj::programs::cgroup_sock_addr::CgroupSockAddrAttachType) -> core::result::Result<Self, aya::programs::ProgramError>
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::cgroup_sock_addr::CgroupSockAddr
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::detach(&mut self, link_id: aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::take_link(&mut self, link_id: aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId) -> core::result::Result<aya::programs::cgroup_sock_addr::CgroupSockAddrLink, aya::programs::ProgramError>
impl aya::programs::cgroup_sock_addr::CgroupSockAddr
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::cgroup_sock_addr::CgroupSockAddr
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::cgroup_sock_addr::CgroupSockAddr
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::cgroup_sock_addr::CgroupSockAddr
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::cgroup_sock_addr::CgroupSockAddr
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::cgroup_sock_addr::CgroupSockAddr
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::cgroup_sock_addr::CgroupSockAddr
pub type &'a aya::programs::cgroup_sock_addr::CgroupSockAddr::Error = aya::programs::ProgramError
pub fn &'a aya::programs::cgroup_sock_addr::CgroupSockAddr::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::cgroup_sock_addr::CgroupSockAddr, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::cgroup_sock_addr::CgroupSockAddr
pub type &'a mut aya::programs::cgroup_sock_addr::CgroupSockAddr::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::cgroup_sock_addr::CgroupSockAddr::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::cgroup_sock_addr::CgroupSockAddr, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::cgroup_sock_addr::CgroupSockAddr
impl core::marker::Send for aya::programs::cgroup_sock_addr::CgroupSockAddr
impl core::marker::Sync for aya::programs::cgroup_sock_addr::CgroupSockAddr
impl core::marker::Unpin for aya::programs::cgroup_sock_addr::CgroupSockAddr
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_sock_addr::CgroupSockAddr
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_sock_addr::CgroupSockAddr
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_sock_addr::CgroupSockAddr where U: core::convert::From<T>
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_sock_addr::CgroupSockAddr where U: core::convert::Into<T>
pub type aya::programs::cgroup_sock_addr::CgroupSockAddr::Error = core::convert::Infallible
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_sock_addr::CgroupSockAddr where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_sock_addr::CgroupSockAddr::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::cgroup_sock_addr::CgroupSockAddr where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_sock_addr::CgroupSockAddr where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_sock_addr::CgroupSockAddr where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::cgroup_sock_addr::CgroupSockAddr
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddr::from(t: T) -> T
pub struct aya::programs::CgroupSockopt
impl aya::programs::cgroup_sockopt::CgroupSockopt
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::attach<T: std::os::fd::owned::AsFd>(&mut self, cgroup: T, mode: aya::programs::links::CgroupAttachMode) -> core::result::Result<aya::programs::cgroup_sockopt::CgroupSockoptLinkId, aya::programs::ProgramError>
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P, attach_type: aya_obj::programs::cgroup_sockopt::CgroupSockoptAttachType) -> core::result::Result<Self, aya::programs::ProgramError>
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::cgroup_sockopt::CgroupSockopt
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::detach(&mut self, link_id: aya::programs::cgroup_sockopt::CgroupSockoptLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::take_link(&mut self, link_id: aya::programs::cgroup_sockopt::CgroupSockoptLinkId) -> core::result::Result<aya::programs::cgroup_sockopt::CgroupSockoptLink, aya::programs::ProgramError>
impl aya::programs::cgroup_sockopt::CgroupSockopt
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::cgroup_sockopt::CgroupSockopt
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::cgroup_sockopt::CgroupSockopt
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::cgroup_sockopt::CgroupSockopt
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::cgroup_sockopt::CgroupSockopt
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::cgroup_sockopt::CgroupSockopt
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::cgroup_sockopt::CgroupSockopt
pub type &'a aya::programs::cgroup_sockopt::CgroupSockopt::Error = aya::programs::ProgramError
pub fn &'a aya::programs::cgroup_sockopt::CgroupSockopt::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::cgroup_sockopt::CgroupSockopt, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::cgroup_sockopt::CgroupSockopt
pub type &'a mut aya::programs::cgroup_sockopt::CgroupSockopt::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::cgroup_sockopt::CgroupSockopt::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::cgroup_sockopt::CgroupSockopt, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::cgroup_sockopt::CgroupSockopt
impl core::marker::Send for aya::programs::cgroup_sockopt::CgroupSockopt
impl core::marker::Sync for aya::programs::cgroup_sockopt::CgroupSockopt
impl core::marker::Unpin for aya::programs::cgroup_sockopt::CgroupSockopt
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_sockopt::CgroupSockopt
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_sockopt::CgroupSockopt
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_sockopt::CgroupSockopt where U: core::convert::From<T>
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_sockopt::CgroupSockopt where U: core::convert::Into<T>
pub type aya::programs::cgroup_sockopt::CgroupSockopt::Error = core::convert::Infallible
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_sockopt::CgroupSockopt where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_sockopt::CgroupSockopt::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::cgroup_sockopt::CgroupSockopt where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_sockopt::CgroupSockopt where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_sockopt::CgroupSockopt where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::cgroup_sockopt::CgroupSockopt
pub fn aya::programs::cgroup_sockopt::CgroupSockopt::from(t: T) -> T
pub struct aya::programs::CgroupSysctl
impl aya::programs::cgroup_sysctl::CgroupSysctl
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::attach<T: std::os::fd::owned::AsFd>(&mut self, cgroup: T, mode: aya::programs::links::CgroupAttachMode) -> core::result::Result<aya::programs::cgroup_sysctl::CgroupSysctlLinkId, aya::programs::ProgramError>
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::cgroup_sysctl::CgroupSysctl
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::detach(&mut self, link_id: aya::programs::cgroup_sysctl::CgroupSysctlLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::take_link(&mut self, link_id: aya::programs::cgroup_sysctl::CgroupSysctlLinkId) -> core::result::Result<aya::programs::cgroup_sysctl::CgroupSysctlLink, aya::programs::ProgramError>
impl aya::programs::cgroup_sysctl::CgroupSysctl
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::cgroup_sysctl::CgroupSysctl
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::cgroup_sysctl::CgroupSysctl
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::cgroup_sysctl::CgroupSysctl
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::cgroup_sysctl::CgroupSysctl
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::cgroup_sysctl::CgroupSysctl
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::cgroup_sysctl::CgroupSysctl
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::cgroup_sysctl::CgroupSysctl
pub type &'a aya::programs::cgroup_sysctl::CgroupSysctl::Error = aya::programs::ProgramError
pub fn &'a aya::programs::cgroup_sysctl::CgroupSysctl::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::cgroup_sysctl::CgroupSysctl, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::cgroup_sysctl::CgroupSysctl
pub type &'a mut aya::programs::cgroup_sysctl::CgroupSysctl::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::cgroup_sysctl::CgroupSysctl::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::cgroup_sysctl::CgroupSysctl, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::cgroup_sysctl::CgroupSysctl
impl core::marker::Send for aya::programs::cgroup_sysctl::CgroupSysctl
impl core::marker::Sync for aya::programs::cgroup_sysctl::CgroupSysctl
impl core::marker::Unpin for aya::programs::cgroup_sysctl::CgroupSysctl
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::cgroup_sysctl::CgroupSysctl
impl core::panic::unwind_safe::UnwindSafe for aya::programs::cgroup_sysctl::CgroupSysctl
impl<T, U> core::convert::Into<U> for aya::programs::cgroup_sysctl::CgroupSysctl where U: core::convert::From<T>
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::cgroup_sysctl::CgroupSysctl where U: core::convert::Into<T>
pub type aya::programs::cgroup_sysctl::CgroupSysctl::Error = core::convert::Infallible
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::cgroup_sysctl::CgroupSysctl where U: core::convert::TryFrom<T>
pub type aya::programs::cgroup_sysctl::CgroupSysctl::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::cgroup_sysctl::CgroupSysctl where T: 'static + ?core::marker::Sized
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::cgroup_sysctl::CgroupSysctl where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::cgroup_sysctl::CgroupSysctl where T: ?core::marker::Sized
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::cgroup_sysctl::CgroupSysctl
pub fn aya::programs::cgroup_sysctl::CgroupSysctl::from(t: T) -> T
pub struct aya::programs::Extension
impl aya::programs::extension::Extension
pub fn aya::programs::extension::Extension::attach(&mut self) -> core::result::Result<aya::programs::extension::ExtensionLinkId, aya::programs::ProgramError>
pub fn aya::programs::extension::Extension::attach_to_program(&mut self, program: &aya::programs::ProgramFd, func_name: &str) -> core::result::Result<aya::programs::extension::ExtensionLinkId, aya::programs::ProgramError>
pub fn aya::programs::extension::Extension::load(&mut self, program: aya::programs::ProgramFd, func_name: &str) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::extension::Extension
pub fn aya::programs::extension::Extension::detach(&mut self, link_id: aya::programs::extension::ExtensionLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::extension::Extension::take_link(&mut self, link_id: aya::programs::extension::ExtensionLinkId) -> core::result::Result<aya::programs::extension::ExtensionLink, aya::programs::ProgramError>
impl aya::programs::extension::Extension
pub fn aya::programs::extension::Extension::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::extension::Extension
pub fn aya::programs::extension::Extension::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::extension::Extension
pub fn aya::programs::extension::Extension::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::extension::Extension
pub fn aya::programs::extension::Extension::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::extension::Extension::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::extension::Extension
pub fn aya::programs::extension::Extension::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::extension::Extension
pub fn aya::programs::extension::Extension::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::extension::Extension
pub fn aya::programs::extension::Extension::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::extension::Extension
pub type &'a aya::programs::extension::Extension::Error = aya::programs::ProgramError
pub fn &'a aya::programs::extension::Extension::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::extension::Extension, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::extension::Extension
pub type &'a mut aya::programs::extension::Extension::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::extension::Extension::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::extension::Extension, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::extension::Extension
impl core::marker::Send for aya::programs::extension::Extension
impl core::marker::Sync for aya::programs::extension::Extension
impl core::marker::Unpin for aya::programs::extension::Extension
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::extension::Extension
impl core::panic::unwind_safe::UnwindSafe for aya::programs::extension::Extension
impl<T, U> core::convert::Into<U> for aya::programs::extension::Extension where U: core::convert::From<T>
pub fn aya::programs::extension::Extension::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::extension::Extension where U: core::convert::Into<T>
pub type aya::programs::extension::Extension::Error = core::convert::Infallible
pub fn aya::programs::extension::Extension::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::extension::Extension where U: core::convert::TryFrom<T>
pub type aya::programs::extension::Extension::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::extension::Extension::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::extension::Extension where T: 'static + ?core::marker::Sized
pub fn aya::programs::extension::Extension::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::extension::Extension where T: ?core::marker::Sized
pub fn aya::programs::extension::Extension::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::extension::Extension where T: ?core::marker::Sized
pub fn aya::programs::extension::Extension::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::extension::Extension
pub fn aya::programs::extension::Extension::from(t: T) -> T
pub struct aya::programs::FEntry
impl aya::programs::fentry::FEntry
pub fn aya::programs::fentry::FEntry::attach(&mut self) -> core::result::Result<aya::programs::fentry::FEntryLinkId, aya::programs::ProgramError>
pub fn aya::programs::fentry::FEntry::load(&mut self, fn_name: &str, btf: &aya_obj::btf::btf::Btf) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::fentry::FEntry
pub fn aya::programs::fentry::FEntry::detach(&mut self, link_id: aya::programs::fentry::FEntryLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::fentry::FEntry::take_link(&mut self, link_id: aya::programs::fentry::FEntryLinkId) -> core::result::Result<aya::programs::fentry::FEntryLink, aya::programs::ProgramError>
impl aya::programs::fentry::FEntry
pub fn aya::programs::fentry::FEntry::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::fentry::FEntry
pub fn aya::programs::fentry::FEntry::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::fentry::FEntry
pub fn aya::programs::fentry::FEntry::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::fentry::FEntry
pub fn aya::programs::fentry::FEntry::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::fentry::FEntry::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::fentry::FEntry
pub fn aya::programs::fentry::FEntry::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::fentry::FEntry
pub fn aya::programs::fentry::FEntry::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::fentry::FEntry
pub fn aya::programs::fentry::FEntry::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::fentry::FEntry
pub type &'a aya::programs::fentry::FEntry::Error = aya::programs::ProgramError
pub fn &'a aya::programs::fentry::FEntry::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::fentry::FEntry, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::fentry::FEntry
pub type &'a mut aya::programs::fentry::FEntry::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::fentry::FEntry::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::fentry::FEntry, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::fentry::FEntry
impl core::marker::Send for aya::programs::fentry::FEntry
impl core::marker::Sync for aya::programs::fentry::FEntry
impl core::marker::Unpin for aya::programs::fentry::FEntry
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::fentry::FEntry
impl core::panic::unwind_safe::UnwindSafe for aya::programs::fentry::FEntry
impl<T, U> core::convert::Into<U> for aya::programs::fentry::FEntry where U: core::convert::From<T>
pub fn aya::programs::fentry::FEntry::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::fentry::FEntry where U: core::convert::Into<T>
pub type aya::programs::fentry::FEntry::Error = core::convert::Infallible
pub fn aya::programs::fentry::FEntry::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::fentry::FEntry where U: core::convert::TryFrom<T>
pub type aya::programs::fentry::FEntry::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::fentry::FEntry::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::fentry::FEntry where T: 'static + ?core::marker::Sized
pub fn aya::programs::fentry::FEntry::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::fentry::FEntry where T: ?core::marker::Sized
pub fn aya::programs::fentry::FEntry::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::fentry::FEntry where T: ?core::marker::Sized
pub fn aya::programs::fentry::FEntry::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::fentry::FEntry
pub fn aya::programs::fentry::FEntry::from(t: T) -> T
pub struct aya::programs::FExit
impl aya::programs::fexit::FExit
pub fn aya::programs::fexit::FExit::attach(&mut self) -> core::result::Result<aya::programs::fexit::FExitLinkId, aya::programs::ProgramError>
pub fn aya::programs::fexit::FExit::load(&mut self, fn_name: &str, btf: &aya_obj::btf::btf::Btf) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::fexit::FExit
pub fn aya::programs::fexit::FExit::detach(&mut self, link_id: aya::programs::fexit::FExitLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::fexit::FExit::take_link(&mut self, link_id: aya::programs::fexit::FExitLinkId) -> core::result::Result<aya::programs::fexit::FExitLink, aya::programs::ProgramError>
impl aya::programs::fexit::FExit
pub fn aya::programs::fexit::FExit::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::fexit::FExit
pub fn aya::programs::fexit::FExit::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::fexit::FExit
pub fn aya::programs::fexit::FExit::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::fexit::FExit
pub fn aya::programs::fexit::FExit::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::fexit::FExit::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::fexit::FExit
pub fn aya::programs::fexit::FExit::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::fexit::FExit
pub fn aya::programs::fexit::FExit::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::fexit::FExit
pub fn aya::programs::fexit::FExit::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::fexit::FExit
pub type &'a aya::programs::fexit::FExit::Error = aya::programs::ProgramError
pub fn &'a aya::programs::fexit::FExit::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::fexit::FExit, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::fexit::FExit
pub type &'a mut aya::programs::fexit::FExit::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::fexit::FExit::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::fexit::FExit, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::fexit::FExit
impl core::marker::Send for aya::programs::fexit::FExit
impl core::marker::Sync for aya::programs::fexit::FExit
impl core::marker::Unpin for aya::programs::fexit::FExit
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::fexit::FExit
impl core::panic::unwind_safe::UnwindSafe for aya::programs::fexit::FExit
impl<T, U> core::convert::Into<U> for aya::programs::fexit::FExit where U: core::convert::From<T>
pub fn aya::programs::fexit::FExit::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::fexit::FExit where U: core::convert::Into<T>
pub type aya::programs::fexit::FExit::Error = core::convert::Infallible
pub fn aya::programs::fexit::FExit::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::fexit::FExit where U: core::convert::TryFrom<T>
pub type aya::programs::fexit::FExit::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::fexit::FExit::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::fexit::FExit where T: 'static + ?core::marker::Sized
pub fn aya::programs::fexit::FExit::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::fexit::FExit where T: ?core::marker::Sized
pub fn aya::programs::fexit::FExit::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::fexit::FExit where T: ?core::marker::Sized
pub fn aya::programs::fexit::FExit::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::fexit::FExit
pub fn aya::programs::fexit::FExit::from(t: T) -> T
pub struct aya::programs::Iter
impl aya::programs::iter::Iter
pub fn aya::programs::iter::Iter::attach(&mut self) -> core::result::Result<aya::programs::iter::IterLinkId, aya::programs::ProgramError>
pub fn aya::programs::iter::Iter::load(&mut self, iter_type: &str, btf: &aya_obj::btf::btf::Btf) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::iter::Iter
pub fn aya::programs::iter::Iter::detach(&mut self, link_id: aya::programs::iter::IterLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::iter::Iter::take_link(&mut self, link_id: aya::programs::iter::IterLinkId) -> core::result::Result<aya::programs::iter::IterLink, aya::programs::ProgramError>
impl aya::programs::iter::Iter
pub fn aya::programs::iter::Iter::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::iter::Iter
pub fn aya::programs::iter::Iter::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::iter::Iter
pub fn aya::programs::iter::Iter::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::iter::Iter
pub fn aya::programs::iter::Iter::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::iter::Iter::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::iter::Iter
pub fn aya::programs::iter::Iter::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::iter::Iter
pub fn aya::programs::iter::Iter::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::iter::Iter
pub fn aya::programs::iter::Iter::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::iter::Iter
pub type &'a aya::programs::iter::Iter::Error = aya::programs::ProgramError
pub fn &'a aya::programs::iter::Iter::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::iter::Iter, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::iter::Iter
pub type &'a mut aya::programs::iter::Iter::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::iter::Iter::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::iter::Iter, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::iter::Iter
impl core::marker::Send for aya::programs::iter::Iter
impl core::marker::Sync for aya::programs::iter::Iter
impl core::marker::Unpin for aya::programs::iter::Iter
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::iter::Iter
impl core::panic::unwind_safe::UnwindSafe for aya::programs::iter::Iter
impl<T, U> core::convert::Into<U> for aya::programs::iter::Iter where U: core::convert::From<T>
pub fn aya::programs::iter::Iter::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::iter::Iter where U: core::convert::Into<T>
pub type aya::programs::iter::Iter::Error = core::convert::Infallible
pub fn aya::programs::iter::Iter::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::iter::Iter where U: core::convert::TryFrom<T>
pub type aya::programs::iter::Iter::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::iter::Iter::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::iter::Iter where T: 'static + ?core::marker::Sized
pub fn aya::programs::iter::Iter::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::iter::Iter where T: ?core::marker::Sized
pub fn aya::programs::iter::Iter::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::iter::Iter where T: ?core::marker::Sized
pub fn aya::programs::iter::Iter::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::iter::Iter
pub fn aya::programs::iter::Iter::from(t: T) -> T
pub struct aya::programs::KProbe
impl aya::programs::kprobe::KProbe
pub fn aya::programs::kprobe::KProbe::attach<T: core::convert::AsRef<std::ffi::os_str::OsStr>>(&mut self, fn_name: T, offset: u64) -> core::result::Result<aya::programs::kprobe::KProbeLinkId, aya::programs::ProgramError>
pub fn aya::programs::kprobe::KProbe::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P, kind: aya::programs::ProbeKind) -> core::result::Result<Self, aya::programs::ProgramError>
pub fn aya::programs::kprobe::KProbe::kind(&self) -> aya::programs::ProbeKind
pub fn aya::programs::kprobe::KProbe::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::kprobe::KProbe
pub fn aya::programs::kprobe::KProbe::detach(&mut self, link_id: aya::programs::kprobe::KProbeLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::kprobe::KProbe::take_link(&mut self, link_id: aya::programs::kprobe::KProbeLinkId) -> core::result::Result<aya::programs::kprobe::KProbeLink, aya::programs::ProgramError>
impl aya::programs::kprobe::KProbe
pub fn aya::programs::kprobe::KProbe::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::kprobe::KProbe
pub fn aya::programs::kprobe::KProbe::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::kprobe::KProbe
pub fn aya::programs::kprobe::KProbe::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::kprobe::KProbe::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::kprobe::KProbe
pub fn aya::programs::kprobe::KProbe::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::kprobe::KProbe
pub fn aya::programs::kprobe::KProbe::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::kprobe::KProbe
pub fn aya::programs::kprobe::KProbe::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::kprobe::KProbe
pub type &'a aya::programs::kprobe::KProbe::Error = aya::programs::ProgramError
pub fn &'a aya::programs::kprobe::KProbe::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::kprobe::KProbe, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::kprobe::KProbe
pub type &'a mut aya::programs::kprobe::KProbe::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::kprobe::KProbe::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::kprobe::KProbe, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::kprobe::KProbe
impl core::marker::Send for aya::programs::kprobe::KProbe
impl core::marker::Sync for aya::programs::kprobe::KProbe
impl core::marker::Unpin for aya::programs::kprobe::KProbe
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::kprobe::KProbe
impl core::panic::unwind_safe::UnwindSafe for aya::programs::kprobe::KProbe
impl<T, U> core::convert::Into<U> for aya::programs::kprobe::KProbe where U: core::convert::From<T>
pub fn aya::programs::kprobe::KProbe::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::kprobe::KProbe where U: core::convert::Into<T>
pub type aya::programs::kprobe::KProbe::Error = core::convert::Infallible
pub fn aya::programs::kprobe::KProbe::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::kprobe::KProbe where U: core::convert::TryFrom<T>
pub type aya::programs::kprobe::KProbe::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::kprobe::KProbe::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::kprobe::KProbe where T: 'static + ?core::marker::Sized
pub fn aya::programs::kprobe::KProbe::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::kprobe::KProbe where T: ?core::marker::Sized
pub fn aya::programs::kprobe::KProbe::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::kprobe::KProbe where T: ?core::marker::Sized
pub fn aya::programs::kprobe::KProbe::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::kprobe::KProbe
pub fn aya::programs::kprobe::KProbe::from(t: T) -> T
pub struct aya::programs::LinkOrder
impl aya::programs::links::LinkOrder
pub fn aya::programs::links::LinkOrder::after_link<L: aya::programs::MultiProgLink>(link: &L) -> core::result::Result<Self, aya::programs::links::LinkError>
pub fn aya::programs::links::LinkOrder::after_program<P: aya::programs::MultiProgram>(program: &P) -> core::result::Result<Self, aya::programs::ProgramError>
pub fn aya::programs::links::LinkOrder::after_program_id(id: aya::programs::ProgramId) -> Self
pub fn aya::programs::links::LinkOrder::before_link<L: aya::programs::MultiProgLink>(link: &L) -> core::result::Result<Self, aya::programs::links::LinkError>
pub fn aya::programs::links::LinkOrder::before_program<P: aya::programs::MultiProgram>(program: &P) -> core::result::Result<Self, aya::programs::ProgramError>
pub fn aya::programs::links::LinkOrder::before_program_id(id: aya::programs::ProgramId) -> Self
pub fn aya::programs::links::LinkOrder::first() -> Self
pub fn aya::programs::links::LinkOrder::last() -> Self
impl core::default::Default for aya::programs::links::LinkOrder
pub fn aya::programs::links::LinkOrder::default() -> Self
impl core::fmt::Debug for aya::programs::links::LinkOrder
pub fn aya::programs::links::LinkOrder::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::links::LinkOrder
impl core::marker::Send for aya::programs::links::LinkOrder
impl core::marker::Sync for aya::programs::links::LinkOrder
impl core::marker::Unpin for aya::programs::links::LinkOrder
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::links::LinkOrder
impl core::panic::unwind_safe::UnwindSafe for aya::programs::links::LinkOrder
impl<T, U> core::convert::Into<U> for aya::programs::links::LinkOrder where U: core::convert::From<T>
pub fn aya::programs::links::LinkOrder::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::links::LinkOrder where U: core::convert::Into<T>
pub type aya::programs::links::LinkOrder::Error = core::convert::Infallible
pub fn aya::programs::links::LinkOrder::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::links::LinkOrder where U: core::convert::TryFrom<T>
pub type aya::programs::links::LinkOrder::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::links::LinkOrder::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::links::LinkOrder where T: 'static + ?core::marker::Sized
pub fn aya::programs::links::LinkOrder::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::links::LinkOrder where T: ?core::marker::Sized
pub fn aya::programs::links::LinkOrder::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::links::LinkOrder where T: ?core::marker::Sized
pub fn aya::programs::links::LinkOrder::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::links::LinkOrder
pub fn aya::programs::links::LinkOrder::from(t: T) -> T
pub struct aya::programs::LircMode2
impl aya::programs::lirc_mode2::LircMode2
pub fn aya::programs::lirc_mode2::LircMode2::attach<T: std::os::fd::owned::AsFd>(&mut self, lircdev: T) -> core::result::Result<aya::programs::lirc_mode2::LircLinkId, aya::programs::ProgramError>
pub fn aya::programs::lirc_mode2::LircMode2::detach(&mut self, link_id: aya::programs::lirc_mode2::LircLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::lirc_mode2::LircMode2::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::lirc_mode2::LircMode2::query<T: std::os::fd::owned::AsFd>(target_fd: T) -> core::result::Result<alloc::vec::Vec<aya::programs::lirc_mode2::LircLink>, aya::programs::ProgramError>
pub fn aya::programs::lirc_mode2::LircMode2::take_link(&mut self, link_id: aya::programs::lirc_mode2::LircLinkId) -> core::result::Result<aya::programs::lirc_mode2::LircLink, aya::programs::ProgramError>
impl aya::programs::lirc_mode2::LircMode2
pub fn aya::programs::lirc_mode2::LircMode2::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::lirc_mode2::LircMode2
pub fn aya::programs::lirc_mode2::LircMode2::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::lirc_mode2::LircMode2
pub fn aya::programs::lirc_mode2::LircMode2::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::lirc_mode2::LircMode2
pub fn aya::programs::lirc_mode2::LircMode2::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::lirc_mode2::LircMode2::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::lirc_mode2::LircMode2
pub fn aya::programs::lirc_mode2::LircMode2::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::lirc_mode2::LircMode2
pub fn aya::programs::lirc_mode2::LircMode2::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::lirc_mode2::LircMode2
pub fn aya::programs::lirc_mode2::LircMode2::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::lirc_mode2::LircMode2
pub type &'a aya::programs::lirc_mode2::LircMode2::Error = aya::programs::ProgramError
pub fn &'a aya::programs::lirc_mode2::LircMode2::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::lirc_mode2::LircMode2, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::lirc_mode2::LircMode2
pub type &'a mut aya::programs::lirc_mode2::LircMode2::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::lirc_mode2::LircMode2::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::lirc_mode2::LircMode2, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::lirc_mode2::LircMode2
impl core::marker::Send for aya::programs::lirc_mode2::LircMode2
impl core::marker::Sync for aya::programs::lirc_mode2::LircMode2
impl core::marker::Unpin for aya::programs::lirc_mode2::LircMode2
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::lirc_mode2::LircMode2
impl core::panic::unwind_safe::UnwindSafe for aya::programs::lirc_mode2::LircMode2
impl<T, U> core::convert::Into<U> for aya::programs::lirc_mode2::LircMode2 where U: core::convert::From<T>
pub fn aya::programs::lirc_mode2::LircMode2::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::lirc_mode2::LircMode2 where U: core::convert::Into<T>
pub type aya::programs::lirc_mode2::LircMode2::Error = core::convert::Infallible
pub fn aya::programs::lirc_mode2::LircMode2::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::lirc_mode2::LircMode2 where U: core::convert::TryFrom<T>
pub type aya::programs::lirc_mode2::LircMode2::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::lirc_mode2::LircMode2::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::lirc_mode2::LircMode2 where T: 'static + ?core::marker::Sized
pub fn aya::programs::lirc_mode2::LircMode2::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::lirc_mode2::LircMode2 where T: ?core::marker::Sized
pub fn aya::programs::lirc_mode2::LircMode2::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::lirc_mode2::LircMode2 where T: ?core::marker::Sized
pub fn aya::programs::lirc_mode2::LircMode2::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::lirc_mode2::LircMode2
pub fn aya::programs::lirc_mode2::LircMode2::from(t: T) -> T
pub struct aya::programs::Lsm
impl aya::programs::lsm::Lsm
pub fn aya::programs::lsm::Lsm::attach(&mut self) -> core::result::Result<aya::programs::lsm::LsmLinkId, aya::programs::ProgramError>
pub fn aya::programs::lsm::Lsm::load(&mut self, lsm_hook_name: &str, btf: &aya_obj::btf::btf::Btf) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::lsm::Lsm
pub fn aya::programs::lsm::Lsm::detach(&mut self, link_id: aya::programs::lsm::LsmLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::lsm::Lsm::take_link(&mut self, link_id: aya::programs::lsm::LsmLinkId) -> core::result::Result<aya::programs::lsm::LsmLink, aya::programs::ProgramError>
impl aya::programs::lsm::Lsm
pub fn aya::programs::lsm::Lsm::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::lsm::Lsm
pub fn aya::programs::lsm::Lsm::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::lsm::Lsm
pub fn aya::programs::lsm::Lsm::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::lsm::Lsm
pub fn aya::programs::lsm::Lsm::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::lsm::Lsm::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::lsm::Lsm
pub fn aya::programs::lsm::Lsm::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::lsm::Lsm
pub fn aya::programs::lsm::Lsm::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::lsm::Lsm
pub fn aya::programs::lsm::Lsm::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::lsm::Lsm
pub type &'a aya::programs::lsm::Lsm::Error = aya::programs::ProgramError
pub fn &'a aya::programs::lsm::Lsm::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::lsm::Lsm, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::lsm::Lsm
pub type &'a mut aya::programs::lsm::Lsm::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::lsm::Lsm::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::lsm::Lsm, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::lsm::Lsm
impl core::marker::Send for aya::programs::lsm::Lsm
impl core::marker::Sync for aya::programs::lsm::Lsm
impl core::marker::Unpin for aya::programs::lsm::Lsm
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::lsm::Lsm
impl core::panic::unwind_safe::UnwindSafe for aya::programs::lsm::Lsm
impl<T, U> core::convert::Into<U> for aya::programs::lsm::Lsm where U: core::convert::From<T>
pub fn aya::programs::lsm::Lsm::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::lsm::Lsm where U: core::convert::Into<T>
pub type aya::programs::lsm::Lsm::Error = core::convert::Infallible
pub fn aya::programs::lsm::Lsm::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::lsm::Lsm where U: core::convert::TryFrom<T>
pub type aya::programs::lsm::Lsm::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::lsm::Lsm::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::lsm::Lsm where T: 'static + ?core::marker::Sized
pub fn aya::programs::lsm::Lsm::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::lsm::Lsm where T: ?core::marker::Sized
pub fn aya::programs::lsm::Lsm::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::lsm::Lsm where T: ?core::marker::Sized
pub fn aya::programs::lsm::Lsm::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::lsm::Lsm
pub fn aya::programs::lsm::Lsm::from(t: T) -> T
pub struct aya::programs::PerfEvent
impl aya::programs::perf_event::PerfEvent
pub fn aya::programs::perf_event::PerfEvent::attach(&mut self, perf_type: aya::programs::perf_event::PerfTypeId, config: u64, scope: aya::programs::perf_event::PerfEventScope, sample_policy: aya::programs::perf_event::SamplePolicy, inherit: bool) -> core::result::Result<aya::programs::perf_event::PerfEventLinkId, aya::programs::ProgramError>
pub fn aya::programs::perf_event::PerfEvent::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::perf_event::PerfEvent
pub fn aya::programs::perf_event::PerfEvent::detach(&mut self, link_id: aya::programs::perf_event::PerfEventLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::perf_event::PerfEvent::take_link(&mut self, link_id: aya::programs::perf_event::PerfEventLinkId) -> core::result::Result<aya::programs::perf_event::PerfEventLink, aya::programs::ProgramError>
impl aya::programs::perf_event::PerfEvent
pub fn aya::programs::perf_event::PerfEvent::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::perf_event::PerfEvent
pub fn aya::programs::perf_event::PerfEvent::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::perf_event::PerfEvent
pub fn aya::programs::perf_event::PerfEvent::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::perf_event::PerfEvent
pub fn aya::programs::perf_event::PerfEvent::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::perf_event::PerfEvent::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::perf_event::PerfEvent
pub fn aya::programs::perf_event::PerfEvent::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::perf_event::PerfEvent
pub fn aya::programs::perf_event::PerfEvent::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::perf_event::PerfEvent
pub fn aya::programs::perf_event::PerfEvent::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::perf_event::PerfEvent
pub type &'a aya::programs::perf_event::PerfEvent::Error = aya::programs::ProgramError
pub fn &'a aya::programs::perf_event::PerfEvent::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::perf_event::PerfEvent, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::perf_event::PerfEvent
pub type &'a mut aya::programs::perf_event::PerfEvent::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::perf_event::PerfEvent::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::perf_event::PerfEvent, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::perf_event::PerfEvent
impl core::marker::Send for aya::programs::perf_event::PerfEvent
impl core::marker::Sync for aya::programs::perf_event::PerfEvent
impl core::marker::Unpin for aya::programs::perf_event::PerfEvent
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::perf_event::PerfEvent
impl core::panic::unwind_safe::UnwindSafe for aya::programs::perf_event::PerfEvent
impl<T, U> core::convert::Into<U> for aya::programs::perf_event::PerfEvent where U: core::convert::From<T>
pub fn aya::programs::perf_event::PerfEvent::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::perf_event::PerfEvent where U: core::convert::Into<T>
pub type aya::programs::perf_event::PerfEvent::Error = core::convert::Infallible
pub fn aya::programs::perf_event::PerfEvent::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::perf_event::PerfEvent where U: core::convert::TryFrom<T>
pub type aya::programs::perf_event::PerfEvent::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::perf_event::PerfEvent::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::perf_event::PerfEvent where T: 'static + ?core::marker::Sized
pub fn aya::programs::perf_event::PerfEvent::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::perf_event::PerfEvent where T: ?core::marker::Sized
pub fn aya::programs::perf_event::PerfEvent::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::perf_event::PerfEvent where T: ?core::marker::Sized
pub fn aya::programs::perf_event::PerfEvent::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::perf_event::PerfEvent
pub fn aya::programs::perf_event::PerfEvent::from(t: T) -> T
pub struct aya::programs::ProgramFd(_)
impl aya::programs::ProgramFd
pub fn aya::programs::ProgramFd::try_clone(&self) -> std::io::error::Result<Self>
impl core::fmt::Debug for aya::programs::ProgramFd
pub fn aya::programs::ProgramFd::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl std::os::fd::owned::AsFd for aya::programs::ProgramFd
pub fn aya::programs::ProgramFd::as_fd(&self) -> std::os::fd::owned::BorrowedFd<'_>
impl core::marker::Freeze for aya::programs::ProgramFd
impl core::marker::Send for aya::programs::ProgramFd
impl core::marker::Sync for aya::programs::ProgramFd
impl core::marker::Unpin for aya::programs::ProgramFd
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::ProgramFd
impl core::panic::unwind_safe::UnwindSafe for aya::programs::ProgramFd
impl<T, U> core::convert::Into<U> for aya::programs::ProgramFd where U: core::convert::From<T>
pub fn aya::programs::ProgramFd::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::ProgramFd where U: core::convert::Into<T>
pub type aya::programs::ProgramFd::Error = core::convert::Infallible
pub fn aya::programs::ProgramFd::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::ProgramFd where U: core::convert::TryFrom<T>
pub type aya::programs::ProgramFd::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::ProgramFd::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::ProgramFd where T: 'static + ?core::marker::Sized
pub fn aya::programs::ProgramFd::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::ProgramFd where T: ?core::marker::Sized
pub fn aya::programs::ProgramFd::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::ProgramFd where T: ?core::marker::Sized
pub fn aya::programs::ProgramFd::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::ProgramFd
pub fn aya::programs::ProgramFd::from(t: T) -> T
pub struct aya::programs::ProgramId(_)
impl aya::programs::ProgramId
pub unsafe fn aya::programs::ProgramId::new(id: u32) -> Self
impl core::marker::Freeze for aya::programs::ProgramId
impl core::marker::Send for aya::programs::ProgramId
impl core::marker::Sync for aya::programs::ProgramId
impl core::marker::Unpin for aya::programs::ProgramId
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::ProgramId
impl core::panic::unwind_safe::UnwindSafe for aya::programs::ProgramId
impl<T, U> core::convert::Into<U> for aya::programs::ProgramId where U: core::convert::From<T>
pub fn aya::programs::ProgramId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::ProgramId where U: core::convert::Into<T>
pub type aya::programs::ProgramId::Error = core::convert::Infallible
pub fn aya::programs::ProgramId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::ProgramId where U: core::convert::TryFrom<T>
pub type aya::programs::ProgramId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::ProgramId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::ProgramId where T: 'static + ?core::marker::Sized
pub fn aya::programs::ProgramId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::ProgramId where T: ?core::marker::Sized
pub fn aya::programs::ProgramId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::ProgramId where T: ?core::marker::Sized
pub fn aya::programs::ProgramId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::ProgramId
pub fn aya::programs::ProgramId::from(t: T) -> T
pub struct aya::programs::ProgramInfo(_)
impl aya::programs::ProgramInfo
pub fn aya::programs::ProgramInfo::btf_id(&self) -> core::option::Option<u32>
pub fn aya::programs::ProgramInfo::created_by_uid(&self) -> core::option::Option<u32>
pub fn aya::programs::ProgramInfo::fd(&self) -> core::result::Result<aya::programs::ProgramFd, aya::programs::ProgramError>
pub fn aya::programs::ProgramInfo::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
pub fn aya::programs::ProgramInfo::gpl_compatible(&self) -> core::option::Option<bool>
pub fn aya::programs::ProgramInfo::id(&self) -> u32
pub fn aya::programs::ProgramInfo::loaded_at(&self) -> core::option::Option<std::time::SystemTime>
pub fn aya::programs::ProgramInfo::map_ids(&self) -> core::result::Result<core::option::Option<alloc::vec::Vec<u32>>, aya::programs::ProgramError>
pub fn aya::programs::ProgramInfo::memory_locked(&self) -> core::result::Result<u32, aya::programs::ProgramError>
pub fn aya::programs::ProgramInfo::name(&self) -> &[u8]
pub fn aya::programs::ProgramInfo::name_as_str(&self) -> core::option::Option<&str>
pub fn aya::programs::ProgramInfo::program_type(&self) -> core::result::Result<aya::programs::ProgramType, aya::programs::ProgramError>
pub fn aya::programs::ProgramInfo::run_count(&self) -> u64
pub fn aya::programs::ProgramInfo::run_time(&self) -> core::time::Duration
pub fn aya::programs::ProgramInfo::size_jitted(&self) -> u32
pub fn aya::programs::ProgramInfo::size_translated(&self) -> core::option::Option<u32>
pub fn aya::programs::ProgramInfo::tag(&self) -> u64
pub fn aya::programs::ProgramInfo::verified_instruction_count(&self) -> core::option::Option<u32>
impl core::fmt::Debug for aya::programs::ProgramInfo
pub fn aya::programs::ProgramInfo::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::programs::ProgramInfo
impl core::marker::Send for aya::programs::ProgramInfo
impl core::marker::Sync for aya::programs::ProgramInfo
impl core::marker::Unpin for aya::programs::ProgramInfo
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::ProgramInfo
impl core::panic::unwind_safe::UnwindSafe for aya::programs::ProgramInfo
impl<T, U> core::convert::Into<U> for aya::programs::ProgramInfo where U: core::convert::From<T>
pub fn aya::programs::ProgramInfo::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::ProgramInfo where U: core::convert::Into<T>
pub type aya::programs::ProgramInfo::Error = core::convert::Infallible
pub fn aya::programs::ProgramInfo::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::ProgramInfo where U: core::convert::TryFrom<T>
pub type aya::programs::ProgramInfo::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::ProgramInfo::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::ProgramInfo where T: 'static + ?core::marker::Sized
pub fn aya::programs::ProgramInfo::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::ProgramInfo where T: ?core::marker::Sized
pub fn aya::programs::ProgramInfo::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::ProgramInfo where T: ?core::marker::Sized
pub fn aya::programs::ProgramInfo::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::ProgramInfo
pub fn aya::programs::ProgramInfo::from(t: T) -> T
pub struct aya::programs::RawTracePoint
impl aya::programs::raw_trace_point::RawTracePoint
pub fn aya::programs::raw_trace_point::RawTracePoint::attach(&mut self, tp_name: &str) -> core::result::Result<aya::programs::raw_trace_point::RawTracePointLinkId, aya::programs::ProgramError>
pub fn aya::programs::raw_trace_point::RawTracePoint::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::raw_trace_point::RawTracePoint
pub fn aya::programs::raw_trace_point::RawTracePoint::detach(&mut self, link_id: aya::programs::raw_trace_point::RawTracePointLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::raw_trace_point::RawTracePoint::take_link(&mut self, link_id: aya::programs::raw_trace_point::RawTracePointLinkId) -> core::result::Result<aya::programs::raw_trace_point::RawTracePointLink, aya::programs::ProgramError>
impl aya::programs::raw_trace_point::RawTracePoint
pub fn aya::programs::raw_trace_point::RawTracePoint::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::raw_trace_point::RawTracePoint
pub fn aya::programs::raw_trace_point::RawTracePoint::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::raw_trace_point::RawTracePoint
pub fn aya::programs::raw_trace_point::RawTracePoint::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::raw_trace_point::RawTracePoint
pub fn aya::programs::raw_trace_point::RawTracePoint::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::raw_trace_point::RawTracePoint::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::raw_trace_point::RawTracePoint
pub fn aya::programs::raw_trace_point::RawTracePoint::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::raw_trace_point::RawTracePoint
pub fn aya::programs::raw_trace_point::RawTracePoint::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::raw_trace_point::RawTracePoint
pub fn aya::programs::raw_trace_point::RawTracePoint::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::raw_trace_point::RawTracePoint
pub type &'a aya::programs::raw_trace_point::RawTracePoint::Error = aya::programs::ProgramError
pub fn &'a aya::programs::raw_trace_point::RawTracePoint::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::raw_trace_point::RawTracePoint, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::raw_trace_point::RawTracePoint
pub type &'a mut aya::programs::raw_trace_point::RawTracePoint::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::raw_trace_point::RawTracePoint::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::raw_trace_point::RawTracePoint, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::raw_trace_point::RawTracePoint
impl core::marker::Send for aya::programs::raw_trace_point::RawTracePoint
impl core::marker::Sync for aya::programs::raw_trace_point::RawTracePoint
impl core::marker::Unpin for aya::programs::raw_trace_point::RawTracePoint
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::raw_trace_point::RawTracePoint
impl core::panic::unwind_safe::UnwindSafe for aya::programs::raw_trace_point::RawTracePoint
impl<T, U> core::convert::Into<U> for aya::programs::raw_trace_point::RawTracePoint where U: core::convert::From<T>
pub fn aya::programs::raw_trace_point::RawTracePoint::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::raw_trace_point::RawTracePoint where U: core::convert::Into<T>
pub type aya::programs::raw_trace_point::RawTracePoint::Error = core::convert::Infallible
pub fn aya::programs::raw_trace_point::RawTracePoint::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::raw_trace_point::RawTracePoint where U: core::convert::TryFrom<T>
pub type aya::programs::raw_trace_point::RawTracePoint::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::raw_trace_point::RawTracePoint::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::raw_trace_point::RawTracePoint where T: 'static + ?core::marker::Sized
pub fn aya::programs::raw_trace_point::RawTracePoint::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::raw_trace_point::RawTracePoint where T: ?core::marker::Sized
pub fn aya::programs::raw_trace_point::RawTracePoint::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::raw_trace_point::RawTracePoint where T: ?core::marker::Sized
pub fn aya::programs::raw_trace_point::RawTracePoint::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::raw_trace_point::RawTracePoint
pub fn aya::programs::raw_trace_point::RawTracePoint::from(t: T) -> T
pub struct aya::programs::SchedClassifier
impl aya::programs::tc::SchedClassifier
pub fn aya::programs::tc::SchedClassifier::attach(&mut self, interface: &str, attach_type: aya::programs::tc::TcAttachType) -> core::result::Result<aya::programs::tc::SchedClassifierLinkId, aya::programs::ProgramError>
pub fn aya::programs::tc::SchedClassifier::attach_to_link(&mut self, link: aya::programs::tc::SchedClassifierLink) -> core::result::Result<aya::programs::tc::SchedClassifierLinkId, aya::programs::ProgramError>
pub fn aya::programs::tc::SchedClassifier::attach_with_options(&mut self, interface: &str, attach_type: aya::programs::tc::TcAttachType, options: aya::programs::tc::TcAttachOptions) -> core::result::Result<aya::programs::tc::SchedClassifierLinkId, aya::programs::ProgramError>
pub fn aya::programs::tc::SchedClassifier::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
pub fn aya::programs::tc::SchedClassifier::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::tc::SchedClassifier::query_tcx(interface: &str, attach_type: aya::programs::tc::TcAttachType) -> core::result::Result<(u64, alloc::vec::Vec<aya::programs::ProgramInfo>), aya::programs::ProgramError>
impl aya::programs::tc::SchedClassifier
pub fn aya::programs::tc::SchedClassifier::detach(&mut self, link_id: aya::programs::tc::SchedClassifierLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::tc::SchedClassifier::take_link(&mut self, link_id: aya::programs::tc::SchedClassifierLinkId) -> core::result::Result<aya::programs::tc::SchedClassifierLink, aya::programs::ProgramError>
impl aya::programs::tc::SchedClassifier
pub fn aya::programs::tc::SchedClassifier::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::tc::SchedClassifier
pub fn aya::programs::tc::SchedClassifier::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::tc::SchedClassifier
pub fn aya::programs::tc::SchedClassifier::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::tc::SchedClassifier::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::tc::SchedClassifier
pub fn aya::programs::tc::SchedClassifier::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::MultiProgram for aya::programs::tc::SchedClassifier
pub fn aya::programs::tc::SchedClassifier::fd(&self) -> core::result::Result<std::os::fd::owned::BorrowedFd<'_>, aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::tc::SchedClassifier
pub fn aya::programs::tc::SchedClassifier::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::tc::SchedClassifier
pub fn aya::programs::tc::SchedClassifier::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::tc::SchedClassifier
pub type &'a aya::programs::tc::SchedClassifier::Error = aya::programs::ProgramError
pub fn &'a aya::programs::tc::SchedClassifier::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::tc::SchedClassifier, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::tc::SchedClassifier
pub type &'a mut aya::programs::tc::SchedClassifier::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::tc::SchedClassifier::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::tc::SchedClassifier, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::tc::SchedClassifier
impl core::marker::Send for aya::programs::tc::SchedClassifier
impl core::marker::Sync for aya::programs::tc::SchedClassifier
impl core::marker::Unpin for aya::programs::tc::SchedClassifier
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::tc::SchedClassifier
impl core::panic::unwind_safe::UnwindSafe for aya::programs::tc::SchedClassifier
impl<T, U> core::convert::Into<U> for aya::programs::tc::SchedClassifier where U: core::convert::From<T>
pub fn aya::programs::tc::SchedClassifier::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::tc::SchedClassifier where U: core::convert::Into<T>
pub type aya::programs::tc::SchedClassifier::Error = core::convert::Infallible
pub fn aya::programs::tc::SchedClassifier::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::tc::SchedClassifier where U: core::convert::TryFrom<T>
pub type aya::programs::tc::SchedClassifier::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::tc::SchedClassifier::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::tc::SchedClassifier where T: 'static + ?core::marker::Sized
pub fn aya::programs::tc::SchedClassifier::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::tc::SchedClassifier where T: ?core::marker::Sized
pub fn aya::programs::tc::SchedClassifier::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::tc::SchedClassifier where T: ?core::marker::Sized
pub fn aya::programs::tc::SchedClassifier::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::tc::SchedClassifier
pub fn aya::programs::tc::SchedClassifier::from(t: T) -> T
pub struct aya::programs::SkLookup
impl aya::programs::sk_lookup::SkLookup
pub fn aya::programs::sk_lookup::SkLookup::attach<T: std::os::fd::owned::AsFd>(&mut self, netns: T) -> core::result::Result<aya::programs::sk_lookup::SkLookupLinkId, aya::programs::ProgramError>
pub fn aya::programs::sk_lookup::SkLookup::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::sk_lookup::SkLookup
pub fn aya::programs::sk_lookup::SkLookup::detach(&mut self, link_id: aya::programs::sk_lookup::SkLookupLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::sk_lookup::SkLookup::take_link(&mut self, link_id: aya::programs::sk_lookup::SkLookupLinkId) -> core::result::Result<aya::programs::sk_lookup::SkLookupLink, aya::programs::ProgramError>
impl aya::programs::sk_lookup::SkLookup
pub fn aya::programs::sk_lookup::SkLookup::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::sk_lookup::SkLookup
pub fn aya::programs::sk_lookup::SkLookup::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::sk_lookup::SkLookup
pub fn aya::programs::sk_lookup::SkLookup::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::sk_lookup::SkLookup
pub fn aya::programs::sk_lookup::SkLookup::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::sk_lookup::SkLookup::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::sk_lookup::SkLookup
pub fn aya::programs::sk_lookup::SkLookup::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::sk_lookup::SkLookup
pub fn aya::programs::sk_lookup::SkLookup::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::sk_lookup::SkLookup
pub fn aya::programs::sk_lookup::SkLookup::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::sk_lookup::SkLookup
pub type &'a aya::programs::sk_lookup::SkLookup::Error = aya::programs::ProgramError
pub fn &'a aya::programs::sk_lookup::SkLookup::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::sk_lookup::SkLookup, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::sk_lookup::SkLookup
pub type &'a mut aya::programs::sk_lookup::SkLookup::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::sk_lookup::SkLookup::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::sk_lookup::SkLookup, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::sk_lookup::SkLookup
impl core::marker::Send for aya::programs::sk_lookup::SkLookup
impl core::marker::Sync for aya::programs::sk_lookup::SkLookup
impl core::marker::Unpin for aya::programs::sk_lookup::SkLookup
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::sk_lookup::SkLookup
impl core::panic::unwind_safe::UnwindSafe for aya::programs::sk_lookup::SkLookup
impl<T, U> core::convert::Into<U> for aya::programs::sk_lookup::SkLookup where U: core::convert::From<T>
pub fn aya::programs::sk_lookup::SkLookup::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::sk_lookup::SkLookup where U: core::convert::Into<T>
pub type aya::programs::sk_lookup::SkLookup::Error = core::convert::Infallible
pub fn aya::programs::sk_lookup::SkLookup::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::sk_lookup::SkLookup where U: core::convert::TryFrom<T>
pub type aya::programs::sk_lookup::SkLookup::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::sk_lookup::SkLookup::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::sk_lookup::SkLookup where T: 'static + ?core::marker::Sized
pub fn aya::programs::sk_lookup::SkLookup::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::sk_lookup::SkLookup where T: ?core::marker::Sized
pub fn aya::programs::sk_lookup::SkLookup::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::sk_lookup::SkLookup where T: ?core::marker::Sized
pub fn aya::programs::sk_lookup::SkLookup::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::sk_lookup::SkLookup
pub fn aya::programs::sk_lookup::SkLookup::from(t: T) -> T
pub struct aya::programs::SkMsg
impl aya::programs::sk_msg::SkMsg
pub fn aya::programs::sk_msg::SkMsg::attach(&mut self, map: &aya::maps::sock::SockMapFd) -> core::result::Result<aya::programs::sk_msg::SkMsgLinkId, aya::programs::ProgramError>
pub fn aya::programs::sk_msg::SkMsg::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::sk_msg::SkMsg
pub fn aya::programs::sk_msg::SkMsg::detach(&mut self, link_id: aya::programs::sk_msg::SkMsgLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::sk_msg::SkMsg::take_link(&mut self, link_id: aya::programs::sk_msg::SkMsgLinkId) -> core::result::Result<aya::programs::sk_msg::SkMsgLink, aya::programs::ProgramError>
impl aya::programs::sk_msg::SkMsg
pub fn aya::programs::sk_msg::SkMsg::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::sk_msg::SkMsg
pub fn aya::programs::sk_msg::SkMsg::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::sk_msg::SkMsg
pub fn aya::programs::sk_msg::SkMsg::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::sk_msg::SkMsg
pub fn aya::programs::sk_msg::SkMsg::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::sk_msg::SkMsg::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::sk_msg::SkMsg
pub fn aya::programs::sk_msg::SkMsg::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::sk_msg::SkMsg
pub fn aya::programs::sk_msg::SkMsg::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::sk_msg::SkMsg
pub fn aya::programs::sk_msg::SkMsg::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::sk_msg::SkMsg
pub type &'a aya::programs::sk_msg::SkMsg::Error = aya::programs::ProgramError
pub fn &'a aya::programs::sk_msg::SkMsg::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::sk_msg::SkMsg, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::sk_msg::SkMsg
pub type &'a mut aya::programs::sk_msg::SkMsg::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::sk_msg::SkMsg::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::sk_msg::SkMsg, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::sk_msg::SkMsg
impl core::marker::Send for aya::programs::sk_msg::SkMsg
impl core::marker::Sync for aya::programs::sk_msg::SkMsg
impl core::marker::Unpin for aya::programs::sk_msg::SkMsg
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::sk_msg::SkMsg
impl core::panic::unwind_safe::UnwindSafe for aya::programs::sk_msg::SkMsg
impl<T, U> core::convert::Into<U> for aya::programs::sk_msg::SkMsg where U: core::convert::From<T>
pub fn aya::programs::sk_msg::SkMsg::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::sk_msg::SkMsg where U: core::convert::Into<T>
pub type aya::programs::sk_msg::SkMsg::Error = core::convert::Infallible
pub fn aya::programs::sk_msg::SkMsg::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::sk_msg::SkMsg where U: core::convert::TryFrom<T>
pub type aya::programs::sk_msg::SkMsg::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::sk_msg::SkMsg::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::sk_msg::SkMsg where T: 'static + ?core::marker::Sized
pub fn aya::programs::sk_msg::SkMsg::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::sk_msg::SkMsg where T: ?core::marker::Sized
pub fn aya::programs::sk_msg::SkMsg::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::sk_msg::SkMsg where T: ?core::marker::Sized
pub fn aya::programs::sk_msg::SkMsg::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::sk_msg::SkMsg
pub fn aya::programs::sk_msg::SkMsg::from(t: T) -> T
pub struct aya::programs::SkSkb
impl aya::programs::sk_skb::SkSkb
pub fn aya::programs::sk_skb::SkSkb::attach(&mut self, map: &aya::maps::sock::SockMapFd) -> core::result::Result<aya::programs::sk_skb::SkSkbLinkId, aya::programs::ProgramError>
pub fn aya::programs::sk_skb::SkSkb::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P, kind: aya::programs::sk_skb::SkSkbKind) -> core::result::Result<Self, aya::programs::ProgramError>
pub fn aya::programs::sk_skb::SkSkb::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::sk_skb::SkSkb
pub fn aya::programs::sk_skb::SkSkb::detach(&mut self, link_id: aya::programs::sk_skb::SkSkbLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::sk_skb::SkSkb::take_link(&mut self, link_id: aya::programs::sk_skb::SkSkbLinkId) -> core::result::Result<aya::programs::sk_skb::SkSkbLink, aya::programs::ProgramError>
impl aya::programs::sk_skb::SkSkb
pub fn aya::programs::sk_skb::SkSkb::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::sk_skb::SkSkb
pub fn aya::programs::sk_skb::SkSkb::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::sk_skb::SkSkb
pub fn aya::programs::sk_skb::SkSkb::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::sk_skb::SkSkb::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::sk_skb::SkSkb
pub fn aya::programs::sk_skb::SkSkb::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::sk_skb::SkSkb
pub fn aya::programs::sk_skb::SkSkb::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::sk_skb::SkSkb
pub fn aya::programs::sk_skb::SkSkb::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::sk_skb::SkSkb
pub type &'a aya::programs::sk_skb::SkSkb::Error = aya::programs::ProgramError
pub fn &'a aya::programs::sk_skb::SkSkb::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::sk_skb::SkSkb, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::sk_skb::SkSkb
pub type &'a mut aya::programs::sk_skb::SkSkb::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::sk_skb::SkSkb::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::sk_skb::SkSkb, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::sk_skb::SkSkb
impl core::marker::Send for aya::programs::sk_skb::SkSkb
impl core::marker::Sync for aya::programs::sk_skb::SkSkb
impl core::marker::Unpin for aya::programs::sk_skb::SkSkb
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::sk_skb::SkSkb
impl core::panic::unwind_safe::UnwindSafe for aya::programs::sk_skb::SkSkb
impl<T, U> core::convert::Into<U> for aya::programs::sk_skb::SkSkb where U: core::convert::From<T>
pub fn aya::programs::sk_skb::SkSkb::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::sk_skb::SkSkb where U: core::convert::Into<T>
pub type aya::programs::sk_skb::SkSkb::Error = core::convert::Infallible
pub fn aya::programs::sk_skb::SkSkb::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::sk_skb::SkSkb where U: core::convert::TryFrom<T>
pub type aya::programs::sk_skb::SkSkb::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::sk_skb::SkSkb::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::sk_skb::SkSkb where T: 'static + ?core::marker::Sized
pub fn aya::programs::sk_skb::SkSkb::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::sk_skb::SkSkb where T: ?core::marker::Sized
pub fn aya::programs::sk_skb::SkSkb::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::sk_skb::SkSkb where T: ?core::marker::Sized
pub fn aya::programs::sk_skb::SkSkb::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::sk_skb::SkSkb
pub fn aya::programs::sk_skb::SkSkb::from(t: T) -> T
pub struct aya::programs::SockOps
impl aya::programs::sock_ops::SockOps
pub fn aya::programs::sock_ops::SockOps::attach<T: std::os::fd::owned::AsFd>(&mut self, cgroup: T, mode: aya::programs::links::CgroupAttachMode) -> core::result::Result<aya::programs::sock_ops::SockOpsLinkId, aya::programs::ProgramError>
pub fn aya::programs::sock_ops::SockOps::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::sock_ops::SockOps
pub fn aya::programs::sock_ops::SockOps::detach(&mut self, link_id: aya::programs::sock_ops::SockOpsLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::sock_ops::SockOps::take_link(&mut self, link_id: aya::programs::sock_ops::SockOpsLinkId) -> core::result::Result<aya::programs::sock_ops::SockOpsLink, aya::programs::ProgramError>
impl aya::programs::sock_ops::SockOps
pub fn aya::programs::sock_ops::SockOps::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::sock_ops::SockOps
pub fn aya::programs::sock_ops::SockOps::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::sock_ops::SockOps
pub fn aya::programs::sock_ops::SockOps::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::sock_ops::SockOps
pub fn aya::programs::sock_ops::SockOps::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::sock_ops::SockOps::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::sock_ops::SockOps
pub fn aya::programs::sock_ops::SockOps::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::sock_ops::SockOps
pub fn aya::programs::sock_ops::SockOps::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::sock_ops::SockOps
pub fn aya::programs::sock_ops::SockOps::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::sock_ops::SockOps
pub type &'a aya::programs::sock_ops::SockOps::Error = aya::programs::ProgramError
pub fn &'a aya::programs::sock_ops::SockOps::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::sock_ops::SockOps, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::sock_ops::SockOps
pub type &'a mut aya::programs::sock_ops::SockOps::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::sock_ops::SockOps::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::sock_ops::SockOps, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::sock_ops::SockOps
impl core::marker::Send for aya::programs::sock_ops::SockOps
impl core::marker::Sync for aya::programs::sock_ops::SockOps
impl core::marker::Unpin for aya::programs::sock_ops::SockOps
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::sock_ops::SockOps
impl core::panic::unwind_safe::UnwindSafe for aya::programs::sock_ops::SockOps
impl<T, U> core::convert::Into<U> for aya::programs::sock_ops::SockOps where U: core::convert::From<T>
pub fn aya::programs::sock_ops::SockOps::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::sock_ops::SockOps where U: core::convert::Into<T>
pub type aya::programs::sock_ops::SockOps::Error = core::convert::Infallible
pub fn aya::programs::sock_ops::SockOps::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::sock_ops::SockOps where U: core::convert::TryFrom<T>
pub type aya::programs::sock_ops::SockOps::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::sock_ops::SockOps::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::sock_ops::SockOps where T: 'static + ?core::marker::Sized
pub fn aya::programs::sock_ops::SockOps::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::sock_ops::SockOps where T: ?core::marker::Sized
pub fn aya::programs::sock_ops::SockOps::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::sock_ops::SockOps where T: ?core::marker::Sized
pub fn aya::programs::sock_ops::SockOps::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::sock_ops::SockOps
pub fn aya::programs::sock_ops::SockOps::from(t: T) -> T
pub struct aya::programs::SocketFilter
impl aya::programs::socket_filter::SocketFilter
pub fn aya::programs::socket_filter::SocketFilter::attach<T: std::os::fd::owned::AsFd>(&mut self, socket: T) -> core::result::Result<aya::programs::socket_filter::SocketFilterLinkId, aya::programs::ProgramError>
pub fn aya::programs::socket_filter::SocketFilter::detach(&mut self, link_id: aya::programs::socket_filter::SocketFilterLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::socket_filter::SocketFilter::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::socket_filter::SocketFilter::take_link(&mut self, link_id: aya::programs::socket_filter::SocketFilterLinkId) -> core::result::Result<aya::programs::socket_filter::SocketFilterLink, aya::programs::ProgramError>
impl aya::programs::socket_filter::SocketFilter
pub fn aya::programs::socket_filter::SocketFilter::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::socket_filter::SocketFilter
pub fn aya::programs::socket_filter::SocketFilter::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::socket_filter::SocketFilter
pub fn aya::programs::socket_filter::SocketFilter::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::socket_filter::SocketFilter
pub fn aya::programs::socket_filter::SocketFilter::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::socket_filter::SocketFilter::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::socket_filter::SocketFilter
pub fn aya::programs::socket_filter::SocketFilter::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::socket_filter::SocketFilter
pub fn aya::programs::socket_filter::SocketFilter::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::socket_filter::SocketFilter
pub fn aya::programs::socket_filter::SocketFilter::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::socket_filter::SocketFilter
pub type &'a aya::programs::socket_filter::SocketFilter::Error = aya::programs::ProgramError
pub fn &'a aya::programs::socket_filter::SocketFilter::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::socket_filter::SocketFilter, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::socket_filter::SocketFilter
pub type &'a mut aya::programs::socket_filter::SocketFilter::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::socket_filter::SocketFilter::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::socket_filter::SocketFilter, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::socket_filter::SocketFilter
impl core::marker::Send for aya::programs::socket_filter::SocketFilter
impl core::marker::Sync for aya::programs::socket_filter::SocketFilter
impl core::marker::Unpin for aya::programs::socket_filter::SocketFilter
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::socket_filter::SocketFilter
impl core::panic::unwind_safe::UnwindSafe for aya::programs::socket_filter::SocketFilter
impl<T, U> core::convert::Into<U> for aya::programs::socket_filter::SocketFilter where U: core::convert::From<T>
pub fn aya::programs::socket_filter::SocketFilter::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::socket_filter::SocketFilter where U: core::convert::Into<T>
pub type aya::programs::socket_filter::SocketFilter::Error = core::convert::Infallible
pub fn aya::programs::socket_filter::SocketFilter::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::socket_filter::SocketFilter where U: core::convert::TryFrom<T>
pub type aya::programs::socket_filter::SocketFilter::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::socket_filter::SocketFilter::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::socket_filter::SocketFilter where T: 'static + ?core::marker::Sized
pub fn aya::programs::socket_filter::SocketFilter::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::socket_filter::SocketFilter where T: ?core::marker::Sized
pub fn aya::programs::socket_filter::SocketFilter::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::socket_filter::SocketFilter where T: ?core::marker::Sized
pub fn aya::programs::socket_filter::SocketFilter::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::socket_filter::SocketFilter
pub fn aya::programs::socket_filter::SocketFilter::from(t: T) -> T
pub struct aya::programs::TracePoint
impl aya::programs::trace_point::TracePoint
pub fn aya::programs::trace_point::TracePoint::attach(&mut self, category: &str, name: &str) -> core::result::Result<aya::programs::trace_point::TracePointLinkId, aya::programs::ProgramError>
pub fn aya::programs::trace_point::TracePoint::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::trace_point::TracePoint
pub fn aya::programs::trace_point::TracePoint::detach(&mut self, link_id: aya::programs::trace_point::TracePointLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::trace_point::TracePoint::take_link(&mut self, link_id: aya::programs::trace_point::TracePointLinkId) -> core::result::Result<aya::programs::trace_point::TracePointLink, aya::programs::ProgramError>
impl aya::programs::trace_point::TracePoint
pub fn aya::programs::trace_point::TracePoint::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::trace_point::TracePoint
pub fn aya::programs::trace_point::TracePoint::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::programs::ProgramError>
impl aya::programs::trace_point::TracePoint
pub fn aya::programs::trace_point::TracePoint::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::trace_point::TracePoint
pub fn aya::programs::trace_point::TracePoint::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::trace_point::TracePoint::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::trace_point::TracePoint
pub fn aya::programs::trace_point::TracePoint::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::trace_point::TracePoint
pub fn aya::programs::trace_point::TracePoint::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::trace_point::TracePoint
pub fn aya::programs::trace_point::TracePoint::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::trace_point::TracePoint
pub type &'a aya::programs::trace_point::TracePoint::Error = aya::programs::ProgramError
pub fn &'a aya::programs::trace_point::TracePoint::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::trace_point::TracePoint, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::trace_point::TracePoint
pub type &'a mut aya::programs::trace_point::TracePoint::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::trace_point::TracePoint::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::trace_point::TracePoint, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::trace_point::TracePoint
impl core::marker::Send for aya::programs::trace_point::TracePoint
impl core::marker::Sync for aya::programs::trace_point::TracePoint
impl core::marker::Unpin for aya::programs::trace_point::TracePoint
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::trace_point::TracePoint
impl core::panic::unwind_safe::UnwindSafe for aya::programs::trace_point::TracePoint
impl<T, U> core::convert::Into<U> for aya::programs::trace_point::TracePoint where U: core::convert::From<T>
pub fn aya::programs::trace_point::TracePoint::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::trace_point::TracePoint where U: core::convert::Into<T>
pub type aya::programs::trace_point::TracePoint::Error = core::convert::Infallible
pub fn aya::programs::trace_point::TracePoint::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::trace_point::TracePoint where U: core::convert::TryFrom<T>
pub type aya::programs::trace_point::TracePoint::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::trace_point::TracePoint::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::trace_point::TracePoint where T: 'static + ?core::marker::Sized
pub fn aya::programs::trace_point::TracePoint::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::trace_point::TracePoint where T: ?core::marker::Sized
pub fn aya::programs::trace_point::TracePoint::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::trace_point::TracePoint where T: ?core::marker::Sized
pub fn aya::programs::trace_point::TracePoint::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::trace_point::TracePoint
pub fn aya::programs::trace_point::TracePoint::from(t: T) -> T
pub struct aya::programs::UProbe
impl aya::programs::uprobe::UProbe
pub fn aya::programs::uprobe::UProbe::attach<T: core::convert::AsRef<std::path::Path>>(&mut self, fn_name: core::option::Option<&str>, offset: u64, target: T, pid: core::option::Option<libc::unix::pid_t>) -> core::result::Result<aya::programs::uprobe::UProbeLinkId, aya::programs::ProgramError>
pub fn aya::programs::uprobe::UProbe::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P, kind: aya::programs::ProbeKind) -> core::result::Result<Self, aya::programs::ProgramError>
pub fn aya::programs::uprobe::UProbe::kind(&self) -> aya::programs::ProbeKind
pub fn aya::programs::uprobe::UProbe::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::uprobe::UProbe
pub fn aya::programs::uprobe::UProbe::detach(&mut self, link_id: aya::programs::uprobe::UProbeLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::uprobe::UProbe::take_link(&mut self, link_id: aya::programs::uprobe::UProbeLinkId) -> core::result::Result<aya::programs::uprobe::UProbeLink, aya::programs::ProgramError>
impl aya::programs::uprobe::UProbe
pub fn aya::programs::uprobe::UProbe::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::uprobe::UProbe
pub fn aya::programs::uprobe::UProbe::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::uprobe::UProbe
pub fn aya::programs::uprobe::UProbe::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::uprobe::UProbe::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::uprobe::UProbe
pub fn aya::programs::uprobe::UProbe::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::uprobe::UProbe
pub fn aya::programs::uprobe::UProbe::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::uprobe::UProbe
pub fn aya::programs::uprobe::UProbe::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::uprobe::UProbe
pub type &'a aya::programs::uprobe::UProbe::Error = aya::programs::ProgramError
pub fn &'a aya::programs::uprobe::UProbe::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::uprobe::UProbe, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::uprobe::UProbe
pub type &'a mut aya::programs::uprobe::UProbe::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::uprobe::UProbe::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::uprobe::UProbe, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::uprobe::UProbe
impl core::marker::Send for aya::programs::uprobe::UProbe
impl core::marker::Sync for aya::programs::uprobe::UProbe
impl core::marker::Unpin for aya::programs::uprobe::UProbe
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::uprobe::UProbe
impl core::panic::unwind_safe::UnwindSafe for aya::programs::uprobe::UProbe
impl<T, U> core::convert::Into<U> for aya::programs::uprobe::UProbe where U: core::convert::From<T>
pub fn aya::programs::uprobe::UProbe::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::uprobe::UProbe where U: core::convert::Into<T>
pub type aya::programs::uprobe::UProbe::Error = core::convert::Infallible
pub fn aya::programs::uprobe::UProbe::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::uprobe::UProbe where U: core::convert::TryFrom<T>
pub type aya::programs::uprobe::UProbe::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::uprobe::UProbe::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::uprobe::UProbe where T: 'static + ?core::marker::Sized
pub fn aya::programs::uprobe::UProbe::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::uprobe::UProbe where T: ?core::marker::Sized
pub fn aya::programs::uprobe::UProbe::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::uprobe::UProbe where T: ?core::marker::Sized
pub fn aya::programs::uprobe::UProbe::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::uprobe::UProbe
pub fn aya::programs::uprobe::UProbe::from(t: T) -> T
pub struct aya::programs::Xdp
impl aya::programs::xdp::Xdp
pub fn aya::programs::xdp::Xdp::attach(&mut self, interface: &str, flags: aya::programs::xdp::XdpFlags) -> core::result::Result<aya::programs::xdp::XdpLinkId, aya::programs::ProgramError>
pub fn aya::programs::xdp::Xdp::attach_to_if_index(&mut self, if_index: u32, flags: aya::programs::xdp::XdpFlags) -> core::result::Result<aya::programs::xdp::XdpLinkId, aya::programs::ProgramError>
pub fn aya::programs::xdp::Xdp::attach_to_link(&mut self, link: aya::programs::xdp::XdpLink) -> core::result::Result<aya::programs::xdp::XdpLinkId, aya::programs::ProgramError>
pub fn aya::programs::xdp::Xdp::from_pin<P: core::convert::AsRef<std::path::Path>>(path: P, attach_type: aya_obj::programs::xdp::XdpAttachType) -> core::result::Result<Self, aya::programs::ProgramError>
pub fn aya::programs::xdp::Xdp::load(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl aya::programs::xdp::Xdp
pub fn aya::programs::xdp::Xdp::detach(&mut self, link_id: aya::programs::xdp::XdpLinkId) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::xdp::Xdp::take_link(&mut self, link_id: aya::programs::xdp::XdpLinkId) -> core::result::Result<aya::programs::xdp::XdpLink, aya::programs::ProgramError>
impl aya::programs::xdp::Xdp
pub fn aya::programs::xdp::Xdp::fd(&self) -> core::result::Result<&aya::programs::ProgramFd, aya::programs::ProgramError>
impl aya::programs::xdp::Xdp
pub fn aya::programs::xdp::Xdp::info(&self) -> core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>
impl aya::programs::xdp::Xdp
pub fn aya::programs::xdp::Xdp::pin<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<(), aya::pin::PinError>
pub fn aya::programs::xdp::Xdp::unpin(self) -> core::result::Result<(), std::io::error::Error>
impl aya::programs::xdp::Xdp
pub fn aya::programs::xdp::Xdp::unload(&mut self) -> core::result::Result<(), aya::programs::ProgramError>
impl core::fmt::Debug for aya::programs::xdp::Xdp
pub fn aya::programs::xdp::Xdp::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::ops::drop::Drop for aya::programs::xdp::Xdp
pub fn aya::programs::xdp::Xdp::drop(&mut self)
impl<'a> core::convert::TryFrom<&'a aya::programs::Program> for &'a aya::programs::xdp::Xdp
pub type &'a aya::programs::xdp::Xdp::Error = aya::programs::ProgramError
pub fn &'a aya::programs::xdp::Xdp::try_from(program: &'a aya::programs::Program) -> core::result::Result<&'a aya::programs::xdp::Xdp, aya::programs::ProgramError>
impl<'a> core::convert::TryFrom<&'a mut aya::programs::Program> for &'a mut aya::programs::xdp::Xdp
pub type &'a mut aya::programs::xdp::Xdp::Error = aya::programs::ProgramError
pub fn &'a mut aya::programs::xdp::Xdp::try_from(program: &'a mut aya::programs::Program) -> core::result::Result<&'a mut aya::programs::xdp::Xdp, aya::programs::ProgramError>
impl core::marker::Freeze for aya::programs::xdp::Xdp
impl core::marker::Send for aya::programs::xdp::Xdp
impl core::marker::Sync for aya::programs::xdp::Xdp
impl core::marker::Unpin for aya::programs::xdp::Xdp
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::xdp::Xdp
impl core::panic::unwind_safe::UnwindSafe for aya::programs::xdp::Xdp
impl<T, U> core::convert::Into<U> for aya::programs::xdp::Xdp where U: core::convert::From<T>
pub fn aya::programs::xdp::Xdp::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::xdp::Xdp where U: core::convert::Into<T>
pub type aya::programs::xdp::Xdp::Error = core::convert::Infallible
pub fn aya::programs::xdp::Xdp::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::xdp::Xdp where U: core::convert::TryFrom<T>
pub type aya::programs::xdp::Xdp::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::xdp::Xdp::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::programs::xdp::Xdp where T: 'static + ?core::marker::Sized
pub fn aya::programs::xdp::Xdp::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::xdp::Xdp where T: ?core::marker::Sized
pub fn aya::programs::xdp::Xdp::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::xdp::Xdp where T: ?core::marker::Sized
pub fn aya::programs::xdp::Xdp::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::programs::xdp::Xdp
pub fn aya::programs::xdp::Xdp::from(t: T) -> T
pub struct aya::programs::XdpFlags(_)
impl aya::programs::xdp::XdpFlags
pub const aya::programs::xdp::XdpFlags::DRV_MODE: Self
pub const aya::programs::xdp::XdpFlags::HW_MODE: Self
pub const aya::programs::xdp::XdpFlags::REPLACE: Self
pub const aya::programs::xdp::XdpFlags::SKB_MODE: Self
pub const aya::programs::xdp::XdpFlags::UPDATE_IF_NOEXIST: Self
impl aya::programs::xdp::XdpFlags
pub const fn aya::programs::xdp::XdpFlags::all() -> Self
pub const fn aya::programs::xdp::XdpFlags::bits(&self) -> u32
pub const fn aya::programs::xdp::XdpFlags::complement(self) -> Self
pub const fn aya::programs::xdp::XdpFlags::contains(&self, other: Self) -> bool
pub const fn aya::programs::xdp::XdpFlags::difference(self, other: Self) -> Self
pub const fn aya::programs::xdp::XdpFlags::empty() -> Self
pub const fn aya::programs::xdp::XdpFlags::from_bits(bits: u32) -> core::option::Option<Self>
pub const fn aya::programs::xdp::XdpFlags::from_bits_retain(bits: u32) -> Self
pub const fn aya::programs::xdp::XdpFlags::from_bits_truncate(bits: u32) -> Self
pub fn aya::programs::xdp::XdpFlags::from_name(name: &str) -> core::option::Option<Self>
pub fn aya::programs::xdp::XdpFlags::insert(&mut self, other: Self)
pub const fn aya::programs::xdp::XdpFlags::intersection(self, other: Self) -> Self
pub const fn aya::programs::xdp::XdpFlags::intersects(&self, other: Self) -> bool
pub const fn aya::programs::xdp::XdpFlags::is_all(&self) -> bool
pub const fn aya::programs::xdp::XdpFlags::is_empty(&self) -> bool
pub fn aya::programs::xdp::XdpFlags::remove(&mut self, other: Self)
pub fn aya::programs::xdp::XdpFlags::set(&mut self, other: Self, value: bool)
pub const fn aya::programs::xdp::XdpFlags::symmetric_difference(self, other: Self) -> Self
pub fn aya::programs::xdp::XdpFlags::toggle(&mut self, other: Self)
pub const fn aya::programs::xdp::XdpFlags::union(self, other: Self) -> Self
impl aya::programs::xdp::XdpFlags
pub const fn aya::programs::xdp::XdpFlags::iter(&self) -> bitflags::iter::Iter<aya::programs::xdp::XdpFlags>
pub const fn aya::programs::xdp::XdpFlags::iter_names(&self) -> bitflags::iter::IterNames<aya::programs::xdp::XdpFlags>
impl bitflags::traits::Flags for aya::programs::xdp::XdpFlags
pub type aya::programs::xdp::XdpFlags::Bits = u32
pub const aya::programs::xdp::XdpFlags::FLAGS: &'static [bitflags::traits::Flag<aya::programs::xdp::XdpFlags>]
pub fn aya::programs::xdp::XdpFlags::bits(&self) -> u32
pub fn aya::programs::xdp::XdpFlags::from_bits_retain(bits: u32) -> aya::programs::xdp::XdpFlags
impl bitflags::traits::PublicFlags for aya::programs::xdp::XdpFlags
pub type aya::programs::xdp::XdpFlags::Internal = InternalBitFlags
pub type aya::programs::xdp::XdpFlags::Primitive = u32
impl core::clone::Clone for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::clone(&self) -> aya::programs::xdp::XdpFlags
impl core::default::Default for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::default() -> aya::programs::xdp::XdpFlags
impl core::fmt::Binary for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Debug for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::LowerHex for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Octal for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::UpperHex for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::iter::traits::collect::Extend<aya::programs::xdp::XdpFlags> for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::extend<T: core::iter::traits::collect::IntoIterator<Item = Self>>(&mut self, iterator: T)
impl core::iter::traits::collect::FromIterator<aya::programs::xdp::XdpFlags> for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::from_iter<T: core::iter::traits::collect::IntoIterator<Item = Self>>(iterator: T) -> Self
impl core::iter::traits::collect::IntoIterator for aya::programs::xdp::XdpFlags
pub type aya::programs::xdp::XdpFlags::IntoIter = bitflags::iter::Iter<aya::programs::xdp::XdpFlags>
pub type aya::programs::xdp::XdpFlags::Item = aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::into_iter(self) -> Self::IntoIter
impl core::marker::Copy for aya::programs::xdp::XdpFlags
impl core::ops::arith::Sub for aya::programs::xdp::XdpFlags
pub type aya::programs::xdp::XdpFlags::Output = aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::sub(self, other: Self) -> Self
impl core::ops::arith::SubAssign for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::sub_assign(&mut self, other: Self)
impl core::ops::bit::BitAnd for aya::programs::xdp::XdpFlags
pub type aya::programs::xdp::XdpFlags::Output = aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::bitand(self, other: Self) -> Self
impl core::ops::bit::BitAndAssign for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::bitand_assign(&mut self, other: Self)
impl core::ops::bit::BitOr for aya::programs::xdp::XdpFlags
pub type aya::programs::xdp::XdpFlags::Output = aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::bitor(self, other: aya::programs::xdp::XdpFlags) -> Self
impl core::ops::bit::BitOrAssign for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::bitor_assign(&mut self, other: Self)
impl core::ops::bit::BitXor for aya::programs::xdp::XdpFlags
pub type aya::programs::xdp::XdpFlags::Output = aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::bitxor(self, other: Self) -> Self
impl core::ops::bit::BitXorAssign for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::bitxor_assign(&mut self, other: Self)
impl core::ops::bit::Not for aya::programs::xdp::XdpFlags
pub type aya::programs::xdp::XdpFlags::Output = aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::not(self) -> Self
impl core::marker::Freeze for aya::programs::xdp::XdpFlags
impl core::marker::Send for aya::programs::xdp::XdpFlags
impl core::marker::Sync for aya::programs::xdp::XdpFlags
impl core::marker::Unpin for aya::programs::xdp::XdpFlags
impl core::panic::unwind_safe::RefUnwindSafe for aya::programs::xdp::XdpFlags
impl core::panic::unwind_safe::UnwindSafe for aya::programs::xdp::XdpFlags
impl<T, U> core::convert::Into<U> for aya::programs::xdp::XdpFlags where U: core::convert::From<T>
pub fn aya::programs::xdp::XdpFlags::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::programs::xdp::XdpFlags where U: core::convert::Into<T>
pub type aya::programs::xdp::XdpFlags::Error = core::convert::Infallible
pub fn aya::programs::xdp::XdpFlags::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::programs::xdp::XdpFlags where U: core::convert::TryFrom<T>
pub type aya::programs::xdp::XdpFlags::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::programs::xdp::XdpFlags::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for aya::programs::xdp::XdpFlags where T: core::clone::Clone
pub type aya::programs::xdp::XdpFlags::Owned = T
pub fn aya::programs::xdp::XdpFlags::clone_into(&self, target: &mut T)
pub fn aya::programs::xdp::XdpFlags::to_owned(&self) -> T
impl<T> core::any::Any for aya::programs::xdp::XdpFlags where T: 'static + ?core::marker::Sized
pub fn aya::programs::xdp::XdpFlags::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::programs::xdp::XdpFlags where T: ?core::marker::Sized
pub fn aya::programs::xdp::XdpFlags::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::programs::xdp::XdpFlags where T: ?core::marker::Sized
pub fn aya::programs::xdp::XdpFlags::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for aya::programs::xdp::XdpFlags where T: core::clone::Clone
pub unsafe fn aya::programs::xdp::XdpFlags::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for aya::programs::xdp::XdpFlags
pub fn aya::programs::xdp::XdpFlags::from(t: T) -> T
pub trait aya::programs::Link: core::fmt::Debug + 'static
pub type aya::programs::Link::Id: core::fmt::Debug + core::hash::Hash + core::cmp::Eq + core::cmp::PartialEq
pub fn aya::programs::Link::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::Link::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::cgroup_device::CgroupDeviceLink
pub type aya::programs::cgroup_device::CgroupDeviceLink::Id = aya::programs::cgroup_device::CgroupDeviceLinkId
pub fn aya::programs::cgroup_device::CgroupDeviceLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_device::CgroupDeviceLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::cgroup_skb::CgroupSkbLink
pub type aya::programs::cgroup_skb::CgroupSkbLink::Id = aya::programs::cgroup_skb::CgroupSkbLinkId
pub fn aya::programs::cgroup_skb::CgroupSkbLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_skb::CgroupSkbLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::cgroup_sock::CgroupSockLink
pub type aya::programs::cgroup_sock::CgroupSockLink::Id = aya::programs::cgroup_sock::CgroupSockLinkId
pub fn aya::programs::cgroup_sock::CgroupSockLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_sock::CgroupSockLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::cgroup_sock_addr::CgroupSockAddrLink
pub type aya::programs::cgroup_sock_addr::CgroupSockAddrLink::Id = aya::programs::cgroup_sock_addr::CgroupSockAddrLinkId
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_sock_addr::CgroupSockAddrLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::cgroup_sockopt::CgroupSockoptLink
pub type aya::programs::cgroup_sockopt::CgroupSockoptLink::Id = aya::programs::cgroup_sockopt::CgroupSockoptLinkId
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_sockopt::CgroupSockoptLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::cgroup_sysctl::CgroupSysctlLink
pub type aya::programs::cgroup_sysctl::CgroupSysctlLink::Id = aya::programs::cgroup_sysctl::CgroupSysctlLinkId
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::cgroup_sysctl::CgroupSysctlLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::extension::ExtensionLink
pub type aya::programs::extension::ExtensionLink::Id = aya::programs::extension::ExtensionLinkId
pub fn aya::programs::extension::ExtensionLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::extension::ExtensionLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::fentry::FEntryLink
pub type aya::programs::fentry::FEntryLink::Id = aya::programs::fentry::FEntryLinkId
pub fn aya::programs::fentry::FEntryLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::fentry::FEntryLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::fexit::FExitLink
pub type aya::programs::fexit::FExitLink::Id = aya::programs::fexit::FExitLinkId
pub fn aya::programs::fexit::FExitLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::fexit::FExitLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::iter::IterLink
pub type aya::programs::iter::IterLink::Id = aya::programs::iter::IterLinkId
pub fn aya::programs::iter::IterLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::iter::IterLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::kprobe::KProbeLink
pub type aya::programs::kprobe::KProbeLink::Id = aya::programs::kprobe::KProbeLinkId
pub fn aya::programs::kprobe::KProbeLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::kprobe::KProbeLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::links::FdLink
pub type aya::programs::links::FdLink::Id = aya::programs::links::FdLinkId
pub fn aya::programs::links::FdLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::links::FdLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::links::ProgAttachLink
pub type aya::programs::links::ProgAttachLink::Id = aya::programs::links::ProgAttachLinkId
pub fn aya::programs::links::ProgAttachLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::links::ProgAttachLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::lirc_mode2::LircLink
pub type aya::programs::lirc_mode2::LircLink::Id = aya::programs::lirc_mode2::LircLinkId
pub fn aya::programs::lirc_mode2::LircLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::lirc_mode2::LircLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::lsm::LsmLink
pub type aya::programs::lsm::LsmLink::Id = aya::programs::lsm::LsmLinkId
pub fn aya::programs::lsm::LsmLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::lsm::LsmLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::perf_attach::PerfLink
pub type aya::programs::perf_attach::PerfLink::Id = aya::programs::perf_attach::PerfLinkId
pub fn aya::programs::perf_attach::PerfLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::perf_attach::PerfLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::perf_event::PerfEventLink
pub type aya::programs::perf_event::PerfEventLink::Id = aya::programs::perf_event::PerfEventLinkId
pub fn aya::programs::perf_event::PerfEventLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::perf_event::PerfEventLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::raw_trace_point::RawTracePointLink
pub type aya::programs::raw_trace_point::RawTracePointLink::Id = aya::programs::raw_trace_point::RawTracePointLinkId
pub fn aya::programs::raw_trace_point::RawTracePointLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::raw_trace_point::RawTracePointLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::sk_lookup::SkLookupLink
pub type aya::programs::sk_lookup::SkLookupLink::Id = aya::programs::sk_lookup::SkLookupLinkId
pub fn aya::programs::sk_lookup::SkLookupLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::sk_lookup::SkLookupLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::sk_msg::SkMsgLink
pub type aya::programs::sk_msg::SkMsgLink::Id = aya::programs::sk_msg::SkMsgLinkId
pub fn aya::programs::sk_msg::SkMsgLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::sk_msg::SkMsgLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::sk_skb::SkSkbLink
pub type aya::programs::sk_skb::SkSkbLink::Id = aya::programs::sk_skb::SkSkbLinkId
pub fn aya::programs::sk_skb::SkSkbLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::sk_skb::SkSkbLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::sock_ops::SockOpsLink
pub type aya::programs::sock_ops::SockOpsLink::Id = aya::programs::sock_ops::SockOpsLinkId
pub fn aya::programs::sock_ops::SockOpsLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::sock_ops::SockOpsLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::socket_filter::SocketFilterLink
pub type aya::programs::socket_filter::SocketFilterLink::Id = aya::programs::socket_filter::SocketFilterLinkId
pub fn aya::programs::socket_filter::SocketFilterLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::socket_filter::SocketFilterLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::tc::SchedClassifierLink
pub type aya::programs::tc::SchedClassifierLink::Id = aya::programs::tc::SchedClassifierLinkId
pub fn aya::programs::tc::SchedClassifierLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::tc::SchedClassifierLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::tp_btf::BtfTracePointLink
pub type aya::programs::tp_btf::BtfTracePointLink::Id = aya::programs::tp_btf::BtfTracePointLinkId
pub fn aya::programs::tp_btf::BtfTracePointLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::tp_btf::BtfTracePointLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::trace_point::TracePointLink
pub type aya::programs::trace_point::TracePointLink::Id = aya::programs::trace_point::TracePointLinkId
pub fn aya::programs::trace_point::TracePointLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::trace_point::TracePointLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::uprobe::UProbeLink
pub type aya::programs::uprobe::UProbeLink::Id = aya::programs::uprobe::UProbeLinkId
pub fn aya::programs::uprobe::UProbeLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::uprobe::UProbeLink::id(&self) -> Self::Id
impl aya::programs::links::Link for aya::programs::xdp::XdpLink
pub type aya::programs::xdp::XdpLink::Id = aya::programs::xdp::XdpLinkId
pub fn aya::programs::xdp::XdpLink::detach(self) -> core::result::Result<(), aya::programs::ProgramError>
pub fn aya::programs::xdp::XdpLink::id(&self) -> Self::Id
pub trait aya::programs::MultiProgLink
pub fn aya::programs::MultiProgLink::fd(&self) -> core::result::Result<std::os::fd::owned::BorrowedFd<'_>, aya::programs::links::LinkError>
impl aya::programs::MultiProgLink for aya::programs::tc::SchedClassifierLink
pub fn aya::programs::tc::SchedClassifierLink::fd(&self) -> core::result::Result<std::os::fd::owned::BorrowedFd<'_>, aya::programs::links::LinkError>
pub trait aya::programs::MultiProgram
pub fn aya::programs::MultiProgram::fd(&self) -> core::result::Result<std::os::fd::owned::BorrowedFd<'_>, aya::programs::ProgramError>
impl aya::programs::MultiProgram for aya::programs::tc::SchedClassifier
pub fn aya::programs::tc::SchedClassifier::fd(&self) -> core::result::Result<std::os::fd::owned::BorrowedFd<'_>, aya::programs::ProgramError>
pub fn aya::programs::loaded_programs() -> impl core::iter::traits::iterator::Iterator<Item = core::result::Result<aya::programs::ProgramInfo, aya::programs::ProgramError>>
pub mod aya::sys
#[non_exhaustive] pub enum aya::sys::Stats
pub aya::sys::Stats::RunTime
impl core::clone::Clone for aya::sys::Stats
pub fn aya::sys::Stats::clone(&self) -> aya::sys::Stats
impl core::convert::From<aya::sys::Stats> for aya_obj::generated::linux_bindings_x86_64::bpf_stats_type
pub fn aya_obj::generated::linux_bindings_x86_64::bpf_stats_type::from(value: aya::sys::Stats) -> Self
impl core::fmt::Debug for aya::sys::Stats
pub fn aya::sys::Stats::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for aya::sys::Stats
impl core::marker::Freeze for aya::sys::Stats
impl core::marker::Send for aya::sys::Stats
impl core::marker::Sync for aya::sys::Stats
impl core::marker::Unpin for aya::sys::Stats
impl core::panic::unwind_safe::RefUnwindSafe for aya::sys::Stats
impl core::panic::unwind_safe::UnwindSafe for aya::sys::Stats
impl<T, U> core::convert::Into<U> for aya::sys::Stats where U: core::convert::From<T>
pub fn aya::sys::Stats::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::sys::Stats where U: core::convert::Into<T>
pub type aya::sys::Stats::Error = core::convert::Infallible
pub fn aya::sys::Stats::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::sys::Stats where U: core::convert::TryFrom<T>
pub type aya::sys::Stats::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::sys::Stats::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for aya::sys::Stats where T: core::clone::Clone
pub type aya::sys::Stats::Owned = T
pub fn aya::sys::Stats::clone_into(&self, target: &mut T)
pub fn aya::sys::Stats::to_owned(&self) -> T
impl<T> core::any::Any for aya::sys::Stats where T: 'static + ?core::marker::Sized
pub fn aya::sys::Stats::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::sys::Stats where T: ?core::marker::Sized
pub fn aya::sys::Stats::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::sys::Stats where T: ?core::marker::Sized
pub fn aya::sys::Stats::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for aya::sys::Stats where T: core::clone::Clone
pub unsafe fn aya::sys::Stats::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for aya::sys::Stats
pub fn aya::sys::Stats::from(t: T) -> T
pub struct aya::sys::SyscallError
pub aya::sys::SyscallError::call: &'static str
pub aya::sys::SyscallError::io_error: std::io::error::Error
impl core::convert::From<aya::sys::SyscallError> for aya::maps::MapError
pub fn aya::maps::MapError::from(source: aya::sys::SyscallError) -> Self
impl core::convert::From<aya::sys::SyscallError> for aya::pin::PinError
pub fn aya::pin::PinError::from(source: aya::sys::SyscallError) -> Self
impl core::convert::From<aya::sys::SyscallError> for aya::programs::ProgramError
pub fn aya::programs::ProgramError::from(source: aya::sys::SyscallError) -> Self
impl core::convert::From<aya::sys::SyscallError> for aya::programs::links::LinkError
pub fn aya::programs::links::LinkError::from(source: aya::sys::SyscallError) -> Self
impl core::error::Error for aya::sys::SyscallError
pub fn aya::sys::SyscallError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Debug for aya::sys::SyscallError
pub fn aya::sys::SyscallError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for aya::sys::SyscallError
pub fn aya::sys::SyscallError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::sys::SyscallError
impl core::marker::Send for aya::sys::SyscallError
impl core::marker::Sync for aya::sys::SyscallError
impl core::marker::Unpin for aya::sys::SyscallError
impl !core::panic::unwind_safe::RefUnwindSafe for aya::sys::SyscallError
impl !core::panic::unwind_safe::UnwindSafe for aya::sys::SyscallError
impl<T, U> core::convert::Into<U> for aya::sys::SyscallError where U: core::convert::From<T>
pub fn aya::sys::SyscallError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::sys::SyscallError where U: core::convert::Into<T>
pub type aya::sys::SyscallError::Error = core::convert::Infallible
pub fn aya::sys::SyscallError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::sys::SyscallError where U: core::convert::TryFrom<T>
pub type aya::sys::SyscallError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::sys::SyscallError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for aya::sys::SyscallError where T: core::fmt::Display + ?core::marker::Sized
pub fn aya::sys::SyscallError::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for aya::sys::SyscallError where T: 'static + ?core::marker::Sized
pub fn aya::sys::SyscallError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::sys::SyscallError where T: ?core::marker::Sized
pub fn aya::sys::SyscallError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::sys::SyscallError where T: ?core::marker::Sized
pub fn aya::sys::SyscallError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::sys::SyscallError
pub fn aya::sys::SyscallError::from(t: T) -> T
pub fn aya::sys::enable_stats(stats_type: aya::sys::Stats) -> core::result::Result<std::os::fd::owned::OwnedFd, aya::sys::SyscallError>
pub mod aya::util
pub struct aya::util::KernelVersion
impl aya::util::KernelVersion
pub fn aya::util::KernelVersion::code(self) -> u32
pub fn aya::util::KernelVersion::current() -> core::result::Result<Self, impl core::error::Error>
pub fn aya::util::KernelVersion::new(major: u8, minor: u8, patch: u16) -> Self
impl core::clone::Clone for aya::util::KernelVersion
pub fn aya::util::KernelVersion::clone(&self) -> aya::util::KernelVersion
impl core::cmp::Eq for aya::util::KernelVersion
impl core::cmp::PartialEq for aya::util::KernelVersion
pub fn aya::util::KernelVersion::eq(&self, other: &aya::util::KernelVersion) -> bool
impl core::cmp::PartialOrd for aya::util::KernelVersion
pub fn aya::util::KernelVersion::partial_cmp(&self, other: &aya::util::KernelVersion) -> core::option::Option<core::cmp::Ordering>
impl core::fmt::Debug for aya::util::KernelVersion
pub fn aya::util::KernelVersion::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for aya::util::KernelVersion
pub fn aya::util::KernelVersion::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for aya::util::KernelVersion
impl core::marker::StructuralPartialEq for aya::util::KernelVersion
impl core::marker::Freeze for aya::util::KernelVersion
impl core::marker::Send for aya::util::KernelVersion
impl core::marker::Sync for aya::util::KernelVersion
impl core::marker::Unpin for aya::util::KernelVersion
impl core::panic::unwind_safe::RefUnwindSafe for aya::util::KernelVersion
impl core::panic::unwind_safe::UnwindSafe for aya::util::KernelVersion
impl<Q, K> equivalent::Equivalent<K> for aya::util::KernelVersion where Q: core::cmp::Eq + ?core::marker::Sized, K: core::borrow::Borrow<Q> + ?core::marker::Sized
pub fn aya::util::KernelVersion::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for aya::util::KernelVersion where U: core::convert::From<T>
pub fn aya::util::KernelVersion::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::util::KernelVersion where U: core::convert::Into<T>
pub type aya::util::KernelVersion::Error = core::convert::Infallible
pub fn aya::util::KernelVersion::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::util::KernelVersion where U: core::convert::TryFrom<T>
pub type aya::util::KernelVersion::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::util::KernelVersion::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for aya::util::KernelVersion where T: core::clone::Clone
pub type aya::util::KernelVersion::Owned = T
pub fn aya::util::KernelVersion::clone_into(&self, target: &mut T)
pub fn aya::util::KernelVersion::to_owned(&self) -> T
impl<T> alloc::string::ToString for aya::util::KernelVersion where T: core::fmt::Display + ?core::marker::Sized
pub fn aya::util::KernelVersion::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for aya::util::KernelVersion where T: 'static + ?core::marker::Sized
pub fn aya::util::KernelVersion::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::util::KernelVersion where T: ?core::marker::Sized
pub fn aya::util::KernelVersion::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::util::KernelVersion where T: ?core::marker::Sized
pub fn aya::util::KernelVersion::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for aya::util::KernelVersion where T: core::clone::Clone
pub unsafe fn aya::util::KernelVersion::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for aya::util::KernelVersion
pub fn aya::util::KernelVersion::from(t: T) -> T
pub fn aya::util::kernel_symbols() -> core::result::Result<alloc::collections::btree::map::BTreeMap<u64, alloc::string::String>, std::io::error::Error>
pub fn aya::util::nr_cpus() -> core::result::Result<usize, (&'static str, std::io::error::Error)>
pub fn aya::util::online_cpus() -> core::result::Result<alloc::vec::Vec<u32>, (&'static str, std::io::error::Error)>
pub fn aya::util::syscall_prefix() -> core::result::Result<&'static str, std::io::error::Error>
pub macro aya::include_bytes_aligned!
pub enum aya::EbpfError
pub aya::EbpfError::BtfError(aya_obj::btf::btf::BtfError)
pub aya::EbpfError::BtfRelocationError(aya_obj::btf::relocation::BtfRelocationError)
pub aya::EbpfError::FileError
pub aya::EbpfError::FileError::error: std::io::error::Error
pub aya::EbpfError::FileError::path: std::path::PathBuf
pub aya::EbpfError::MapError(aya::maps::MapError)
pub aya::EbpfError::NoBTF
pub aya::EbpfError::ParseError(aya_obj::obj::ParseError)
pub aya::EbpfError::ProgramError(aya::programs::ProgramError)
pub aya::EbpfError::RelocationError(aya_obj::relocation::EbpfRelocationError)
pub aya::EbpfError::UnexpectedPinningType
pub aya::EbpfError::UnexpectedPinningType::name: u32
impl core::convert::From<aya::maps::MapError> for aya::EbpfError
pub fn aya::EbpfError::from(source: aya::maps::MapError) -> Self
impl core::convert::From<aya::programs::ProgramError> for aya::EbpfError
pub fn aya::EbpfError::from(source: aya::programs::ProgramError) -> Self
impl core::convert::From<aya_obj::btf::btf::BtfError> for aya::EbpfError
pub fn aya::EbpfError::from(source: aya_obj::btf::btf::BtfError) -> Self
impl core::convert::From<aya_obj::btf::relocation::BtfRelocationError> for aya::EbpfError
pub fn aya::EbpfError::from(source: aya_obj::btf::relocation::BtfRelocationError) -> Self
impl core::convert::From<aya_obj::obj::ParseError> for aya::EbpfError
pub fn aya::EbpfError::from(source: aya_obj::obj::ParseError) -> Self
impl core::convert::From<aya_obj::relocation::EbpfRelocationError> for aya::EbpfError
pub fn aya::EbpfError::from(source: aya_obj::relocation::EbpfRelocationError) -> Self
impl core::error::Error for aya::EbpfError
pub fn aya::EbpfError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Debug for aya::EbpfError
pub fn aya::EbpfError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for aya::EbpfError
pub fn aya::EbpfError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::EbpfError
impl core::marker::Send for aya::EbpfError
impl core::marker::Sync for aya::EbpfError
impl core::marker::Unpin for aya::EbpfError
impl !core::panic::unwind_safe::RefUnwindSafe for aya::EbpfError
impl !core::panic::unwind_safe::UnwindSafe for aya::EbpfError
impl<T, U> core::convert::Into<U> for aya::EbpfError where U: core::convert::From<T>
pub fn aya::EbpfError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::EbpfError where U: core::convert::Into<T>
pub type aya::EbpfError::Error = core::convert::Infallible
pub fn aya::EbpfError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::EbpfError where U: core::convert::TryFrom<T>
pub type aya::EbpfError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::EbpfError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for aya::EbpfError where T: core::fmt::Display + ?core::marker::Sized
pub fn aya::EbpfError::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for aya::EbpfError where T: 'static + ?core::marker::Sized
pub fn aya::EbpfError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::EbpfError where T: ?core::marker::Sized
pub fn aya::EbpfError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::EbpfError where T: ?core::marker::Sized
pub fn aya::EbpfError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::EbpfError
pub fn aya::EbpfError::from(t: T) -> T
pub struct aya::Ebpf
impl aya::Ebpf
pub fn aya::Ebpf::load(data: &[u8]) -> core::result::Result<Self, aya::EbpfError>
pub fn aya::Ebpf::load_file<P: core::convert::AsRef<std::path::Path>>(path: P) -> core::result::Result<Self, aya::EbpfError>
pub fn aya::Ebpf::map(&self, name: &str) -> core::option::Option<&aya::maps::Map>
pub fn aya::Ebpf::map_mut(&mut self, name: &str) -> core::option::Option<&mut aya::maps::Map>
pub fn aya::Ebpf::maps(&self) -> impl core::iter::traits::iterator::Iterator<Item = (&str, &aya::maps::Map)>
pub fn aya::Ebpf::maps_mut(&mut self) -> impl core::iter::traits::iterator::Iterator<Item = (&str, &mut aya::maps::Map)>
pub fn aya::Ebpf::program(&self, name: &str) -> core::option::Option<&aya::programs::Program>
pub fn aya::Ebpf::program_mut(&mut self, name: &str) -> core::option::Option<&mut aya::programs::Program>
pub fn aya::Ebpf::programs(&self) -> impl core::iter::traits::iterator::Iterator<Item = (&str, &aya::programs::Program)>
pub fn aya::Ebpf::programs_mut(&mut self) -> impl core::iter::traits::iterator::Iterator<Item = (&str, &mut aya::programs::Program)>
pub fn aya::Ebpf::take_map(&mut self, name: &str) -> core::option::Option<aya::maps::Map>
impl core::fmt::Debug for aya::Ebpf
pub fn aya::Ebpf::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for aya::Ebpf
impl core::marker::Send for aya::Ebpf
impl core::marker::Sync for aya::Ebpf
impl core::marker::Unpin for aya::Ebpf
impl core::panic::unwind_safe::RefUnwindSafe for aya::Ebpf
impl core::panic::unwind_safe::UnwindSafe for aya::Ebpf
impl<T, U> core::convert::Into<U> for aya::Ebpf where U: core::convert::From<T>
pub fn aya::Ebpf::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::Ebpf where U: core::convert::Into<T>
pub type aya::Ebpf::Error = core::convert::Infallible
pub fn aya::Ebpf::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::Ebpf where U: core::convert::TryFrom<T>
pub type aya::Ebpf::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::Ebpf::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::Ebpf where T: 'static + ?core::marker::Sized
pub fn aya::Ebpf::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::Ebpf where T: ?core::marker::Sized
pub fn aya::Ebpf::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::Ebpf where T: ?core::marker::Sized
pub fn aya::Ebpf::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::Ebpf
pub fn aya::Ebpf::from(t: T) -> T
pub struct aya::EbpfLoader<'a>
impl<'a> aya::EbpfLoader<'a>
pub fn aya::EbpfLoader<'a>::allow_unsupported_maps(&mut self) -> &mut Self
pub fn aya::EbpfLoader<'a>::btf(&mut self, btf: core::option::Option<&'a aya_obj::btf::btf::Btf>) -> &mut Self
pub fn aya::EbpfLoader<'a>::extension(&mut self, name: &'a str) -> &mut Self
pub fn aya::EbpfLoader<'a>::load(&mut self, data: &[u8]) -> core::result::Result<aya::Ebpf, aya::EbpfError>
pub fn aya::EbpfLoader<'a>::load_file<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> core::result::Result<aya::Ebpf, aya::EbpfError>
pub fn aya::EbpfLoader<'a>::map_pin_path<P: core::convert::AsRef<std::path::Path>>(&mut self, path: P) -> &mut Self
pub fn aya::EbpfLoader<'a>::new() -> Self
pub fn aya::EbpfLoader<'a>::set_global<T: core::convert::Into<aya::GlobalData<'a>>>(&mut self, name: &'a str, value: T, must_exist: bool) -> &mut Self
pub fn aya::EbpfLoader<'a>::set_max_entries(&mut self, name: &'a str, size: u32) -> &mut Self
pub fn aya::EbpfLoader<'a>::verifier_log_level(&mut self, level: aya::VerifierLogLevel) -> &mut Self
impl core::default::Default for aya::EbpfLoader<'_>
pub fn aya::EbpfLoader<'_>::default() -> Self
impl<'a> core::fmt::Debug for aya::EbpfLoader<'a>
pub fn aya::EbpfLoader<'a>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<'a> core::marker::Freeze for aya::EbpfLoader<'a>
impl<'a> core::marker::Send for aya::EbpfLoader<'a>
impl<'a> core::marker::Sync for aya::EbpfLoader<'a>
impl<'a> core::marker::Unpin for aya::EbpfLoader<'a>
impl<'a> core::panic::unwind_safe::RefUnwindSafe for aya::EbpfLoader<'a>
impl<'a> core::panic::unwind_safe::UnwindSafe for aya::EbpfLoader<'a>
impl<T, U> core::convert::Into<U> for aya::EbpfLoader<'a> where U: core::convert::From<T>
pub fn aya::EbpfLoader<'a>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::EbpfLoader<'a> where U: core::convert::Into<T>
pub type aya::EbpfLoader<'a>::Error = core::convert::Infallible
pub fn aya::EbpfLoader<'a>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::EbpfLoader<'a> where U: core::convert::TryFrom<T>
pub type aya::EbpfLoader<'a>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::EbpfLoader<'a>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::EbpfLoader<'a> where T: 'static + ?core::marker::Sized
pub fn aya::EbpfLoader<'a>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::EbpfLoader<'a> where T: ?core::marker::Sized
pub fn aya::EbpfLoader<'a>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::EbpfLoader<'a> where T: ?core::marker::Sized
pub fn aya::EbpfLoader<'a>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::EbpfLoader<'a>
pub fn aya::EbpfLoader<'a>::from(t: T) -> T
pub struct aya::GlobalData<'a>
impl<'a, T: aya::Pod> core::convert::From<&'a T> for aya::GlobalData<'a>
pub fn aya::GlobalData<'a>::from(v: &'a T) -> Self
impl<'a, T: aya::Pod> core::convert::From<&'a [T]> for aya::GlobalData<'a>
pub fn aya::GlobalData<'a>::from(s: &'a [T]) -> Self
impl<'a> core::marker::Freeze for aya::GlobalData<'a>
impl<'a> core::marker::Send for aya::GlobalData<'a>
impl<'a> core::marker::Sync for aya::GlobalData<'a>
impl<'a> core::marker::Unpin for aya::GlobalData<'a>
impl<'a> core::panic::unwind_safe::RefUnwindSafe for aya::GlobalData<'a>
impl<'a> core::panic::unwind_safe::UnwindSafe for aya::GlobalData<'a>
impl<T, U> core::convert::Into<U> for aya::GlobalData<'a> where U: core::convert::From<T>
pub fn aya::GlobalData<'a>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::GlobalData<'a> where U: core::convert::Into<T>
pub type aya::GlobalData<'a>::Error = core::convert::Infallible
pub fn aya::GlobalData<'a>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::GlobalData<'a> where U: core::convert::TryFrom<T>
pub type aya::GlobalData<'a>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::GlobalData<'a>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for aya::GlobalData<'a> where T: 'static + ?core::marker::Sized
pub fn aya::GlobalData<'a>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::GlobalData<'a> where T: ?core::marker::Sized
pub fn aya::GlobalData<'a>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::GlobalData<'a> where T: ?core::marker::Sized
pub fn aya::GlobalData<'a>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for aya::GlobalData<'a>
pub fn aya::GlobalData<'a>::from(t: T) -> T
pub struct aya::VerifierLogLevel(_)
impl aya::VerifierLogLevel
pub const aya::VerifierLogLevel::DEBUG: Self
pub const aya::VerifierLogLevel::DISABLE: Self
pub const aya::VerifierLogLevel::STATS: Self
pub const aya::VerifierLogLevel::VERBOSE: Self
impl aya::VerifierLogLevel
pub const fn aya::VerifierLogLevel::all() -> Self
pub const fn aya::VerifierLogLevel::bits(&self) -> u32
pub const fn aya::VerifierLogLevel::complement(self) -> Self
pub const fn aya::VerifierLogLevel::contains(&self, other: Self) -> bool
pub const fn aya::VerifierLogLevel::difference(self, other: Self) -> Self
pub const fn aya::VerifierLogLevel::empty() -> Self
pub const fn aya::VerifierLogLevel::from_bits(bits: u32) -> core::option::Option<Self>
pub const fn aya::VerifierLogLevel::from_bits_retain(bits: u32) -> Self
pub const fn aya::VerifierLogLevel::from_bits_truncate(bits: u32) -> Self
pub fn aya::VerifierLogLevel::from_name(name: &str) -> core::option::Option<Self>
pub fn aya::VerifierLogLevel::insert(&mut self, other: Self)
pub const fn aya::VerifierLogLevel::intersection(self, other: Self) -> Self
pub const fn aya::VerifierLogLevel::intersects(&self, other: Self) -> bool
pub const fn aya::VerifierLogLevel::is_all(&self) -> bool
pub const fn aya::VerifierLogLevel::is_empty(&self) -> bool
pub fn aya::VerifierLogLevel::remove(&mut self, other: Self)
pub fn aya::VerifierLogLevel::set(&mut self, other: Self, value: bool)
pub const fn aya::VerifierLogLevel::symmetric_difference(self, other: Self) -> Self
pub fn aya::VerifierLogLevel::toggle(&mut self, other: Self)
pub const fn aya::VerifierLogLevel::union(self, other: Self) -> Self
impl aya::VerifierLogLevel
pub const fn aya::VerifierLogLevel::iter(&self) -> bitflags::iter::Iter<aya::VerifierLogLevel>
pub const fn aya::VerifierLogLevel::iter_names(&self) -> bitflags::iter::IterNames<aya::VerifierLogLevel>
impl bitflags::traits::Flags for aya::VerifierLogLevel
pub type aya::VerifierLogLevel::Bits = u32
pub const aya::VerifierLogLevel::FLAGS: &'static [bitflags::traits::Flag<aya::VerifierLogLevel>]
pub fn aya::VerifierLogLevel::bits(&self) -> u32
pub fn aya::VerifierLogLevel::from_bits_retain(bits: u32) -> aya::VerifierLogLevel
impl bitflags::traits::PublicFlags for aya::VerifierLogLevel
pub type aya::VerifierLogLevel::Internal = InternalBitFlags
pub type aya::VerifierLogLevel::Primitive = u32
impl core::clone::Clone for aya::VerifierLogLevel
pub fn aya::VerifierLogLevel::clone(&self) -> aya::VerifierLogLevel
impl core::default::Default for aya::VerifierLogLevel
pub fn aya::VerifierLogLevel::default() -> Self
impl core::fmt::Binary for aya::VerifierLogLevel
pub fn aya::VerifierLogLevel::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Debug for aya::VerifierLogLevel
pub fn aya::VerifierLogLevel::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::LowerHex for aya::VerifierLogLevel
pub fn aya::VerifierLogLevel::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Octal for aya::VerifierLogLevel
pub fn aya::VerifierLogLevel::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::UpperHex for aya::VerifierLogLevel
pub fn aya::VerifierLogLevel::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::iter::traits::collect::Extend<aya::VerifierLogLevel> for aya::VerifierLogLevel
pub fn aya::VerifierLogLevel::extend<T: core::iter::traits::collect::IntoIterator<Item = Self>>(&mut self, iterator: T)
impl core::iter::traits::collect::FromIterator<aya::VerifierLogLevel> for aya::VerifierLogLevel
pub fn aya::VerifierLogLevel::from_iter<T: core::iter::traits::collect::IntoIterator<Item = Self>>(iterator: T) -> Self
impl core::iter::traits::collect::IntoIterator for aya::VerifierLogLevel
pub type aya::VerifierLogLevel::IntoIter = bitflags::iter::Iter<aya::VerifierLogLevel>
pub type aya::VerifierLogLevel::Item = aya::VerifierLogLevel
pub fn aya::VerifierLogLevel::into_iter(self) -> Self::IntoIter
impl core::marker::Copy for aya::VerifierLogLevel
impl core::ops::arith::Sub for aya::VerifierLogLevel
pub type aya::VerifierLogLevel::Output = aya::VerifierLogLevel
pub fn aya::VerifierLogLevel::sub(self, other: Self) -> Self
impl core::ops::arith::SubAssign for aya::VerifierLogLevel
pub fn aya::VerifierLogLevel::sub_assign(&mut self, other: Self)
impl core::ops::bit::BitAnd for aya::VerifierLogLevel
pub type aya::VerifierLogLevel::Output = aya::VerifierLogLevel
pub fn aya::VerifierLogLevel::bitand(self, other: Self) -> Self
impl core::ops::bit::BitAndAssign for aya::VerifierLogLevel
pub fn aya::VerifierLogLevel::bitand_assign(&mut self, other: Self)
impl core::ops::bit::BitOr for aya::VerifierLogLevel
pub type aya::VerifierLogLevel::Output = aya::VerifierLogLevel
pub fn aya::VerifierLogLevel::bitor(self, other: aya::VerifierLogLevel) -> Self
impl core::ops::bit::BitOrAssign for aya::VerifierLogLevel
pub fn aya::VerifierLogLevel::bitor_assign(&mut self, other: Self)
impl core::ops::bit::BitXor for aya::VerifierLogLevel
pub type aya::VerifierLogLevel::Output = aya::VerifierLogLevel
pub fn aya::VerifierLogLevel::bitxor(self, other: Self) -> Self
impl core::ops::bit::BitXorAssign for aya::VerifierLogLevel
pub fn aya::VerifierLogLevel::bitxor_assign(&mut self, other: Self)
impl core::ops::bit::Not for aya::VerifierLogLevel
pub type aya::VerifierLogLevel::Output = aya::VerifierLogLevel
pub fn aya::VerifierLogLevel::not(self) -> Self
impl core::marker::Freeze for aya::VerifierLogLevel
impl core::marker::Send for aya::VerifierLogLevel
impl core::marker::Sync for aya::VerifierLogLevel
impl core::marker::Unpin for aya::VerifierLogLevel
impl core::panic::unwind_safe::RefUnwindSafe for aya::VerifierLogLevel
impl core::panic::unwind_safe::UnwindSafe for aya::VerifierLogLevel
impl<T, U> core::convert::Into<U> for aya::VerifierLogLevel where U: core::convert::From<T>
pub fn aya::VerifierLogLevel::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for aya::VerifierLogLevel where U: core::convert::Into<T>
pub type aya::VerifierLogLevel::Error = core::convert::Infallible
pub fn aya::VerifierLogLevel::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for aya::VerifierLogLevel where U: core::convert::TryFrom<T>
pub type aya::VerifierLogLevel::Error = <U as core::convert::TryFrom<T>>::Error
pub fn aya::VerifierLogLevel::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for aya::VerifierLogLevel where T: core::clone::Clone
pub type aya::VerifierLogLevel::Owned = T
pub fn aya::VerifierLogLevel::clone_into(&self, target: &mut T)
pub fn aya::VerifierLogLevel::to_owned(&self) -> T
impl<T> core::any::Any for aya::VerifierLogLevel where T: 'static + ?core::marker::Sized
pub fn aya::VerifierLogLevel::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for aya::VerifierLogLevel where T: ?core::marker::Sized
pub fn aya::VerifierLogLevel::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for aya::VerifierLogLevel where T: ?core::marker::Sized
pub fn aya::VerifierLogLevel::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for aya::VerifierLogLevel where T: core::clone::Clone
pub unsafe fn aya::VerifierLogLevel::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for aya::VerifierLogLevel
pub fn aya::VerifierLogLevel::from(t: T) -> T
pub unsafe trait aya::Pod: core::marker::Copy + 'static
impl aya::Pod for aya_obj::generated::linux_bindings_x86_64::bpf_cpumap_val
impl aya::Pod for aya_obj::generated::linux_bindings_x86_64::bpf_devmap_val
impl aya::Pod for i128
impl aya::Pod for i16
impl aya::Pod for i32
impl aya::Pod for i64
impl aya::Pod for i8
impl aya::Pod for u128
impl aya::Pod for u16
impl aya::Pod for u32
impl aya::Pod for u64
impl aya::Pod for u8
impl<K: aya::Pod> aya::Pod for aya::maps::lpm_trie::Key<K>
impl<T: aya::Pod, const N: usize> aya::Pod for [T; N]
pub fn aya::features() -> &'static aya_obj::obj::Features
pub type aya::Bpf = aya::Ebpf
pub type aya::BpfError = aya::EbpfError
pub type aya::BpfLoader<'a> = aya::EbpfLoader<'a>
